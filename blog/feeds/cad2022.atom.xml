<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mde.tw - cad2022</title><link href="https://mde.tw/blog/" rel="alternate"></link><link href="https://mde.tw/blog/feeds/cad2022.atom.xml" rel="self"></link><id>https://mde.tw/blog/</id><updated>2022-10-30T21:23:07+08:00</updated><entry><title>2022 Fall 課程 w8</title><link href="https://mde.tw/blog/2022_fall_courses_w8.html" rel="alternate"></link><published>2022-10-29T11:00:00+08:00</published><updated>2022-10-30T21:23:07+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-10-29:/blog/2022_fall_courses_w8.html</id><summary type="html">&lt;p&gt;2022 Fall 課程進入第八週, 就計算機程式與電腦輔助設計實習等課程的架構, 其核心都是繞著網站運作.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2022 Fall 課程進入第八週, 就計算機程式與電腦輔助設計實習等課程的架構, 其核心都是繞著網站運作.&lt;/p&gt;


&lt;h2&gt;計算機程式課程核心&lt;/h2&gt;
&lt;p&gt;一言以蔽之, 計算機程式課程的核心, 就是教導如何在網站上執行程式, 假如只是考慮到網站的前端, 就是讓學員了解如何運用 html、css 與 Javascript, 若涵蓋網站後端, 則指如何使用 Python 程式與網站前端互動.&lt;/p&gt;
&lt;p&gt;然而對機械設計流程之後的應用而言, 在網站上執行程式的重點, 是如何利用網路與程式在網站上進行機電系統模擬.&lt;/p&gt;
&lt;h1&gt;網站&lt;/h1&gt;
&lt;p&gt;KMOLab 課程的網站雖然以 Github Pages 上的網站為主, 但是在轉換為 html 超文件網站之前, 使用者可以透過網站前端與後端的計算機程式與 CAD 套件互動, 然後再設法將模擬或設計的機電資系統結果呈現在 Github Pages 網站上.&lt;/p&gt;
&lt;p&gt;由於 Siemens NX 套件的 NXOpen 程式延伸架構允許利用 Python 程式編寫 API 程式, 因此就網站前端的程式語言選擇, 並非直接使用 Javascript, 而是採用 Brython. 也就是使用者可以在網頁上編寫 Python 格式的 Brython 程式, 然後再轉為 Javascript 執行. 至於後端則使用 CPython + Flask 設法與 NX 、Solvespace 及 Coppeliasim 進行互動.&lt;/p&gt;
&lt;p&gt;2022 Fall 各學員的網站倉儲採用 Github Classroom 配置, 也就是讓各學員的個人課程倉儲位於計算機程式 (cp2022) 與電腦輔助設計實習 (cad2022) 的 organization 代號下: mdecp2022 與 mdecad2022.&lt;/p&gt;
&lt;p&gt;目前 Github Pages 上的倉儲只能顯示最新版特定 branch 上的資料, 因此若希望靜態或動態網站能夠將曾經改版的歷史資料逐一呈現, 則必須在自行架構的同步倉儲中利用網際程式, 或將倉儲的歷程資料同步轉入 Fossil SCM 的 Docs 網站才可達成.&lt;/p&gt;
&lt;p&gt;這裡所謂的網站指符合 WWW 網路協定規範的伺服器, 假如只是純粹在 Ubuntu 或 Windows 上希望透過 WWW server 伺服網頁, 可以採用 Nginx, 其中可以設定為 http 伺服或加上  LetsEncrypt 設定為 https 伺服.&lt;/p&gt;
&lt;p&gt;至於&lt;a href="https://www.wix.com/blog/2021/11/static-vs-dynamic-website/"&gt;區分靜態與動態網站&lt;/a&gt;的關鍵在於是否可透過程式方法, 直接登入 WWW 網站修改內容, 一般來說, 靜態網頁的內容修改, 是修改 html, css 或 Javascript 資料, 該靜態網站的 html 檔案並無讓管理者登入的選項, 但動態網站則通常透過 server 端的程式來產生網頁, 而這些網頁可以採用純 html 的方式儲存, 也可透過 Database 的方式儲存.&lt;/p&gt;
&lt;p&gt;使用者可以將靜態網站視為一個網站最終呈現給使用者的資料, 而動態網站則可以透過程式方法, 配合組織內的各種運作流程來呈現網站內容. 而這些產生網站資料的流程允許置入審查機制或各種內部管理流程的運作後才產生配置在網站上的內容. 然而隨著 Javascript 前端程式的蓬勃發展, 靜態網站與動態網站的區別可以透過網站內容是否牽涉伺服器上的程式運作而定. 網站內容所執行的程式僅依賴網站前端的程式者可視為靜態網站.
而網站內容除了網站前端程式外, 還包括網站後端 server 程式的搭配才產生網站內容者, 則可視為動態網站.&lt;/p&gt;
&lt;h1&gt;程式的編寫與儲存&lt;/h1&gt;
&lt;p&gt;計算機程式課程的推動, 在各學員都能透過 Github Pages 呈現個人倉儲網站內容之後, 就可以直接在個人的靜態網頁中呈現其學習計算機程式語言的歷程. 由於各學員所編寫的 Brython 被要求儲存在其帳號下的 Gist 區域, 因此每次的程式內容改版都能透過版次號碼擷取, 假如再要求各種程式開發過程, 必須仔細透過程式註解說明各段程式編寫的構想與採行方法, 如此便可經由各學員繳交程式的改版歷程所參照的資料或構想判定其原創程度.&lt;/p&gt;
&lt;p&gt;例如: 各學員在 Gist 上編寫程式時, 必須先提供程式編寫目的, 編寫構想, 編寫參考資料與所擬採行的步驟後, 再逐一實現程式內容. &lt;/p&gt;
&lt;h1&gt;計算機程式問題&lt;/h1&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;
&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;p&gt;以下為 1a 計算機程式學員的靜態網頁連結:&lt;/p&gt;
&lt;p id="brython_div1"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

# 利用 document 物件, 以索引 "brython_div1" 取得已經位於 html 網頁中 id="brython_div1" 的位置, 且對應到 brython_div1 變數
brython_div1 = document["brython_div1"]
# 可以用三個單引號或三個雙引號標註多行註解
# 其中的 html 物件有許多建立 html 超文件內容的方法, 以下分別建立
# BUTTON 按鈕, BR 跳行 (break), 以及 A 網站連結 (Anchor)
# &lt;= 是 Brython 程式語言的特殊符號, 專用於將 html 超文件資料送給網頁對應變數
"""
brython_div1 &lt;= html.BUTTON("hello")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= html.A("google", href="https://google.com")
"""
try:
    c = document.query["c"]
except:
    c = "1a"
# 將 1b.txt 資料從 Github Pages 網頁中取下
url = "https://mde.tw/studlist/2022fall/" + c + ".txt"
# 利用 open() 開啟網頁, 利用 read() 讀取網頁內容
# 然後利用 split() 方法, 利用跳行符號對資料進行切割, 切割後的資料結構為 list
# list 資料結構以 [] 區隔, 表示資料為數列, 其起始的索引值為 0
data = open(url).read().split("\n")
# 將每一位學員的靜態網頁共同的網路連結部分設為字串, 且與 mdecp2022 變數對應
mdecp2022 = "https://mdecp2022.github.io/site-"
# 因為取下的資料第一筆為標題, 而最後一筆為空字串, 可以利用 Brython 的數列索引取值範圍將索引 0 與最後一個數列值去除
data = data[1:-1]
# 利用 for 重複迴圈逐一取出 data 數列中的值, 然後以 \t, 也就是 tab 符號切割
count = 0
for i in data:
    count += 1
    stud = i.split("\t")
    # 第一欄位為學號
    stud_num = stud[0]
    # 第二欄未為 github 帳號
    github_acc = stud[1]
    #print(stud_num, github_acc)
    # 若沒有找到 github 帳號, 以學號作為帳號
    if github_acc == "":
        github_acc = stud_num
    # 將靜態網頁共同連結的變數與各自的 github 帳號, 組成完整的各學員靜態網頁連結
    site = mdecp2022 + github_acc
    # 利用 A 物件產生連結, 然後放入 id="brython_div1 所在的網頁位置
    link = html.A(stud_num, href=site)
    brython_div1 &lt;= link
    # 每一筆資料列出後, 以 break 標註跳行
    # 每一行列出五筆資料後, 跳行
    brython_div1 &lt;= " "
    if count % 5 == 0:
        brython_div1 &lt;= html.BR()
&lt;/script&gt;

&lt;p&gt;以下為計算機程式 1b 修課學員的個人倉儲靜態網頁連結:&lt;/p&gt;
&lt;p id="brython_div2"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

# 利用 document 物件, 以索引 "brython_div2" 取得已經位於 html 網頁中 id="brython_div2" 的位置, 且對應到 brython_div2 變數
brython_div2 = document["brython_div2"]
# 可以用三個單引號或三個雙引號標註多行註解
# 其中的 html 物件有許多建立 html 超文件內容的方法, 以下分別建立
# BUTTON 按鈕, BR 跳行 (break), 以及 A 網站連結 (Anchor)
# &lt;= 是 Brython 程式語言的特殊符號, 專用於將 html 超文件資料送給網頁對應變數
"""
brython_div2 &lt;= html.BUTTON("hello")
brython_div2 &lt;= html.BR()
brython_div2 &lt;= html.A("google", href="https://google.com")
"""
try:
    c = document.query["c"]
except:
    c = "1a"
c = "1b"
# 將 1b.txt 資料從 Github Pages 網頁中取下
url = "https://mde.tw/studlist/2022fall/" + c + ".txt"
# 利用 open() 開啟網頁, 利用 read() 讀取網頁內容
# 然後利用 split() 方法, 利用跳行符號對資料進行切割, 切割後的資料結構為 list
# list 資料結構以 [] 區隔, 表示資料為數列, 其起始的索引值為 0
data = open(url).read().split("\n")
# 將每一位學員的靜態網頁共同的網路連結部分設為字串, 且與 mdecp2022 變數對應
mdecp2022 = "https://mdecp2022.github.io/site-"
# 因為取下的資料第一筆為標題, 而最後一筆為空字串, 可以利用 Brython 的數列索引取值範圍將索引 0 與最後一個數列值去除
data = data[1:-1]
# 利用 for 重複迴圈逐一取出 data 數列中的值, 然後以 \t, 也就是 tab 符號切割
count = 0
for i in data:
    count += 1
    stud = i.split("\t")
    # 第一欄位為學號
    stud_num = stud[0]
    # 第二欄未為 github 帳號
    github_acc = stud[1]
    #print(stud_num, github_acc)
    # 若沒有找到 github 帳號, 以學號作為帳號
    if github_acc == "":
        github_acc = stud_num
    # 將靜態網頁共同連結的變數與各自的 github 帳號, 組成完整的各學員靜態網頁連結
    site = mdecp2022 + github_acc
    # 利用 A 物件產生連結, 然後放入 id="brython_div21 所在的網頁位置
    link = html.A(stud_num, href=site)
    brython_div2 &lt;= link
    # 每一筆資料列出後, 以 break 標註跳行
    # 每一行列出五筆資料後, 跳行
    brython_div2 &lt;= " "
    if count % 5 == 0:
        brython_div2 &lt;= html.BR()
&lt;/script&gt;

&lt;p&gt;2D 靜態繪圖&lt;/p&gt;
&lt;p id="usa_flag"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# 畫美國國旗
# 根據 https://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications 規格繪圖
# 導入 doc
from browser import document as doc
# 以下將利用 html 產生所需的繪圖畫布
from browser import html
# 利用 math 函式庫執行三角函數運算
import math
# height = 1, width = 1.9
width = 600
height = int(600/1.9)
canvas = html.CANVAS(width = width, height = height)
#canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
# 將圖畫至 id 為 brython_div 的 cnavas 標註
brython_div = doc["usa_flag"]
brython_div &lt;= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")

# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)

# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height

# 先畫滿地紅
ctx.fillStyle='#B31942'
ctx.fillRect(0,0,flag_w,flag_h)

# 6 條白色長方形
# 每條高度 height/13
ctx.fillStyle ='#FFFFFF'
white_height = int(height/13)
whitex = 0
whitey = white_height
white_width = width
for i in range(6):
    ctx.fillRect(whitex, whitey+i*2*white_height, white_width, white_height)

# 藍色區域
blue_height = int(height*7/13)
blue_width = int(width*2/5)
bluex = 0
bluey = 0
ctx.fillStyle ='#0A3161'
ctx.fillRect(bluex, bluey, blue_width, blue_height)

# 建立畫直線函式
def draw_line(x1, y1, x2, y2, color="#ff0000"):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.stroke()

# 測試畫直線函式功能
#draw_line(10, 10, 100, 100)

# 定義角度轉換為徑度變數
deg = math.pi/180.

# 建立五星繪圖函式
#x, y 為中心, r 為半徑, angle 旋轉角, solid 空心或實心, color 顏色
def star(x, y, r, angle=0, solid=False, color="#ff0000"):
    #以 x, y 為圓心, 計算五個外點
    # 圓心到水平線距離
    a = r*math.cos(72*deg)
    # a 頂點向右到內點距離
    b = (r*math.cos(72*deg)/math.cos(36*deg))*math.sin(36*deg)
    # 利用畢氏定理求內點半徑
    rin = math.sqrt(a*a + b*b)
    # 查驗 a, b 與 rin
    #print(a, b, rin)
    if solid:
        ctx.beginPath()
    # angle 角度先轉 360/10, 讓五星對正
    angle = angle + 360/10
    for i in range(5):
        xout = (x + r*math.sin((360/5)*deg*i+angle*deg))
        yout = (y + r*math.cos((360/5)*deg*i+angle*deg))
        # 外點增量 + 1
        xout2 = x + r*math.sin((360/5)*deg*(i+1)+angle*deg)
        yout2 = y + r*math.cos((360/5)*deg*(i+1)+angle*deg)
        xin = x + rin*math.sin((360/5)*deg*i+36*deg+angle*deg)
        yin = y + rin*math.cos((360/5)*deg*i+36*deg+angle*deg)
        # 查驗外點與內點座標
        #print(xout, yout, xin, yin)
        if solid:
            # 填色
            if i==0:
                ctx.moveTo(xout, yout)
                ctx.lineTo(xin, yin)
                ctx.lineTo(xout2, yout2)
            else:
                ctx.lineTo(xin, yin)
                ctx.lineTo(xout2, yout2)
        else:
            # 空心
            draw_line(xout, yout, xin, yin, color)
            # 畫空心五芒星, 無關畫線次序, 若實心則與畫線次序有關
            draw_line(xout2, yout2, xin, yin, color)
    if solid:
        ctx.fillStyle = color
        ctx.fill()

# 白色五星
white = "#FFFFFF"
# 單數排白色五星
star1x = int(blue_width/12)
star1y = int(blue_height/10)
star_radius = int(white_height*4/5/2)
# 沿 x 方向有 6 顆白色五星
# 沿 y 方向有 5 顆白色五星
inc1x = int(2*blue_width/12)
inc1y = int(2*blue_height/10)
for i in range(6):
    for j in range(5):
        star(star1x+i*inc1x, star1y+j*inc1y, star_radius, solid=True, color=white)
# 雙數排白色五星
star2x = int(blue_width/12 + blue_width/12)
star2y = int(blue_height/10 + blue_height/10)
# 沿 x 方向有 5 顆白色五星
# 沿 y 方向有 4 顆白色五星
for i in range(5):
    for j in range(4):
        star(star2x+i*inc1x, star2y+j*inc1y, star_radius, solid=True, color=white)
&lt;/script&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/CangoAxes-6v01-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;p id="spurgear"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# Spur Gear in Cango and gearUtils-09.js
from browser import document as doc
from browser import html
from browser import window
import browser.timer
import math
# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 400)
# 將 canvas 標註的 id 設為 "cango_gear"
canvas.id = "cango_gear"
# 將 document 中 id 為 "spurgear" 的標註
# 設為與 brython_div 變數對應
brython_div = doc["spurgear"]
# 將 canvas 標註放入 brython_div 所在位置
brython_div &lt;= canvas
# 將頁面中 id 為 cango_gear 的 CANVAS 設為與 canvas 對應
canvas = doc["cango_gear"]
# convert Javascript objects to Brython variables
cango = window.Cango.new
circle = window.circle.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
svgsegs = window.SVGsegs.new
# 經由 Cango 轉換成 Brython 的 cango
# 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
# 以下將要使用 gearUtils-09.js 畫出正齒輪外形
# 假設齒數為 25
num = 25
# 利用 gearUtils-09 產生單一齒輪外形資料
tooth = creategeartooth(10, num, 20)
# 在 Cango 中, 只有 SVG 才能 rotate, appendPath 或 joinPath
# 將齒輪外形轉為 SVG segment
toothSVG = svgsegs(tooth)
path1 = path(toothSVG.scale(1), {"degs": 45, "x": 100, "y": 100, "strokeColor": "#606060"})
#print(path1)
# SVG list
circle = circle(50)
#print(circle)
circleSVG = svgsegs(circle)
#print(circleSVG)
# 若將 circleSVG 轉為 Cango path, 則可以用 cgo.render()
#circlePath = path(circleSVG, {"x": 100, "y": 100, "strokeColor": "#606060"})
#cgo.render(circlePath)
# svgsegs 資料可以 joinPath 或 appendPath
# joinPath 按照頭尾順序銜接
# appendPath 則無順序銜接
# 從 toothSVG 複製出單齒 SVG 資料
one = toothSVG.dup()
# 以照齒數, 逐一複製並附加在原單齒資料中
# 第一齒的資料已經在 toothSVG 中, 因此重複迴圈從 1 開始
for i in range(1, num):
    newSVG = one.rotate(360*i/num)
    toothSVG = toothSVG.appendPath(newSVG)
# 將 SVG 轉為 path 資料
#gear = path(toothSVG, {"x": 150, "y": 150, "strokeColor": "#606060"})
# path 資料可以透過 cgo.render()顯示繪圖物件
#cgo.render(gear)
# 當 circle 接外齒使用 appendPath
toothSVG = toothSVG.appendPath(circleSVG)
#print(toothSVG)
spurPath = path(toothSVG, {"x": 150, "y": 150, "strokeColor": "#606060"})
cgo.render(spurPath)
&lt;/script&gt;
&lt;p&gt;2D 動態繪圖&lt;/p&gt;
&lt;p id="tetris"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# from https://levelup.gitconnected.com/writing-tetris-in-python-2a16bddb5318
# 改為可自動執行模式
import random
# 以下為 Brython 新增
from browser import document as doc
from browser import html
import browser.timer

def intersects(game_field, x, y, game_width, game_height, game_figure_image):
    intersection = False
    for i in range(4):
        for j in range(4):
            if i * 4 + j in game_figure_image:
                if i + y &gt; game_height - 1 or \
                        j + x &gt; game_width - 1 or \
                        j + x &lt; 0 or \
                        game_field[i + y][j + x] &gt; 0:
                    intersection = True
    return intersection

def simulate(game_field, x, y, game_width, game_height, game_figure_image):
    while not intersects(game_field, x, y, game_width, game_height, game_figure_image):
        y += 1
    y -= 1

    height = game_height
    holes = 0
    filled = []
    breaks = 0
    for i in range(game_height-1, -1, -1):
        it_is_full = True
        prev_holes = holes
        for j in range(game_width):
            u = '_'
            if game_field[i][j] != 0:
                u = "x"
            for ii in range(4):
                for jj in range(4):
                    if ii * 4 + jj in game_figure_image:
                        if jj + x == j and ii + y == i:
                            u = "x"

            if u == "x" and i &lt; height:
                height = i
            if u == "x":
                filled.append((i, j))
                for k in range(i, game_height):
                    if (k, j) not in filled:
                        holes += 1
                        filled.append((k,j))
            else:
                it_is_full = False
        if it_is_full:
            breaks += 1
            holes = prev_holes

    return holes, game_height-height-breaks

def best_rotation_position(game_field, game_figure, game_width, game_height):
    best_height = game_height
    best_holes = game_height*game_width
    best_position = None
    best_rotation = None

    for rotation in range(len(game_figure.figures[game_figure.type])):
        fig = game_figure.figures[game_figure.type][rotation]
        for j in range(-3, game_width):
            if not intersects(
                    game_field,
                    j,
                    0,
                    game_width,
                    game_height,
                    fig):
                holes, height = simulate(
                    game_field,
                    j,
                    0,
                    game_width,
                    game_height,
                    fig
                )
                if best_position is None or best_holes &gt; holes or \
                    best_holes == holes and best_height &gt; height:
                    best_height = height
                    best_holes = holes
                    best_position = j
                    best_rotation = rotation
    return best_rotation, best_position

# 建立一個自動執行的函式
# step 1
'''
def run_ai():
    game.rotate()
'''
#step 2
def run_ai(game_field, game_figure, game_width, game_height):
    rotation, position = best_rotation_position(game_field, game_figure, game_width, game_height)
    if game_figure.rotation != rotation:
        game.rotate()
    elif game_figure.x &lt; position:
        game.go_side(1)
    elif game_figure.x &gt; position:
        game.go_side(-1)
    else:
        game.go_space()

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 400, height = 500, id="canvas")
brython_div = doc["tetris"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")

colors = [
    (0, 0, 0),
    (120, 37, 179),
    (100, 179, 179),
    (80, 34, 22),
    (80, 134, 22),
    (180, 34, 22),
    (180, 34, 122),
]


class Figure:
    x = 0
    y = 0

    figures = [
        [[1, 5, 9, 13], [4, 5, 6, 7]],
        [[4, 5, 9, 10], [2, 6, 5, 9]],
        [[6, 7, 9, 10], [1, 5, 6, 10]],
        [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],
        [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],
        [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],
        [[1, 2, 5, 6]],
    ]

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.type = random.randint(0, len(self.figures) - 1)
        self.color = random.randint(1, len(colors) - 1)
        self.rotation = 0

    def image(self):
        return self.figures[self.type][self.rotation]

    def rotate(self):
        self.rotation = (self.rotation + 1) % len(self.figures[self.type])


class Tetris:
    level = 2
    score = 0
    state = "start"
    field = []
    height = 0
    width = 0
    x = 100
    y = 60
    zoom = 20
    figure = None

    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.field = []
        self.score = 0
        self.state = "start"
        for i in range(height):
            new_line = []
            for j in range(width):
                # 起始時每一個都填入 0
                new_line.append(0)
            self.field.append(new_line)

    def new_figure(self):
        self.figure = Figure(3, 0)

    def intersects(self):
        intersection = False
        for i in range(4):
            for j in range(4):
                if i * 4 + j in self.figure.image():
                    # block 到達底部, 左右兩邊界, 或該座標有其他 block
                    if i + self.figure.y &gt; self.height - 1 or \
                            j + self.figure.x &gt; self.width - 1 or \
                            j + self.figure.x &lt; 0 or \
                            self.field[i + self.figure.y][j + self.figure.x] &gt; 0:
                        intersection = True
        return intersection

    def break_lines(self):
        lines = 0
        for i in range(1, self.height):
            zeros = 0
            for j in range(self.width):
                if self.field[i][j] == 0:
                    zeros += 1
            if zeros == 0:
                lines += 1
                for i1 in range(i, 1, -1):
                    for j in range(self.width):
                        self.field[i1][j] = self.field[i1 - 1][j]
        self.score += lines ** 2

    def go_space(self):
        while not self.intersects():
            self.figure.y += 1
        self.figure.y -= 1
        self.freeze()

    def go_down(self):
        self.figure.y += 1
        if self.intersects():
            self.figure.y -= 1
            self.freeze()

    def freeze(self):
        for i in range(4):
            for j in range(4):
                if i * 4 + j in self.figure.image():
                    self.field[i + self.figure.y][j + self.figure.x] = self.figure.color
        self.break_lines()
        self.new_figure()
        if self.intersects():
            self.state = "gameover"

    def go_side(self, dx):
        old_x = self.figure.x
        self.figure.x += dx
        if self.intersects():
            self.figure.x = old_x

    def rotate(self):
        old_rotation = self.figure.rotation
        self.figure.rotate()
        if self.intersects():
            self.figure.rotation = old_rotation

# Define some colors
# from https://stackoverflow.com/questions/3380726/converting-a-rgb-color-tuple-to-a-six-digit-code
BLACK = '#%02x%02x%02x' % (0, 0, 0)
WHITE = '#%02x%02x%02x' % (255, 255, 255)
GRAY = '#%02x%02x%02x' % (128, 128, 128)
RED = '#%02x%02x%02x' % (255, 0, 0)

done = False
fps = 5
game = Tetris(20, 10)
counter = 0

pressing_down = False

def key_down(eve):
    key = eve.keyCode
    #if event.type == pygame.QUIT:
    # 32 is pause
    if key == 32:
        done = True
    # 82 is r key to rotate
    if key == 82:
        game.rotate()
    # 40 is down key
    if key == 40:
        pressing_down = True
    # 37 is left key
    if key == 37:
        game.go_side(-1)
    # 39 is right key
    if key == 39:
        game.go_side(1)
    # 68 is d key to move block to bottom
    if key == 68:
        game.go_space()
    # 27 is escape
    # reset the game
    if key == 27:
        # clear the previous score
        ctx.fillStyle = WHITE
        ctx.fillRect( 100, 0, 200, 50)
        game.__init__(20, 10)

def key_up(eve):
    key = eve.keyCode
    # 40 is down key
    if key == 40:
        pressing_down = False

#while not done:
def do_game():
    global counter
    if game.figure is None:
        game.new_figure()
    counter += 1
    if counter &gt; 100000:
        counter = 0
    if counter % (fps // game.level // 2) == 0 or pressing_down:
        if game.state == "start":
            game.go_down()
            run_ai(game.field, game.figure, game.width, game.height)

    for i in range(game.height):
        for j in range(game.width):
            ctx.fillStyle = WHITE
            #ctx.scale(game.zoom, game.zoom)
            ctx.fillRect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)
            if game.field[i][j] &gt; 0:
                ctx.fillStyle = '#%02x%02x%02x' % colors[game.field[i][j]]
                ctx.fillRect(game.x + game.zoom * j + 1, game.y + game.zoom * i + 1, game.zoom - 2, game.zoom - 1)
            ctx.lineWidth = 1
            ctx.strokeStyle = GRAY
            ctx.beginPath()
            ctx.rect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)
            ctx.stroke()
    if game.figure is not None:
        for i in range(4):
            for j in range(4):
                p = i * 4 + j
                if p in game.figure.image():
                    ctx.fillStyle = '#%02x%02x%02x' % colors[game.figure.color]
                    ctx.fillRect(game.x + game.zoom * (j + game.figure.x) + 1,
                                      game.y + game.zoom * (i + game.figure.y) + 1,
                                      game.zoom - 2, game.zoom - 2)

# score and Game Over scripts from https://s40723245.github.io/wcm2022
    # 宣告文字的大小為36px
    ctx.font = '36px serif'
    # 宣告文字顏色為黑色
    ctx.fillStyle = BLACK
    # 將分數顯示在遊戲區上方, 座標為(10, 50), 並設定變數為text
    ctx.fillText('Score:'+ str(game.score), 10,50)

    # 宣告變數int = 1 ，如果分數大於int，則畫布清掉原本的分數填上新的得分分數
    int = 1
    if game.score &gt;= int:
        ctx.fillStyle = WHITE
        ctx.fillRect( 100, 0, 200, 50)
        ctx.fillStyle = BLACK
        ctx.fillText(str(game.score), 108,50)

    # 如果遊戲狀態為gameover，顯示Game Over及Press ESC，並將文字設定為紅色
    if game.state == "gameover":
        ctx.fillStyle = RED
        ctx.fillText("Game Over", 100, 200)
        ctx.fillText("Press ESC", 105, 265)
        ctx.fillStyle = WHITE
        ctx.fillRect( 100, 0, 200, 50)
        game.__init__(20, 10)

doc.addEventListener("keydown", key_down)
doc.addEventListener("keyup", key_up)
browser.timer.set_interval(do_game, fps)
&lt;/script&gt;
&lt;p&gt;2D 機構模擬&lt;/p&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;

&lt;p id="fourbar"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# make canvas 600x400
from browser import document as doc
from browser import window
from browser import timer
from browser import html
import math

# 建立 fourbar canvas
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "fourbar1"
brython_div = doc["fourbar"]
brython_div &lt;= canvas
# 準備繪圖畫布
canvas = doc["fourbar1"]

# 建立 buttons
brython_div &lt;= html.BUTTON("啟動", id="power")
brython_div &lt;= html.BUTTON("反向", id="reverse")

# 利用 window 擷取 PrairieDraw 程式庫變數物件, 然後以 JSConstructor 函式轉為 Brython 變數
pdraw = window.PrairieDraw.new
# 利用 window 擷取 PrairieDrawAnim 程式庫變數物件, 然後以 JSConstructor 函式轉為 Brython 變數
PrairieDrawAnim = window.PrairieDrawAnim.new

# 利用 window 擷取 sylvester 程式庫變數物件 Vector, 並將其 create 方法直接轉為 Brython 變數
# 在 sylvester 中的 $V 簡化變數無法直接在 Brython 程式中引用
vector = window.Vector.create.new

# 在 "fourbar" 畫布中建立 panim 動態模擬案例
panim = PrairieDrawAnim("fourbar1")

# 平面連桿繪圖以 t = 0 起始
t = 0
# 控制轉動方向變數
direction = True

# 繪製不同 t 時間下的平面連桿
def draw():
    global t, direction, fast
    # 設定模擬繪圖範圍
    panim.setUnits(6, 6)
    # 設定箭頭線寬
    panim.setProp("arrowLineWidthPx",2)

    # 起始變數設定
    omega = 1
    length_bar1 = 1
    length_bar2 = 26/18
    length_bar3 = 2
    length_base = 40/18
    time = 0

    # 畫出地面直線
    G = vector([0, -0.5])
    panim.ground(G, vector([0, 1]), 10)

    # 連桿長度與角度計算
    A = t*omega # "theta"
    AD = length_bar1 #length of left bar
    AB = length_base #distance between two stationary pivots
    BC = length_bar3 #length of right bar
    CD = length_bar2 #length of middle bar
    BD = math.sqrt(AD*AD + AB*AB - 2*AD*AB*math.cos(A))
    C = math.acos((BC*BC + CD*CD - BD*BD)/(2*BC*CD))
    ABD = math.asin(CD * math.sin(C) / BD)
    DBC = math.asin(AD * math.sin(A) / BD)
    B = ABD + DBC
    D = math.pi - B - C

    # draw pivot
    pivot_left = vector([AB/-2, 0])
    pivot_right = vector([AB/2, 0])
    panim.pivot(vector([pivot_left.e(1), -0.5]), pivot_left, 0.5)
    panim.pivot(vector([pivot_right.e(1), -0.5]), pivot_right, 0.5)

    # 儲存轉換矩陣
    panim.save()
    #FIRST BAR
    panim.translate(pivot_left)
    panim.rotate(A)
    panim.rod(vector([0,0]), vector([AD,0]), 0.25)
    panim.point(vector([0,0]))

    #SECOND BAR
    panim.translate(vector([AD,0]))
    panim.rotate(A*-1)  #"undo" the original A rotation
    panim.rotate(D)     #rotate by D only
    panim.rod(vector([0,0]), vector([CD,0]), 0.25)
    panim.point(vector([0,0]))

    #THIRD BAR
    panim.translate(vector([CD,0]))
    panim.rotate(math.pi+C)
    panim.rod(vector([0,0]), vector([BC,0]), 0.25)
    panim.point(vector([0,0]))
    # 回復原先的轉換矩陣
    panim.restore()

    panim.point(vector([pivot_right.e(1), 0]))
    # 時間增量
    if direction == True:
        t += 0.08
    else:
        t += -0.08

# 先畫出 t = 0 的連桿機構
draw()

# 將 anim 設為 None
anim = None

def launchAnimation(ev):
    global anim
    # 初始啟動, anim 為 None
    if anim is None:
        # 每 0.08 秒執行一次 draw 函式繪圖
        anim = timer.set_interval(draw, 80)
        # 初始啟動後, 按鈕文字轉為"暫停"
        doc['power'].text = '暫停'
    elif anim == 'hold':
        # 當 anim 為 'hold' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"
        anim = timer.set_interval(draw, 80)
        doc['power'].text = '暫停'
    else:
        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停
        # 且將 anim 變數設為 'hold', 且 power 文字轉為"繼續"
        timer.clear_interval(anim)
        anim = 'hold'
        doc['power'].text = '繼續'

def reverse(ev):
    global anim, direction
    # 當 anim 為 hold 時, 按鈕無效
    if anim != "hold":
        if direction == True:
            direction = False
        else:
            direction = True

doc["power"].bind("click", launchAnimation)
doc["reverse"].bind("click", reverse)
&lt;/script&gt;

&lt;h2&gt;電腦輔助設計與實習課程核心&lt;/h2&gt;
&lt;p&gt;CAD 課程的重點是利用電腦輔助設計套件進行產品設計, 而 KMOLab 所使用的套件包含 Siemens NX, Solvespace 與 Onshape, 機電模擬系統則採用 CoppeliaSim.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EclS-NMhqJ9JvCa-pIQ_jMsBOLhmGLdxH5xv7JH8CHQMug?e=SMFg8L"&gt;下載 NX2027 lite 可攜版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/solvespace/solvespace/releases/download/v3.1/solvespace.exe"&gt;下載 Solvespace 3.1 版 for Windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EWdB5MhlZRJKjt5UiNRebR8BXb3xB2g0Bbg0JZHSNqpmLA?e=h5cEIV"&gt;下載 CoppeliaSim 4.3.0 rev12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://www.onshape.com/en/education/"&gt;Onshape&lt;/a&gt; 建立教育版帳號.&lt;/p&gt;
&lt;p&gt;因為電腦輔助設計與實習課程承接先前以 Brython 及 Python 為核心的計算機程式課程, 因此透過 &lt;a href="https://pypi.org/project/python-solvespace/"&gt;python-solvespace&lt;/a&gt; 可以解 2D 設計約束條件, &lt;a href="https://mde.tw/content/Python%20for%20NX.html"&gt;Python for NX&lt;/a&gt; 可以利用 &lt;a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html"&gt;NXOpen 中的 Python API&lt;/a&gt; 處理零組件設計, 利用 &lt;a href="https://github.com/onshape-public/onshape-clients"&gt;Onshape-clients&lt;/a&gt; 也能與 &lt;a href="https://www.onshape.com/en/education/"&gt;Onshape&lt;/a&gt; 零組件進行延伸互動. 當零組件設計繪圖完成後轉入 CoppeliaSim, 則可以利用 &lt;a href="https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm"&gt;Python remote API&lt;/a&gt; 執行控制系統設計. 最終將完成的零組件設計與前述網站結合則除了透過 &lt;a href="https://github.com/CoppeliaRobotics/threejsFrontend"&gt;threejsFrontend&lt;/a&gt; 外, 也可自行利用 &lt;a href="https://github.com/mdecycu/pyweb3d"&gt;Pyweb3d&lt;/a&gt; 完成.&lt;/p&gt;
&lt;p&gt;以下為電腦輔助設計與實習課程 2a 修課學員的個人倉儲靜態網頁連結:&lt;/p&gt;
&lt;p id="brython_div3"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

# 利用 document 物件, 以索引 "brython_div3" 取得已經位於 html 網頁中 id="brython_div3" 的位置, 且對應到 brython_div2 變數
brython_div2 = document["brython_div3"]
# 可以用三個單引號或三個雙引號標註多行註解
# 其中的 html 物件有許多建立 html 超文件內容的方法, 以下分別建立
# BUTTON 按鈕, BR 跳行 (break), 以及 A 網站連結 (Anchor)
# &lt;= 是 Brython 程式語言的特殊符號, 專用於將 html 超文件資料送給網頁對應變數
"""
brython_div2 &lt;= html.BUTTON("hello")
brython_div2 &lt;= html.BR()
brython_div2 &lt;= html.A("google", href="https://google.com")
"""
try:
    c = document.query["c"]
except:
    c = "1a"
c = "2a"
# 將 1b.txt 資料從 Github Pages 網頁中取下
url = "https://mde.tw/studlist/2022fall/" + c + ".txt"
# 利用 open() 開啟網頁, 利用 read() 讀取網頁內容
# 然後利用 split() 方法, 利用跳行符號對資料進行切割, 切割後的資料結構為 list
# list 資料結構以 [] 區隔, 表示資料為數列, 其起始的索引值為 0
data = open(url).read().split("\n")
# 將每一位學員的靜態網頁共同的網路連結部分設為字串, 且與 mdecp2022 變數對應
mdecp2022 = "https://mdecp2022.github.io/site-"
# 因為取下的資料第一筆為標題, 而最後一筆為空字串, 可以利用 Brython 的數列索引取值範圍將索引 0 與最後一個數列值去除
data = data[1:-1]
# 利用 for 重複迴圈逐一取出 data 數列中的值, 然後以 \t, 也就是 tab 符號切割
count = 0
for i in data:
    count += 1
    stud = i.split("\t")
    # 第一欄位為學號
    stud_num = stud[0]
    # 第二欄未為 github 帳號
    github_acc = stud[1]
    #print(stud_num, github_acc)
    # 若沒有找到 github 帳號, 以學號作為帳號
    if github_acc == "":
        github_acc = stud_num
    # 將靜態網頁共同連結的變數與各自的 github 帳號, 組成完整的各學員靜態網頁連結
    site = mdecp2022 + github_acc
    # 利用 A 物件產生連結, 然後放入 id="brython_div21 所在的網頁位置
    link = html.A(stud_num, href=site)
    brython_div2 &lt;= link
    # 每一筆資料列出後, 以 break 標註跳行
    # 每一行列出五筆資料後, 跳行
    brython_div2 &lt;= " "
    if count % 5 == 0:
        brython_div2 &lt;= html.BR()
&lt;/script&gt;

&lt;p&gt;以下為電腦輔助設計與實習課程 2b 修課學員的個人倉儲靜態網頁連結:&lt;/p&gt;
&lt;p id="brython_div4"&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

# 利用 document 物件, 以索引 "brython_div4" 取得已經位於 html 網頁中 id="brython_div4" 的位置, 且對應到 brython_div2 變數
brython_div2 = document["brython_div4"]
# 可以用三個單引號或三個雙引號標註多行註解
# 其中的 html 物件有許多建立 html 超文件內容的方法, 以下分別建立
# BUTTON 按鈕, BR 跳行 (break), 以及 A 網站連結 (Anchor)
# &lt;= 是 Brython 程式語言的特殊符號, 專用於將 html 超文件資料送給網頁對應變數
"""
brython_div2 &lt;= html.BUTTON("hello")
brython_div2 &lt;= html.BR()
brython_div2 &lt;= html.A("google", href="https://google.com")
"""
try:
    c = document.query["c"]
except:
    c = "1a"
c = "2b"
# 將 1b.txt 資料從 Github Pages 網頁中取下
url = "https://mde.tw/studlist/2022fall/" + c + ".txt"
# 利用 open() 開啟網頁, 利用 read() 讀取網頁內容
# 然後利用 split() 方法, 利用跳行符號對資料進行切割, 切割後的資料結構為 list
# list 資料結構以 [] 區隔, 表示資料為數列, 其起始的索引值為 0
data = open(url).read().split("\n")
# 將每一位學員的靜態網頁共同的網路連結部分設為字串, 且與 mdecp2022 變數對應
mdecp2022 = "https://mdecp2022.github.io/site-"
# 因為取下的資料第一筆為標題, 而最後一筆為空字串, 可以利用 Brython 的數列索引取值範圍將索引 0 與最後一個數列值去除
data = data[1:-1]
# 利用 for 重複迴圈逐一取出 data 數列中的值, 然後以 \t, 也就是 tab 符號切割
count = 0
for i in data:
    count += 1
    stud = i.split("\t")
    # 第一欄位為學號
    stud_num = stud[0]
    # 第二欄未為 github 帳號
    github_acc = stud[1]
    #print(stud_num, github_acc)
    # 若沒有找到 github 帳號, 以學號作為帳號
    if github_acc == "":
        github_acc = stud_num
    # 將靜態網頁共同連結的變數與各自的 github 帳號, 組成完整的各學員靜態網頁連結
    site = mdecp2022 + github_acc
    # 利用 A 物件產生連結, 然後放入 id="brython_div21 所在的網頁位置
    link = html.A(stud_num, href=site)
    brython_div2 &lt;= link
    # 每一筆資料列出後, 以 break 標註跳行
    # 每一行列出五筆資料後, 跳行
    brython_div2 &lt;= " "
    if count % 5 == 0:
        brython_div2 &lt;= html.BR()
&lt;/script&gt;

&lt;h1&gt;cmsimde&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde"&gt;cmsimde&lt;/a&gt; 是一套利用 Python 與 Flask 建立的網際內容管理系統. 利用 &lt;a href="https://github.com/mdecycu/cmsimde"&gt;cmsimde&lt;/a&gt; 與 Github Classroom 配置使用者網站的複雜度, 其中大部分來自電腦輔助設計室的網路環境與自架伺服器都只部署在純 &lt;a href="https://en.wikipedia.org/wiki/IPv6"&gt;IPv6&lt;/a&gt; 的網路環境中. 其實 &lt;a href="https://en.wikipedia.org/wiki/IPv6"&gt;IPv6&lt;/a&gt; 網路協定早在 1995 年便已推出, 但台灣至今的 &lt;a href="https://en.wikipedia.org/wiki/IPv6"&gt;IPv6&lt;/a&gt; 的&lt;a href="https://ipv6now.twnic.tw/ipv6/index.html"&gt;網路部署&lt;/a&gt;也僅達到將近 50%. 就連 github.com 截至目前的 git clone 與 git push 都還僅支援 IPv4. 因此在僅有 IPv4 的網路環境下, 或僅有 IPv6 的電腦輔助設計室與自架伺服器的各別協定使用, 都必須選擇性設定雙網路協定的代理主機.&lt;/p&gt;
&lt;p&gt;上課時段將電腦輔助設計室直接連結到系主幹的目的, 是為了取得最大對外連線頻寬, 且避開許多錯誤設定的 IPv4 伺服器所造成的網路封包阻絕效應. 但其結果就是必須在純 IPv6 的網路環境中工作, 而當學員回到宿舍或其他網路連線條件下, 又幾乎都在 IPv4 的網路協定下工作, 為因應這兩種互不相容的網路環境, 最佳的設定就是使用兩套可攜的隨身系統, 分別在不同網路協定下運用. &lt;/p&gt;
&lt;p&gt;道理雖然簡單, 但由於其他課程並未觸及 IPv6, 且即便在中華電信的網路連線下, 也並非全時提供 IPv6 網路環境, 因此造成許多初學者使用 cmsimde 網站與 Github 倉儲上的諸多困難.&lt;/p&gt;
&lt;p&gt;要克服網路與電腦使用上的諸多問題, 唯一的方法就是先了解基本原理, 然後再逐步依照教學流程設定後, 仔細比對網路連線原理, 多多針對不同使用情境加以調適練習就可逐步熟悉各種設定細節.&lt;/p&gt;
&lt;p&gt;使用 &lt;a href="https://github.com/mdecycu/cmsimde"&gt;cmsimde&lt;/a&gt; 建立網站的另外一項瓶頸也來自子模組的使用, 最早將 &lt;a href="https://github.com/mdecycu/cmsimde"&gt;cmsimde&lt;/a&gt; 用於 Github 倉儲與網站設定的背景是, 各使用者可以在既有 &lt;a href="https://github.com/mdecycu/cmsimde"&gt;cmsimde&lt;/a&gt; 子模組的架構下, 透過 user.py 採 &lt;a href="https://flask.palletsprojects.com/en/2.2.x/blueprints/"&gt;Blueprints&lt;/a&gt; 延伸各種網際內容管理或電腦輔助設計前後端流程的功能. 但隨著 Github Classroom、 MS Teams 與多種 CAD 套件的導入, 延伸程式的編寫門檻越堆越高, 這幾年的課程即便推展至 KMOLab 的協同產品設計課程, 進度也難以觸及 user.py 的範圍.&lt;/p&gt;
&lt;p&gt;尤其最近幾年的手機軟硬體功能已經足以與電腦並駕齊驅, 將手機與平板的應用導入課程已經是必然的趨勢, 因此接下來必須進一步思考是否重新架構 cmsimde 與學員個人倉儲及網站的配置, 刪除子模組的配置, 直接以 cmsimde 目錄導入, 如此至少可以免除 ssh 與 https 網路協定的雙重設定, 以降低配置上的複雜度.&lt;/p&gt;
&lt;h1&gt;stud.cycu.org&lt;/h1&gt;
&lt;p&gt;2022 Fall 由於 Heroku 取消免費帳號的使用, 且 Replit 的免費帳號資源過少, 導致在廣域網路上必須自行配置所有學員的動態網站伺服器, 也就是 stud.cycu.org 主機的啟用與配置.&lt;/p&gt;
&lt;p&gt;為了讓兩百多名學員能在同一台伺服器上執行動態網站, 各學員必須遠端登入伺服器使用 shell script 指令, 並以 Filezilla 的 sftp 降低學員對 Linux 指令不熟悉所造成的檔案編輯與配置問題. 其中用來查核個人是否啟動 python3 server.py 的 ps 指令為 ps axo pid,comm,user | grep "server.py" 只是 Quota 與 port 使用權限的配置仍需進一步思考最佳管理模式.&lt;/p&gt;
&lt;h1&gt;TCExam&lt;/h1&gt;
&lt;p&gt;2022 Fall 重啟線上考試後, 重新啟用 TCExam, 目前正朝讓各學員自行出複選題目建立題庫的可行性.&lt;/p&gt;</content><category term="cad2022"></category><category term="w6"></category><category term="cad2022"></category><category term="cp2022"></category></entry><entry><title>2022 Fall w7</title><link href="https://mde.tw/blog/2022_fall_cad2022_w7.html" rel="alternate"></link><published>2022-10-22T11:00:00+08:00</published><updated>2022-10-29T21:58:38+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-10-22:/blog/2022_fall_cad2022_w7.html</id><summary type="html">&lt;p&gt;2022 Fall 課程進入第七週, 隨著一台 HP 大主機的硬碟毀損, 原本的課程教學流程必須隨之改變.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2022 Fall 課程進入第七週, 隨著一台 HP 大主機的硬碟毀損, 原本的課程教學流程必須隨之改變.&lt;/p&gt;


&lt;h2&gt;代理主機升級&lt;/h2&gt;
&lt;p&gt;進入代號 4 的主機, 希望將 LTS 20.04 升級為 22.04, 其生命週期可以橫跨 2026.02, 因為 EOL 為 2027.04.&lt;/p&gt;
&lt;p&gt;步驟如下:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt update
sudo apt upgrade
sudo apt autoremove
sudo reboot
lbs_release -a 
sudo do-release-upgrade
&lt;/pre&gt;

&lt;p&gt;由於代號 4 的主機允許外部電腦連接用的代理任務, 因此更新之前, 先將系統備份後進行.&lt;/p&gt;
&lt;p&gt;代號 4 的代理主機透過 &lt;a href="https://wiki.squid-cache.org/SquidFaq/SquidAcl?action=fullsearch&amp;amp;value=dstdomain"&gt;dstdomain&lt;/a&gt;, 將 cycu.org 的連線納入.&lt;/p&gt;
&lt;h2&gt;DNS 伺服器&lt;/h2&gt;
&lt;p&gt;目前 代號 3 為  mde DNS, 代號 2 為 mde 備份 DNS, 代號 6 為 eng DNS, 代號 7 則為 eng 備份 DNS.&lt;/p&gt;
&lt;p&gt;之前 2 and 3 已經升級為 22.04, 但 6 目前仍為 20.04.&lt;/p&gt;</content><category term="cad2022"></category><category term="w6"></category><category term="cad2022"></category><category term="cp2022"></category></entry><entry><title>2022 Fall w6</title><link href="https://mde.tw/blog/2022_fall_cad2022_w6.html" rel="alternate"></link><published>2022-10-12T11:00:00+08:00</published><updated>2022-10-12T23:44:41+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-10-12:/blog/2022_fall_cad2022_w6.html</id><summary type="html">&lt;p&gt;2022 Fall 課程進入第六週, 原本只在近端運作的個人倉儲動態網頁, 這學期可以利用 Replit 與自建的 Ubuntu 伺服器執行, 只是學員必須適應在不同平台上執行程式的挑戰.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2022 Fall 課程進入第六週, 原本只在近端運作的個人倉儲動態網頁, 這學期可以利用 Replit 與自建的 Ubuntu 伺服器執行, 只是學員必須適應在不同平台上執行程式的挑戰.&lt;/p&gt;


&lt;h1&gt;使用雲端免費資源教學&lt;/h1&gt;
&lt;p&gt;一直以來的課程教學都希望採用與業界相同的工具及系統, 其中包括 Github, Gmail, Microsoft 365 等工具, 還好這些工具都提供免費帳號註冊, 而且提供的權限與資源都能符合教學需求.&lt;/p&gt;
&lt;p&gt;但若希望使用業界的 Application Server, 因為耗費的資源較多, 當 Heroku 在 2022 年宣布不再提供免費資源後, 雖然轉向 Replit, 但是由於免費帳號的 Replit 所提供的 CPU 運算時間與記憶體並非如 Heroku 優渥, 因此只能作為測試使用.&lt;/p&gt;
&lt;p&gt;解決之道就是自行架構 Server, 讓所有學員能夠執行網際程式, 然後再設法與 Github 倉儲保持同步, 如此就能補足 Heroku 無免費帳號使用, 而 Replit 免費帳號不敷使用的問題.&lt;/p&gt;
&lt;h1&gt;疫情下的教學&lt;/h1&gt;
&lt;p&gt;這個月是台灣對外全面解封的時間點, 在更早之前, 已經有不少學員因疫情無法實體上課, 因此自 w3 開始, 即便在電腦輔助設計室實體上課, 但採用的模式與 remote 上課相同, 即時上課之外, 也將每一堂課的教學影片存檔, 以方便學員在任何地方同步或非同步上課.&lt;/p&gt;
&lt;p&gt;另外與前幾年不同的教學方式, 是又重啟 TCExam 作為課程線上考試的系統, 這個系統應該比任何能夠買到的封閉源系統都更有彈性, 唯一的限制就是尚無 OAuth2 登入系統, 而且因為原始開發者已經不再積極維護原始碼, 所以必須自行讓老舊的 PHP 程式與資料庫連結系統, 在最新的系統中執行.&lt;/p&gt;
&lt;p&gt;至於先前一直使用的 Ethercalc, 在配置的舊電腦無法開啟後, 已經無法在最新的 node.js 中運行, 目前只能暫時棄用, 因為開發者在忙著成立數位發展部, 應該沒有時間關心這項議題. 之後若有時間再設法修改處理.&lt;/p&gt;
&lt;h1&gt;cp2022&lt;/h1&gt;
&lt;p&gt;2022 的計算機程式仍從 Brython 教起, 配合 Javascript 與 html, 希望使用者能夠透過 Canvas 與 WebGL, 了解 Web based 前端程式如何進行 2D 與 3D 系統的模擬, 2D 的部分先前已經做過貪食蛇與俄羅斯方塊遊戲, 而 3D 的部分則必須使用 three.js 程式庫, 主要目的是希望能夠用來解析機械零組件的 STL 檔案, 其中牽涉 ASCII 格式與 Binary 格式檔案的讀取與 WebGL 展示.&lt;/p&gt;
&lt;p&gt;而銜接 Brython 前端程式的後端 Server 程式, 仍希望採 Python + Flask 的架構進行, 其間的變數傳送將透過 WebSocket 進行. 且儘可能透過 cmsimde 架構下的 Blueprint 進行延伸.&lt;/p&gt;
&lt;p&gt;之後, 假如學員能在 Brython 與 Python 的前後端程式架構下, 再進行延伸, 則可以透過 C 編寫程式庫, 或將 Server 端的 Python 轉為 Cython, 或者可以轉進 Rust 程式語言的全新領域.&lt;/p&gt;
&lt;h1&gt;cad2022&lt;/h1&gt;
&lt;p&gt;與先前的課程相同, 採用的 MCAD 分別為可自行編譯的 Solvespace, 雲端的 Onshape 與高階的 Siemens NX, 假如設計的機構零件外型是在初始設計階段, Solvespace 即可勝任參數式零組件繪圖與設計分析的工作. 比較可惜的是, 目前 Solvespace 尚不支援直接利用程式建構零組件, 使用者倒是可以透過程式建立零件的草圖, 然後匯入 Solvespace 後, 再長出 3D 外形. 至於 Onshape, 雖然使用者可以直接利用瀏覽器、平板或手機建立零組件, 但其能讓一般使用者進行零件 API 的部分, 僅限 Featurescript, 後端的 API 還需要申請授權碼才能進行.&lt;/p&gt;
&lt;p&gt;Siemens NX 一直以來都是包含 CAD/E/M 的大套工具, 其中最值得與 cp2022 計算機程式結合應用的部分是其 NXOpen 支援 Python 延伸程式的架構, 使用者可以在一台 Windows 操作系統上安裝 Siemens NX2027, 然後利用 NXOpen Python 編寫延伸程式, 透過 run_journal.bat 執行, 並且透過 Flask 與 WebSocket 從網際前端傳送設計變數, 然後在 Server 端結合 NX 運算後, 將前端設計所需尺寸或架構的產品零組件檔案, 讓使用者下載.&lt;/p&gt;
&lt;p&gt;在結合 Python 與 NX 的過程中, 可以再設法直接從產品組立件所轉出的 STL 零件, 透過 API 程式組成 CoppeliaSim 系統模擬所需的檔案格式, 以便接續進行零組件的控制系統設計與模擬流程.　&lt;/p&gt;
&lt;p&gt;此外, cad2022 希望能將先前建構的手足球系統, 套用到 CoppeliaSim 的 Visualization Stream 功能上, 讓位於不同電腦的使用者可以透過不同埠號對同一個手足球場景進行控制, 可進行的模式分為 human vs human, human vs computer, 以及 computer vs computer 的對陣模式.&lt;/p&gt;</content><category term="cad2022"></category><category term="w6"></category><category term="cad2022"></category><category term="cp2022"></category></entry><entry><title>2022 Fall w4-w5</title><link href="https://mde.tw/blog/2022_fall_cad2022_w5.html" rel="alternate"></link><published>2022-10-04T11:00:00+08:00</published><updated>2022-10-12T16:08:17+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-10-04:/blog/2022_fall_cad2022_w5.html</id><summary type="html">&lt;p&gt;2022 Fall w4 繼續說明網路設定與個人網頁維護. 2022 Fall w5, 為每位學員在 stud.cycu.org 建立帳號.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2022 Fall w4 繼續說明網路設定與個人網頁維護. 2022 Fall w5, 為每位學員在 stud.cycu.org 建立帳號.&lt;/p&gt;


&lt;h1&gt;建立帳號指令檔案&lt;/h1&gt;
&lt;p&gt;自 w4 起, 利用一台 Ubuntu 虛擬主機建立各學員帳號, 並且利用雙埠號派送方式 (內部為 9xxxx, 外部為 8xxxx), 讓各學員得以利用 https://stud.cycu.org 符號名稱執行個人倉儲中的動態網頁, 如同 Replit 上的雲端系統, 使用者可以將此動態網站內容與個人 Github 倉儲中的靜態網頁同步.&lt;/p&gt;
&lt;p&gt;各學員擁有動態網頁與靜態網頁的目的, 在能透過伺服器上的 Python 程式與靜態網頁上的 Brython 前端程式進行互動, 將之後進行電腦輔助設計與實習過程中的歷程整理在網頁上外, 還能透過 NX2027 NXOpen 與 CoppeliaSim Remote API 程式編寫各種電腦輔助設計延伸程式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
with open("2022_fall_ubuntu_account_pass.txt") as f:
    data = f.readlines()
# newusers format:  
# pw_name:pw_passwd:pw_uid:pw_gid:pw_gecos:pw_dir:pw_shell
# uid starts from 1002
uid_starts = 1001
users = ""
send = ""

for i in data:
    #stud_num \t account \t password \n
    stud = i.split("\t")
    stud_num = stud[0]
    account = stud[1]
    password = stud[2].rstrip()
    uid_starts += 1
    uid = str(uid_starts)
    gid = uid
    gecos = account
    home_dir = "/home/" + account
    shell = "/bin/bash"
    #print(stud_num, account, password)
    users += account + ":" + password + ":" + uid + ":" + gid + ":" + gecos + ":" + home_dir + ":" + shell + "\n"
    send += stud_num + ":" + account + ":" + password + "\n"

with open("users.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(users)

with open("send.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(send)
&lt;/pre&gt;

&lt;h1&gt;帳號派送&lt;/h1&gt;
&lt;p&gt;從 @nfu 電子郵箱中可以收到各學員在 stud.cycu.org 伺服器中的登入帳號與密碼. 在 Windows cmd 命令提示字元視窗中, 可以利用:&lt;/p&gt;
&lt;p&gt;ssh 帳號@stud.cycu.org 登入伺服器. &lt;/p&gt;
&lt;p&gt;進入後, 必須先設定 git 指令的代理主機:&lt;/p&gt;
&lt;p&gt;git config --global http.proxy "http://p42.cycu.org:3128"&lt;/p&gt;
&lt;p&gt;完成後, 就可以利用 git clone --recurse-submodules https://github.com/mdecad2022/site-Github_帳號.git 取下倉儲內容.&lt;/p&gt;
&lt;p&gt;以 cd site-Github_帳號, 可以進入倉儲根目錄, 然後設法利用 vi 建立 server.py 或者在 Windows 環境建立後, 以 sftp 送至倉儲根目錄.&lt;/p&gt;
&lt;p&gt;server.py 的內容如下:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from waitress import serve
from cmsimde import flaskapp
# 9xxxx is for localhost internal connect port
# 8xxxx is for Stunnel accept port
serve(flaskapp.app, listen='127.0.0.1:您所分配的_127.0.0.1_埠號', threads=4)
&lt;/pre&gt;

&lt;p&gt;然後在倉儲根目錄, 執行 python3 server.py, 就可以在 https://stud.cycu.org:您所分配的_stud.cycu.org_埠號 擷取到倉儲的動態網站, 以 config 修改管理者密碼後, 即可對此動態網站進行改版, 改版後轉靜態網站資料後, 就可以在 Ubuntu 上先利用 Token 將倉儲改版資料以 acp script 傳至 Github:&lt;/p&gt;
&lt;p&gt;source acp "提交字串" for linux and Max&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
#! /bin/bash
# bash script for Linux and Mac
# chmod u+x acp
# source acp "commit message"
git add .
git commit -m "$1"
git push
&lt;/pre&gt;

&lt;p&gt;cms for linux and Mac&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
#! /bin/bash
# for Linux and Mac
# chmod u+x cms
# source cms
python3 cmsimde/wsgi.py
&lt;/pre&gt;

&lt;p&gt;利用 chmod u+x acp 讓 acp 可以執行. 之後要執行 acp: source acp "提交字串"&lt;/p&gt;
&lt;h1&gt;Ubuntu SSH&lt;/h1&gt;
&lt;p&gt;以 ssh-keygen 建立 private and public keys, 存放於 .ssh 目錄下, 以 sftp 取下 id_rsa.pub 放入 Github 後, 就可以利用 SSH 對 Github 倉儲改版.&lt;/p&gt;
&lt;p&gt;.ssh/config 設定 Proxy:&lt;/p&gt;
&lt;p&gt;設定之前管理者必須先安裝 ncat: sudo apt install ncat&lt;/p&gt;
&lt;p&gt;Host 等同為 Putty SSH 設定中的 sesstion 名稱.&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
Host github.com
User git
Hostname github.com
ProxyCommand /usr/bin/ncat --proxy p42.cycu.org:3128 --proxy-type http %h %p
&lt;/pre&gt;

&lt;p&gt;若採用上述設定, 則以 scrum-1 github 帳號用戶為例, 使用 SSH 協定 git clone 個人位於 mdecad2022 帳號下的 site-scrum-1 倉儲指令為: git clone --recurse-submodules git@github.com:mdecp2022/site-scrum-1.git, 若將 .ssh/config 檔案, 且 git clone 後倉儲中的 .git/config url 為: git@github.com:mdecp2022/site-scrum-1.git&lt;/p&gt;
&lt;p&gt;若 .ssh/config 中的 Host 設為 scrum1, 則 git clone 的指令將成為: git clone --recurse-submodules git@scrum1:mdecp2022/site-scrum-1.git, 而 git clone 後倉儲中的 .git/config url 為: git@scrum1:mdecp2022/site-scrum-1.git&lt;/p&gt;
&lt;p&gt;參考: 
1. &lt;a href="https://blog.jaycetyle.com/2018/02/github-ssh/"&gt;Ubuntu ssh&lt;/a&gt;
2. &lt;a href="https://gist.github.com/Kuri-su/3ca9baf53bc648950956f77381558e96"&gt;ssh proxy&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;埠號分配&lt;/h1&gt;
&lt;p&gt;stud.cycu.org 伺服器中, 已經按照 &lt;a href="https://nfuedu-my.sharepoint.com/:x:/g/personal/yen_nfu_edu_tw/ET-JZNPkNtZDhFiLt8BGZZ4BFMVV1HE73WQt1V44y6vnCQ"&gt;port table&lt;/a&gt; 對每位學員所能使用的 127.0.0.1 與 stud.cycu.org 埠號進行分配.&lt;/p&gt;
&lt;p&gt;stunnel 服務重新啟動: sudo /etc/init.d/stunnel4 restart&lt;/p&gt;
&lt;p&gt;以系統服務設定 stunnel4:&lt;/p&gt;
&lt;p&gt;sudo systemctl enable stunnel4.service&lt;/p&gt;
&lt;h1&gt;cp2022 w4 教學影片&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/ES1-38kuxkJAljgH5b3emekBh98XhKtfFQg5aV3UMV9Uxg?e=DcMauY"&gt;cadlab 網路設定, 取下個人倉儲, 計算機程式學習順序&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/EbYnIyghKsdDsoT3NLhIFCMBPCula56YbNfkIBDZ2LLHWA?e=ENKNcb"&gt;在 Replit 執行動態網頁, 並與 Github 倉儲內容同步&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/EUdzT3TnXllEs9n7Q-rfl6EBgHCEOJNPmHhgXI0d2pDkdw?e=5dFVYd"&gt;網路設定與可攜程式系統&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/ESLcVDBVr45ElAG30isotPoBZ7r-FNAyJr4QjUecsoDBKQ?e=RGzxeU"&gt;利用 diagrams.net 繪製流程圖, 說明可攜系統批次檔案內容&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/EcawctYxUplOk33qpP3BLEcBeUKitZROvf02V2UFbXi8mA?e=9BygOi"&gt;Github token, SSH 與 Brython 抽點程式說明&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;h1&gt;cp2022 w5 教學影片&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/EV7SPic7UeZOpey670S778cBljwSeehcTdci8vcTK4rDLw?e=EVcDsg"&gt;利用 random 模組編寫亂數密碼產生程式教學影片&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/EZ3JvNip-MNPo5VmXlyOS70BwK5FD-58nwk6_RKavby6uw?e=Sff67p"&gt;如何在 Windows 以 Putty 利用 SSH 協定對 Github 倉儲改版提交推送&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/EQePjhhmlwtJjzQGJYioXvgBmE6-UcPV6tG2vsSpgBPlPg?e=ghSbOp"&gt;如何利用 cms 執行動態網站, 改版後以 acp 將靜態網頁推向 Github Pages&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cp20222/EXduXS-tFpROvaH6zbCA4uQBVin9bP2Ux8vM0g20EWb_vQ?e=3N8abR"&gt;如何設定 SSH 與 https 協定, 對個人倉儲改版&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;h1&gt;cad2022 w4 教學影片&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cad2022/ESZarU_yCRhNmFkSxxAyEpcBOfI2WybqXKArkByi7dHL3Q?e=49SN4D"&gt;下載可攜系統, 建立 exam.cycu.org 考試帳號&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cad2022/EVP7xxy-VnlBidjNehizjwYBi34OgxfYnfDP0hZOuzMBqA?e=bU8Acb"&gt;Replit 執行動態網站, 如何與 Github 倉儲同步&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cad2022/EbA18B6BWZBCuI9KtoxG7tMBaSGQWQ-tgtf9IpukEr1lRA?e=HuFObB"&gt;近端可攜環境準備&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cad2022/Ec29bCcV_XNLk7QWSIR8ZdEBze1Zpl7ocb70XDEmlhXVdw?e=ZUozQB"&gt;cmsimde 改版, Replit 套用新倉儲版本&lt;/a&gt; (for @nfu users only)&lt;/p&gt;
&lt;h1&gt;cad2022 w5 教學影片&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://nfuedu.sharepoint.com/:v:/s/cad2022/EUxluWJoSGFDobtgaUliDRoBIbe--qCjx5We-1WwGMhTyQ?e=ZXZeof"&gt;如何在 stud.cycu.org Ubuntu 伺服器上執行動態網站, 如何將改版的靜態網頁推向 Github Pages&lt;/a&gt; (for @nfu users only)&lt;/p&gt;</content><category term="cad2022"></category><category term="w5"></category><category term="cad2022"></category><category term="cp2022"></category></entry><entry><title>cad2022 第三週課程</title><link href="https://mde.tw/blog/2022_fall_cad2022_w3.html" rel="alternate"></link><published>2022-09-22T12:00:00+08:00</published><updated>2022-10-01T20:54:47+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-09-22:/blog/2022_fall_cad2022_w3.html</id><summary type="html">&lt;p&gt;電腦輔助設計第三週課程內容. 各教學影片均需透過 @nfu 登錄的 Onedrive 帳號登入後, 才能觀看.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;電腦輔助設計第三週課程內容. 各教學影片均需透過 @nfu 登錄的 Onedrive 帳號登入後, 才能觀看.&lt;/p&gt;


&lt;h1&gt;個人課程網頁設定&lt;/h1&gt;
&lt;p&gt;教學影片: &lt;a href="https://nfuedu.sharepoint.com/:v:/r/sites/cad2022/Shared%20Documents/w3/Recordings/1%E3%80%8Cw3%E3%80%8D%E8%AA%B2%E7%A8%8B%E5%80%89%E5%84%B2%E8%88%87%20Github%20Pages%20%E8%A8%AD%E5%AE%9A%E8%AA%AA%E6%98%8E.mp4?csf=1&amp;amp;web=1&amp;amp;e=lfYKhG"&gt;課程倉儲與 Github Pages 設定說明&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Replit and Github&lt;/h1&gt;
&lt;p&gt;教學影片: &lt;a href="https://nfuedu.sharepoint.com/:v:/r/sites/cad2022/Shared%20Documents/w3/Recordings/2%E3%80%8Cw3%E3%80%8D%E5%BB%BA%E7%AB%8B%20Replit%20%E5%B8%B3%E8%99%9F,%20%E4%B8%A6%E5%B0%87%E8%AA%B2%E7%A8%8B%E5%80%89%E5%84%B2%20import%20%E8%87%B3%20Repl%20%E5%B0%88%E6%A1%88.mp4?csf=1&amp;amp;web=1&amp;amp;e=kjtcxl"&gt;建立 Replit 帳號, 並將課程倉儲 import 至 Repl 專案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;教學影片: &lt;a href="https://nfuedu.sharepoint.com/:v:/r/sites/cad2022/Shared%20Documents/w3/Recordings/3%E3%80%8Cw3%E3%80%8D%E5%A6%82%E4%BD%95%E5%9C%A8%20Replit%20%E5%95%9F%E7%94%A8%E5%8B%95%E6%85%8B%E7%B6%B2%E7%AB%99%E5%BE%8C%E8%BD%89%E9%9D%9C%E6%85%8B%E4%B8%A6%E5%90%8C%E6%AD%A5%E8%87%B3%E8%AA%B2%E7%A8%8B%E5%80%89%E5%84%B2%20(%E5%BB%BA%E8%80%83%E8%A9%A6%E5%B8%B3%E8%99%9F).mp4?csf=1&amp;amp;web=1&amp;amp;e=VTSc2h"&gt;Replit 動態網站與 Github 倉儲同步&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;課程筆記&lt;/h1&gt;
&lt;p&gt;第三週內容摘要:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;透過 mdecad2022 的 organization 建立個人可以管理的倉儲 (名稱為 site-Github_帳號).&lt;/li&gt;
&lt;li&gt;利用 replit 帳號所啟動的動態網站進行內容管理.&lt;/li&gt;
&lt;li&gt;將動態網站內容轉為靜態網站內容之後, 設法與 Github 倉儲同步. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之後申請帳號都使用 @nfu 電子郵箱登記並收信 (可從 &lt;a href="https://mail.nfu.edu.tw"&gt;https://mail.nfu.edu.tw&lt;/a&gt; 登入)&lt;/p&gt;
&lt;h2&gt;修補課程網站安全疑慮&lt;/h2&gt;
&lt;p&gt;目的: 不想讓 config/config 帶有編碼後的管理者密碼, 直接公開在 Github 倉儲歷程中.&lt;/p&gt;
&lt;p&gt;執行步驟: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必須先在個人的 mdecad2022/site-github_帳號 倉儲進行處理.&lt;/li&gt;
&lt;li&gt;接著刪除 config/config 設定檔案.&lt;/li&gt;
&lt;li&gt;修改 .gitignore 成為: &lt;a href="https://raw.githubusercontent.com/mdecad2022/site-41023242/main/.gitignore"&gt;https://raw.githubusercontent.com/mdecad2022/site-41023242/main/.gitignore&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;加入 main.py: &lt;a href="https://raw.githubusercontent.com/mdecad2022/site-41023242/main/main.py"&gt;https://raw.githubusercontent.com/mdecad2022/site-41023242/main/main.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在倉儲根目錄加入 nocache.py, 內容如: &lt;a href="https://github.com/mdecycu/cmsimde/blob/2a41b26b6d9b1446a8b448bb6fb58a6dbb41c867/nocache.py"&gt;https://github.com/mdecycu/cmsimde/blob/2a41b26b6d9b1446a8b448bb6fb58a6dbb41c867/nocache.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;之後再設法以 import 方式, 利用個人課程倉儲內容在 replit 建立  Repl 專案. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Replit 執行動態網站:&lt;/p&gt;
&lt;p&gt;必須進入 Shell, 在倉儲根目錄執行下列兩則指令 (取下子模組內容, 並安裝執行所需模組).&lt;/p&gt;
&lt;p&gt;git submodule update --init --recursive&lt;/p&gt;
&lt;p&gt;pip install   flask flask_cors bs4 lxml pelican markdown gevent&lt;/p&gt;
&lt;p&gt;2b 開始在  &lt;a href="https://exam.cycu.org"&gt;https://exam.cycu.org&lt;/a&gt; 建立考試帳號.&lt;/p&gt;</content><category term="cad2022"></category><category term="w3"></category></entry><entry><title>2022 秋季學期第二週</title><link href="https://mde.tw/blog/2022_fall_semester_week2.html" rel="alternate"></link><published>2022-09-13T12:00:00+08:00</published><updated>2022-10-01T20:54:47+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-09-13:/blog/2022_fall_semester_week2.html</id><summary type="html">&lt;p&gt;簡要說明 2022 Fall 與計算機程式及電腦輔助設計與實習課程的相關規劃與期程安排.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;簡要說明 2022 Fall 與計算機程式及電腦輔助設計與實習課程的相關規劃與期程安排.&lt;/p&gt;


&lt;h1&gt;課程網站&lt;/h1&gt;
&lt;p&gt;目前將課程網站放在同一個倉儲, 相關連結可以參考 &lt;a href="https://mde.tw/blog/pages/about/index.html"&gt;https://mde.tw/blog/pages/about/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;現在 &lt;a href="https://github.com/mdecycu/mdecycu.github.io"&gt;mde.tw&lt;/a&gt; 的倉儲容量大約 800 MB, 每次在新的環境重新 git clone --recurse-submodules 會有一些負擔, 但若使用隨身碟進行逐次改版, 應該還好.&lt;/p&gt;
&lt;p&gt;Fall 學期上的課程為大一的計算機程式, 還有大二的電腦輔助設計與實習.&lt;/p&gt;
&lt;p&gt;計算機程式是從網頁上的 Python 語法教起, 採用的解譯器為 &lt;a href="https://www.brython.info/"&gt;Brython&lt;/a&gt;, 終極目標是希望能夠利用 &lt;a href="https://www.brython.info/"&gt;Brython&lt;/a&gt; 與 &lt;a href="https://threejs.org/"&gt;Three.js&lt;/a&gt;, 開發出類似 &lt;a href="https://sim.firialabs.com/"&gt;https://sim.firialabs.com/&lt;/a&gt; 的網際套件, 直接在瀏覽器上透過 &lt;a href="https://www.brython.info/"&gt;Brython&lt;/a&gt; 程式控制 Robot 模擬場景.&lt;/p&gt;
&lt;p&gt;&lt;img src="./../images/sim_firialabs_com.png" width="800"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;計算機程式課程學員可以直接從 &lt;a href="https://mde.tw/content/Python.html"&gt;https://mde.tw/content/Python.html&lt;/a&gt; 進入, 直接在線上練習 &lt;a href="https://www.brython.info/"&gt;Brython&lt;/a&gt; 所支援的 Python 語法. 由於是在瀏覽器上, 必須要對 HTML 與 Javascript 有些基本認識, 才能充份使用 &lt;a href="https://www.brython.info/"&gt;Brython&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;學員在計算機程式課程所寫的程式, 被要求要設法放入自己管理的 Github 倉儲, 而倉儲是採用 Github Classroom 建立, 並且直接導入 cmsimde 子模組. 假如要將個人倉儲 git clone 到近端電腦上改版, 就必須使用:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules 加上擷取倉儲內容的網路_URL 或 SSH 連線字串&lt;/p&gt;
&lt;p&gt;假如第一階段只用 git clone, 而沒有 --recurse-submodules 附屬指令選項, 則可以在取下主倉儲內容後, 以 git submodule update --init --recursive 取下所有子模組的內容.&lt;/p&gt;
&lt;p&gt;光是要能以 git 取下倉儲檔案, 使用者的近端電腦就必須能夠執行 git, 可以使用操作系統安裝版, 或者使用課堂上所推薦的可攜程式套件中的 &lt;a href="https://git-scm.com/download/win"&gt;portablegit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;至於要使用 https 或 ssh 協定進行 git, 主要牽涉到隨後改版 push 時的權限驗證, 因為只有具備倉儲管理權的用戶, 才能對 Github 上的倉儲進行改版.&lt;/p&gt;
&lt;h2&gt;網路協定&lt;/h2&gt;
&lt;p&gt;所有網路上的應用, 都牽涉網路協定, 以 https 而言, 所使用的網路協定就是 http, 也就是超文件傳輸協定. 而 https 就是在利用超文件傳輸的過程中, 將傳送的資料加以加密編碼後, 直到接收後再解開, 是相較於 http 嚴謹安全的傳送.&lt;/p&gt;
&lt;p&gt;以 https 擷取 Github 倉儲的時候, 需要在 URL 中加上帳號 &lt;a href="https://mde.tw/content/Token%20and%20SSH.html"&gt;token&lt;/a&gt;, 而這串連線驗證身分用的字串, 還帶有權限範圍, 以及時效, 使用者可以在 Github 帳號設定頁中取得.&lt;/p&gt;
&lt;p&gt;由於 Github 目前只支援 IPv4 協定, 而在電腦輔助設計室為了擴大可用頻寬, 採用 IPv6 協定, 要讓 IPv6 協定下的 git 指令, 正確與 Github 倉儲連線, 必須透過 Proxy server (使用 &lt;a href="http://www.squid-cache.org/"&gt;Squid&lt;/a&gt;), 而且是能同時支援 IPv4 與 IPv6 協定的代理主機. 以 https 對 git 指令的 Proxy 設定, 位於可攜程式環境中的 home_ipv6 目錄下, 檔案名稱為 .gitconfig, 使用者執行 git config 後的設定就是存入 home_ipv6/.gitconfig 檔案中.&lt;/p&gt;
&lt;p&gt;至於 git 所使用的 &lt;a href="https://mde.tw/content/Token%20and%20SSH.html"&gt;SSH&lt;/a&gt; 連線協定, 在 Windows 操作系統, 可以透過 &lt;a href="https://www.putty.org/"&gt;Putty&lt;/a&gt; session 設定達成, 其中的 session 包含連線到 github.com, 所使用的 &lt;a href="https://mde.tw/content/Token%20and%20SSH.html"&gt;SSH&lt;/a&gt; 認證用 private key 位置, 還有 Proxy 設定.&lt;/p&gt;
&lt;p&gt;上述將使用 cmsimde 作為子模組的倉儲取至近端電腦的目的, 共有兩個: 進行改版以及進行協同.&lt;/p&gt;
&lt;p&gt;在近端進行倉儲內容改版的意思是, 利用 Python 與必要模組, 可以執行 cmsimde 網站中的動態系統, 其中所需要的模組為:&lt;/p&gt;
&lt;p&gt;flask flask_cors bs4 lxml pelican markdown leo pyopenssl&lt;/p&gt;
&lt;p&gt;flask 與 flask_cors 是網際框架, 安裝 flask_cors 的目的是讓網站可以跨網域擷取資料.&lt;/p&gt;
&lt;p&gt;bs4 是用來對超文件分頁的工具, 讓 cmsimde 中的 config/content.htm 可以根據 H1, H2 與 H3 的標題進行分頁.&lt;/p&gt;
&lt;p&gt;lxml 是將動態網頁內容轉為靜態網頁內容時所需要的解讀模組.&lt;/p&gt;
&lt;p&gt;pelican 是用來建立網誌的工具, 可以將使用者所寫的 Markdown 轉為網誌格式的內容.&lt;/p&gt;
&lt;p&gt;markdown 是用來解讀 .md 檔案的工具.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.leoeditor.com/"&gt;leo&lt;/a&gt; 是大綱管理模組, 用來作為編寫網誌或簡報的工具, 也可以當作程式開發的 IDE.&lt;/p&gt;
&lt;p&gt;pyopenssl 則是在動態網頁中, 以程式方法伺服靜態網頁內容時, 建立 SSL 連線時所需.&lt;/p&gt;
&lt;h2&gt;Replit 作為應用程式伺服器&lt;/h2&gt;
&lt;p&gt;除了將 Github 上的倉儲, git clone 到近端改版外, 也可以利用 &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt;, 直接在瀏覽器上以 wsgi 模式, 執行 cmsimde 的動態網站. 如此可以免除在近端執行動態網站所需要的網路協定與 git 指令. 只不過 &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; 只給免費帳號 500 MB 的儲存空間, 過大的倉儲並不適合採用 &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; 執行 cmsimde 的動態網站.&lt;/p&gt;
&lt;p&gt;使用 &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; 執行 cmsimde 的過程, 需要在 shell 執行:&lt;/p&gt;
&lt;p&gt;git submodule update --init --recursive&lt;/p&gt;
&lt;p&gt;目的是取下子模組資料, 因為 &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; 與 Github 的連結, 似乎只使用 git clone, 並沒有加上 --recurse-submodules, 使用者必須手動執行.&lt;/p&gt;
&lt;p&gt;另外則是利用 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝 cmsimde 所需模組, 與上述近端改版的差異是: 無需安裝 &lt;a href="https://www.leoeditor.com/"&gt;leo&lt;/a&gt; 與 pyopenssl, 因為系統是在雲端 Replit 的主機上執行,  目前還無法在 &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; 系統上使用 &lt;a href="https://www.leoeditor.com/"&gt;leo&lt;/a&gt;, 也無需自行配置近端伺服器的 SSL.&lt;/p&gt;
&lt;p&gt;一旦將動態網站配置到 &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; 之後, 可以將動態網頁改版內容, 同步到對應的 Github 倉儲, 主要利用倉儲的 &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; 伺服靜態網頁.&lt;/p&gt;
&lt;h1&gt;電腦輔助設計與實習&lt;/h1&gt;
&lt;h2&gt;What is CAD software?&lt;/h2&gt;
&lt;p&gt;From: &lt;a href="https://formlabs.com/blog/cad-software/"&gt;https://formlabs.com/blog/cad-software/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CAD (computer-aided design) is the tool that brings a design to a manufacture-ready state. It is the all-important software environment where designers and engineers translate concept sketches into three-dimensional models which are then visualized, optimized, simulated, and can be directly 3D printed or produced with traditional manufacturing tools. &lt;/li&gt;
&lt;li&gt;Computer-aided design (CAD) is a method to digitally create 2D drawings and 3D models that has replaced manual drafting across a wide range of industries. CAD software tools empower designers to explore design ideas, modify designs easily, visualize concepts through renderings, simulate how a design performs in the real world, draft documentation, share designs for feedback, and more—facilitating innovation and allowing companies to get to market faster.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Benefit of CAD&lt;/h2&gt;
&lt;p&gt;From: &lt;a href="https://formlabs.com/blog/cad-software/"&gt;https://formlabs.com/blog/cad-software/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The benefits of CAD integration across the product development process are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rapid concept development: Envisioned designs can be accurately sketched for early visualization and 3D printed rapid prototypes.&lt;/li&gt;
&lt;li&gt;Specialization: Spreading CAD throughout the organization develops specific knowledge which results in a common understanding of how to bring specific parts to the manufacturing-ready stage.&lt;/li&gt;
&lt;li&gt;Visualization: Clients and target customers can be informed and impressed with cutting-edge 3D renderings, animations, and virtual reality experiences of works-in-progress.&lt;/li&gt;
&lt;li&gt;Optimization: Faults and imperfections can be detected and optimized much faster in a virtual environment. Gaps between design intent and manufacturing reality are bridged using accurately toleranced mechanical drawings.&lt;/li&gt;
&lt;li&gt;Rapid manufacturing: Products can be brought to production faster using CAM systems and rapid manufacturing technologies.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Uses of CAD&lt;/h2&gt;
&lt;p&gt;From: &lt;a href="https://formlabs.com/blog/cad-software/"&gt;https://formlabs.com/blog/cad-software/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Traditionally, CAD software systems lead to the generation of a set of mechanical drawings that inform the factory how to produce a product, along with the manufacturing technology, materials, mold finishes, and tolerances required. Nowadays though, they do much more:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating photorealistic renderings for internal presentations and marketing collateral&lt;/li&gt;
&lt;li&gt;BOM (Bill of Materials) integration for managing all parts in an assembly as well as cost estimation. &lt;/li&gt;
&lt;li&gt;Direct import of standard mechanical parts and/or ornamental elements from linked databases of various suppliers&lt;/li&gt;
&lt;li&gt;Deriving an injection mold design from a part after setting up some basic parameters&lt;/li&gt;
&lt;li&gt;Assisting the design and simulation of sheet metal components, welded frames, and composite parts&lt;/li&gt;
&lt;li&gt;Stress and &lt;a href="https://en.wikipedia.org/wiki/Buckling"&gt;buckling&lt;/a&gt; (屈曲) analysis (FEA), drop test simulation, and generative design (GD)-generated suggestions for optimization&lt;/li&gt;
&lt;li&gt;Mold flow analysis for injection molding&lt;/li&gt;
&lt;li&gt;Thermal, vibration, and aerodynamics analysis&lt;/li&gt;
&lt;li&gt;Motion analysis and interference detection for assemblies&lt;/li&gt;
&lt;li&gt;Ergonomics analysis with posable 3D manikins&lt;/li&gt;
&lt;li&gt;Surface flattening for &lt;a href="https://www.ubeeco.com.au/products/cardboard-cartons/#die-cut"&gt;die-cut&lt;/a&gt; (沖壓剪切) drawings based on a 3D model&lt;/li&gt;
&lt;li&gt;Nesting algorithms (&lt;a href="https://github.com/markfink/nest2D"&gt;嵌套演算&lt;/a&gt;) for optimizing the layout of parts on the 2D bed of a laser cutter or 3D printer&lt;/li&gt;
&lt;li&gt;Automatic gemstone prong settings for jewelry design&lt;/li&gt;
&lt;li&gt;Simulation of fabrics (編織物) and inflatables (充氣件)&lt;/li&gt;
&lt;li&gt;PLM systems to manage assemblies, part version history, releases, engineering changes, file formats, metadata, cost estimation, vendors and suppliers, collaborations, access control, revision control, manufacturing process planning, and related part files, documents, and presentations&lt;/li&gt;
&lt;li&gt;Advanced Geometric Dimensioning and Tolerancing (GD&amp;amp;T) in order to convey design intent and optimize the manufacturing process.&lt;/li&gt;
&lt;li&gt;Direct import of 3D scanning data for reverse engineering&lt;/li&gt;
&lt;li&gt;Preparing models for 3D printing&lt;/li&gt;
&lt;li&gt;Texture mapping (紋理映射) and painting for use in art, video games, movies, and full-color 3D printing&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Types of CAD Software Systems&lt;/h2&gt;
&lt;p&gt;From: &lt;a href="https://formlabs.com/blog/cad-software/"&gt;https://formlabs.com/blog/cad-software/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Polygonal modeling - 代表套件 &lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Solid modeling - 代表套件 Solidworks, AutoDesk Inventor, Solid Edge, NX, Creo, Catia, Onshape&lt;/li&gt;
&lt;li&gt;Surface modelers - 代表套件 AutoDesk Alias, Rhino, 以及高端 CAD: NX, Creo, Catia&lt;/li&gt;
&lt;li&gt;Parametric modelers - 代表套件 Solidworks, AutoDesk Inventor, Solid Edge, NX, Creo, Catia, Onshape&lt;/li&gt;
&lt;li&gt;Generative design - 代表套件 AutoDesk Fusion360, Creo, Ansys Discovery, nTopology, Catia, Altair Inspire, NX, &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相較於計算機程式所有上課的內容均為自由開源軟體, 電腦輔助設計與實習課程所採用的 NX 與 &lt;a href="https://www.coppeliarobotics.com/"&gt;Coppeliasim&lt;/a&gt; 則分別是商用套件與教育開源工具.&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/Eb7GeAUGMANEkijnWXGNH60BltYzKwkkffas3JhzgwnmxQ?e=K4HKXF"&gt;NX12.0.2.9_lite_cad2022.7z&lt;/a&gt; (for @gm users only, 1.20 GB, 解開後 6.24 GB) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EUyA1JH9PsVHjjiZ_3a_voUBZQPSNugB5q2y-iAFVHtCgg?e=qTsfXz"&gt;NX12.0.2.9_lite_cad2022 for @nfu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;2022 Fall 所使用的 NX 為 2027.3401 版:&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfvS63_7udVPhe-xlXrYPCMBVTUEEona5_QXwHdZD_8Vww?e=LNczOS"&gt;NX2027.3401_lite_cad2022.7z&lt;/a&gt; (for @gm users only, 1.97 GB, 解開後 7.49 GB) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EW0eW8fnq2lAtCNHD6r6zqQBeJ-eqkROCzE7RpBM9-PCmw?e=rq94Li"&gt;NX2027.3401_lite_cad2022.7z for @nfu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfC-9gy1PN9MmJtpD9VO5KcB3kehP6VVVgmQt3ej5D_BIQ?e=deXuWs"&gt;NX2027.3401_cad2022.7z&lt;/a&gt; (for @gm users only, 8.02 GB, 解開後 28.32 GB) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfZUTNYTlMVFgkGd00cs3JkBKCfgzukXFn5U1ikAdwHBXw?e=55tjsp"&gt;NX2027.3401_cad2022.7z for @nfu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EU-fmibMpBZKg2ZiXmBlK-oBQj7wLV5YeMGI8rCI60NhmQ?e=EuxlyD"&gt;NX2007_documentation.7z&lt;/a&gt; (for @gm users only, 2.18 GB, 解開後 2.86 GB) / &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EVx4Xf0IaSZBsD4KyEp6584BKbFINFRXAqViqnX5qhfOkg?e=TZ7AyT"&gt;NX2007_documentation.7z for @nfu&lt;/a&gt;, 使用時執行 start_static.py 後, 以瀏覽器 http://localhost:7443 開啟, 或直接在 &lt;a href="http://c1.cycu.org:88"&gt;http://c1.cycu.org:88&lt;/a&gt; 開啟. &lt;/p&gt;
&lt;p&gt;線上 &lt;a href="https://docs.sw.siemens.com/en-US/release/209349590/NX%202007%20Series"&gt;NX2007 EN Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.coppeliarobotics.com/"&gt;Coppeliasim&lt;/a&gt; 所使用的版本則為 4.3.0 rev12:&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/ESXbxhDmlUhBmPTUqAdTrLEBjvaqzZupKcgviAmxWGQdjQ"&gt;CoppeliaSim 4.3.0 rev12.7z&lt;/a&gt; (for @gm users only) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/ESXjJcIX4m9Jm-gX990RwIQBWelBgw8zf0NdKb8qAIxKtQ"&gt;CoppeliaSim 4.3.0 rev12.7z for @nfu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本學期的電腦輔助與實習課程, 零組件繪圖的部分將從 &lt;a href="https://docs.sw.siemens.com/documentation/external/PL20200605194735749/en-US/static/design_day_one/index.html#"&gt;design day one&lt;/a&gt; (或 &lt;a href="http://c1.cycu.org:88"&gt;http://c1.cycu.org:88&lt;/a&gt;) 的練習開始. 其中包括觀看各英文教學影片.&lt;/p&gt;</content><category term="cad2022"></category><category term="cad2022"></category><category term="cp2022"></category></entry><entry><title>可攜 CoppeliaSim 4.3.0 rev12</title><link href="https://mde.tw/blog/portable-CoppeliaSim-4.3.0-rev12.html" rel="alternate"></link><published>2022-08-23T11:00:00+08:00</published><updated>2022-09-15T21:50:55+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-08-23:/blog/portable-CoppeliaSim-4.3.0-rev12.html</id><summary type="html">&lt;p&gt;CoppeliaSim 的安裝套件採用 &lt;a href="https://www.pantaray.com/qsetup.html"&gt;QSetup&lt;/a&gt; 製作, 即便在安裝過程可從 %temp% 中的暫存目錄 (例如: AppData\Local\Temp\SETUP_2639) 取得其 setup.exe 所解開的檔案, 但仍無法直接 extract 出完整的可攜 CoppeliaSim 目錄.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;CoppeliaSim 的安裝套件採用 &lt;a href="https://www.pantaray.com/qsetup.html"&gt;QSetup&lt;/a&gt; 製作, 即便在安裝過程可從 %temp% 中的暫存目錄 (例如: AppData\Local\Temp\SETUP_2639) 取得其 setup.exe 所解開的檔案, 但仍無法直接 extract 出完整的可攜 CoppeliaSim 目錄.&lt;/p&gt;


&lt;h1&gt;Portable CoppeliaSim&lt;/h1&gt;
&lt;p&gt;因此這裡所謂的可攜 &lt;a href="https://www.coppeliarobotics.com/"&gt;CoppeliaSim&lt;/a&gt;, 其實就是從操作系統完成安裝的目錄中取出資料, 然後加上存入操作系統中的 redistributable dll 檔案製作而成.&lt;/p&gt;
&lt;p&gt;其中的 vcRedist/vc2019redist_x64.exe 需要利用 &lt;a href="https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm"&gt;Wix&lt;/a&gt; 解出 .msi 之後, 再利用 &lt;a href="https://github.com/Bioruebe/UniExtract2"&gt;UniExtract2&lt;/a&gt; 解出所需要的 .dll, 並將所有的 .dll 檔案放入可攜 CoppeliaSim 的根目錄中.&lt;/p&gt;
&lt;p&gt;解開 vc2019redist_x64.exe 的指令:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
wix311-binaries\dark.exe vc2019redist_x64.exe -x extracted
&lt;/pre&gt;

&lt;p&gt;表示要在 extracted 目錄中取得 extracted\AttachedContainer\packages\vcRuntimeMinimum_amd64\vc_runtimeMinimum_x64.msi 之後, 再利用 &lt;a href="https://github.com/Bioruebe/UniExtract2"&gt;UniExtract2&lt;/a&gt; 解開所需的 dll 檔案, 最後再放入 CoppeliaSim 根目錄. 啟動時直接執行 coppeliaSim.exe 即可.&lt;/p&gt;
&lt;h1 id="simscene"&gt;simscene XML&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.coppeliarobotics.com/"&gt;CoppeliaSim&lt;/a&gt; 從 &lt;a href="https://www.coppeliarobotics.com/helpFiles/en/versionInfo.htm#coppeliaSim4.0.0"&gt;4.0.0 版&lt;/a&gt;開始, 提供 &lt;a href="https://mde.tw/pjcopsim/content/xmlFormat.html"&gt;XML 檔案格式&lt;/a&gt;的輸出入, 此功能允許使用者透過 &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; 檔案格式建構 &lt;a href="https://www.coppeliarobotics.com/"&gt;CoppeliaSim&lt;/a&gt; 的&lt;a href="https://mde.tw/pjcopsim/content/scenes.html"&gt;場景&lt;/a&gt;. 其中與機電產品開發過程中的電腦輔助設計架構最直接關聯的就是, 使用者可以直接透過程式方法, 將設計零件以 &lt;a href="https://en.wikipedia.org/wiki/STL_(file_format)"&gt;STL&lt;/a&gt; 格式輸出後, 套接在使用者所建構的機電資&lt;a href="https://mde.tw/pjcopsim/content/scenes.html"&gt;場景&lt;/a&gt;中. 意即: 使用者可以直接從 MCAD 套件中將組立檔案轉進具有 &lt;a href="https://mde.tw/pjcopsim/content/joints.html"&gt;joints&lt;/a&gt;、&lt;a href="https://mde.tw/pjcopsim/content/cameras.html"&gt;Camera&lt;/a&gt;、&lt;a href="https://mde.tw/pjcopsim/content/visionSensors.html"&gt;Vision sensors&lt;/a&gt;、&lt;a href="https://mde.tw/pjcopsim/content/forceSensors.html"&gt;Force sensors&lt;/a&gt;、&lt;a href="https://mde.tw/pjcopsim/content/proximitySensors.html"&gt;Proximity sensors&lt;/a&gt;與控制 &lt;a href="https://mde.tw/pjcopsim/content/scripts.html"&gt;Scripts&lt;/a&gt; 的模擬環境, 而無需全部採手動轉檔方式, 在 &lt;a href="https://www.coppeliarobotics.com/"&gt;CoppeliaSim&lt;/a&gt; 圖形介面中進行組立、設定參數或配接各項模擬元件樹狀架構.&lt;/p&gt;
&lt;p&gt;當使用者從 &lt;a href="https://www.coppeliarobotics.com/"&gt;CoppeliaSim&lt;/a&gt; 將&lt;a href="https://mde.tw/pjcopsim/content/scenes.html"&gt;場景&lt;/a&gt; 存為 exhaustive sinscent &lt;a href="https://mde.tw/pjcopsim/content/xmlFormat.html"&gt;XML 檔案格式&lt;/a&gt; 後, 可以利用下列 Python 程式讀出其中的標註 (總數超過 326 個), 之後再設法利用 &lt;a href="https://www.leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 的 import-xml-tags data 設定解讀所有 tags 內容, 並以階層式架構呈現 :&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# from https://stackoverflow.com/questions/29596584/getting-a-list-of-xml-tags-in-file-using-xml-etree-elementtree
import xml.etree.ElementTree as ET

def leo_print(x):
    try:
        print(x)
    except:
        g.es(x)

# load and parse the file
xmlTree = ET.parse('two_link_slvs_shaft_simple.simscene.xml')

elemList = []

for elem in xmlTree.iter():
    elemList.append(elem.tag)

# now I remove duplicities - by convertion to set and back to list
elemList = list(set(elemList))

# Just printing out the result
try:
    print(elemList)
except:
    # echo string
    g.es(elemList)

for i in elemList:
    leo_print(i)
&lt;/pre&gt;

&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/ESXbxhDmlUhBmPTUqAdTrLEBjvaqzZupKcgviAmxWGQdjQ"&gt;CoppeliaSimEdu_4.3.0_rev12.7z&lt;/a&gt; (for @gm users only) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/ESXjJcIX4m9Jm-gX990RwIQBWelBgw8zf0NdKb8qAIxKtQ?e=VlYiHu"&gt;CoppeliaSimEdu_4.3.0_rev12.7z for @nfu&lt;/a&gt;&lt;/p&gt;</content><category term="cad2022"></category><category term="Coppeliasim"></category><category term="cad2022"></category></entry><entry><title>2022 Fall CAD 課程</title><link href="https://mde.tw/blog/2022-Fall-computer-aided-design-and-practices.html" rel="alternate"></link><published>2022-08-14T11:00:00+08:00</published><updated>2022-09-22T23:19:38+08:00</updated><author><name>mdecycu</name></author><id>tag:mde.tw,2022-08-14:/blog/2022-Fall-computer-aided-design-and-practices.html</id><summary type="html">&lt;p&gt;2022 Fall 電腦輔助設計與實習的教學主要介紹 NX 與 CoppeliaSim 在機械設計流程中的應用.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2022 Fall 電腦輔助設計與實習的教學主要介紹 NX 與 CoppeliaSim 在機械設計流程中的應用.&lt;/p&gt;


&lt;h1&gt;課程評分&lt;/h1&gt;
&lt;p&gt;cad2022 課程評分項目請參考: &lt;a href="https://mde.tw/content/cad-syllabus.html"&gt;syllabus&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;課程目標&lt;/h1&gt;
&lt;p&gt;利用 MCAD (Mechanical Computer Aided Design) 與 Robotic Simulator 建立一個未來能結合&lt;a href="https://en.wikipedia.org/wiki/Computer_vision#Recognition"&gt;影像辨識&lt;/a&gt;與&lt;a href="https://en.wikipedia.org/wiki/Deep_reinforcement_learning"&gt;深度強化學習&lt;/a&gt;探索用之&lt;a href="https://en.wikipedia.org/wiki/Digital_platform_(infrastructure)"&gt;數位平台&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;建立 Github 帳號&lt;/h1&gt;
&lt;p&gt;請尚未建立 Github 帳號的學員, 至 &lt;a href="https://github.com/join"&gt;https://github.com/join&lt;/a&gt; 申請帳號. 課程評分項目將包含利用 &lt;a href="https://classroom.github.com"&gt;Github Classroom&lt;/a&gt; 建立的倉儲與網站內容 (透過 invite link). 2022fall Github 帳號與學號對照的倉儲位於 &lt;a href="https://github.com/mdecycu/studlist/tree/main/2022fall"&gt;https://github.com/mdecycu/studlist/tree/main/2022fall&lt;/a&gt;, w2 起將利用 &lt;a href="https://ethercalc.net/"&gt;https://ethercalc.net/&lt;/a&gt; 在線由各學員自行輸入 (透過 &lt;a href="https://wcms.repl.co"&gt;https://wcms.repl.co&lt;/a&gt; 告知連結), 之後若 Github 更動, 則可以透過 &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"&gt;Pull Requests&lt;/a&gt; 提出修改請求.&lt;/p&gt;
&lt;p&gt;cad2022 課程中各學員的課程網址將為: https://mdecad2022.github.io/site-學員_Github_帳號&lt;/p&gt;
&lt;h1&gt;建立 Onedrive 帳號&lt;/h1&gt;
&lt;p&gt;請尚未建立 Onedrive 帳號的學員登入 @nfu 帳號後, 至 &lt;a href="https://www.microsoft.com/zh-tw/education/products/office"&gt;https://www.microsoft.com/zh-tw/education/products/office&lt;/a&gt;, 以 @nfu 帳號申請 Onedrive 5TB 儲存權限. 課程中所提供的檔案, 需要登入以 @nfu 註冊的 Onedrive 帳號後, 才能下載.&lt;/p&gt;
&lt;p&gt;上述操作流程參考影片如下:&lt;/p&gt;
&lt;script&gt;
var winkVideoData_w2_1 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"&gt;
&lt;source src="./../downloads/cad/cad_w2_1.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;利用 Replit 執行課程倉儲的動態網頁伺服器, 從 Github 倉儲 import 後, 可編輯動態網頁內容, 轉為靜態後, acp 回 Github Pages, 就可以對靜態網站改版:&lt;/p&gt;
&lt;script&gt;
var winkVideoData_w2_2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_w2_2" height="600" muted="true" width="800"&gt;
&lt;source src="./../downloads/cad/cad_w2_2.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1&gt;設計繪圖&lt;/h1&gt;
&lt;p&gt;以 NX2027.3401 或 NX12 建立 &lt;a href="https://cad.onshape.com/documents/0c152a911938d7352961b194/w/be224609ad39a35fc1439f95/e/a88aca1714001e9f86f16e49?renderMode=0&amp;amp;uiState=630374f7bf13ba67fd28a339"&gt;Foosball Table&lt;/a&gt; 零組件. 但新版 NX 所建立的零組件無法由舊版的 NX 開啟.&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/Eb7GeAUGMANEkijnWXGNH60BltYzKwkkffas3JhzgwnmxQ?e=K4HKXF"&gt;NX12.0.2.9_lite_cad2022.7z&lt;/a&gt; (for @gm users only, 1.20 GB, 解開後 6.24 GB) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EUyA1JH9PsVHjjiZ_3a_voUBZQPSNugB5q2y-iAFVHtCgg?e=qTsfXz"&gt;NX12.0.2.9_lite_cad2022 for @nfu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfvS63_7udVPhe-xlXrYPCMBVTUEEona5_QXwHdZD_8Vww?e=LNczOS"&gt;NX2027.3401_lite_cad2022.7z&lt;/a&gt; (for @gm users only, 1.97 GB, 解開後 7.49 GB) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EW0eW8fnq2lAtCNHD6r6zqQBeJ-eqkROCzE7RpBM9-PCmw?e=rq94Li"&gt;NX2027.3401_lite_cad2022.7z for @nfu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfC-9gy1PN9MmJtpD9VO5KcB3kehP6VVVgmQt3ej5D_BIQ?e=deXuWs"&gt;NX2027.3401_cad2022.7z&lt;/a&gt; (for @gm users only, 8.02 GB, 解開後 28.32 GB) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EfZUTNYTlMVFgkGd00cs3JkBKCfgzukXFn5U1ikAdwHBXw?e=55tjsp"&gt;NX2027.3401_cad2022.7z for @nfu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EU-fmibMpBZKg2ZiXmBlK-oBQj7wLV5YeMGI8rCI60NhmQ?e=EuxlyD"&gt;NX2007_documentation.7z&lt;/a&gt; (for @gm users only, 2.18 GB, 解開後 2.86 GB), 使用時執行 start_static.py 後, 以瀏覽器 http://localhost:7443 開啟, 或直接在 &lt;a href="http://c1.cycu.org:88"&gt;http://c1.cycu.org:88&lt;/a&gt; 開啟. / 下載 &lt;/p&gt;
&lt;p&gt;線上 &lt;a href="https://docs.sw.siemens.com/en-US/release/209349590/NX%202007%20Series"&gt;NX2007 EN Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;NX 零組件練習&lt;/h2&gt;
&lt;p&gt;請參考 &lt;a href="http://c1.cycu.org:88/static/design_day_one/index.html"&gt;Design Day One&lt;/a&gt; 資料, 並根據以 &lt;a href="http://www.ap242.org/"&gt;STEP 242&lt;/a&gt; 格式轉入 NX2027 之 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EZO40xkPvQlOlZ1hayUaCFIBVSmv7wOZ2_WQHadb5k-PVA"&gt;Drill Press 零組件檔案&lt;/a&gt; (&lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EW4q1J-ty_RIiVUgRgiZvMsB5muTPHem5mzNXntoUi0bbw?e=EQib5D"&gt;Drill Press 零組件檔案 for @nfu&lt;/a&gt;) 各零件尺寸, 重新繪製各零組件, 過程請以 &lt;a href="https://www.debugmode.com/wink/"&gt;Wink3&lt;/a&gt; 影片錄製繪圖步驟並加入說明文字內容.&lt;/p&gt;
&lt;p&gt;&lt;img src="./../images/drill_press.png" width="600"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;以 &lt;a href="https://www.onshape.com"&gt;Onshape&lt;/a&gt; 建立 &lt;a href="https://cad.onshape.com/documents/f942bc02bd60de603095cd9d/w/e3af941ed5245875e39138d0/e/af657625f78911e9e727c91a?renderMode=0&amp;amp;uiState=630373bdbf13ba67fd289e74"&gt;Foosball Table 零組件&lt;/a&gt;, &lt;a href="https://cad.onshape.com/documents/0c152a911938d7352961b194/w/be224609ad39a35fc1439f95/e/a88aca1714001e9f86f16e49?renderMode=0&amp;amp;uiState=630374f7bf13ba67fd28a339"&gt;Foosball Table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;以 &lt;a href="https://solvespace.com"&gt;Solvespace&lt;/a&gt; (含套件編譯) 建立 Foosball Table 零組件.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://link.springer.com/book/10.1007/978-3-658-29589-9"&gt;Siemens NX for beginners – in a nutshell&lt;/a&gt; (in German) &lt;a href="https://storage.googleapis.com/sgw-extras/zip/2020/978-3-658-29589-9.zip"&gt;Extra Materials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://link.springer.com/book/10.1007/978-3-658-31561-0"&gt;Siemens NX for advanced users - in a nutshell&lt;/a&gt; (in German) &lt;a href="https://storage.googleapis.com/sgw-extras/zip/2020/978-3-658-31561-0.zip"&gt;Extra Materials&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;W1 教學影片&lt;/h2&gt;
&lt;script&gt;
var winkVideoData_w1_1 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_w1_1" height="600" muted="true" width="800"&gt;
&lt;source src="./../downloads/cad/cad_w1_1.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1&gt;機電模擬&lt;/h1&gt;
&lt;p&gt;Robotic Simulator 部分將利用 &lt;a href="https://www.coppeliarobotics.com/"&gt;CoppeliaSim&lt;/a&gt; 4.3.0 rev12 建立 &lt;a href="https://cad.onshape.com/documents/0c152a911938d7352961b194/w/be224609ad39a35fc1439f95/e/a88aca1714001e9f86f16e49?renderMode=0&amp;amp;uiState=630374f7bf13ba67fd28a339"&gt;Foosball Table&lt;/a&gt; 模擬場景.&lt;/p&gt;
&lt;p&gt;下載 &lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/ESXbxhDmlUhBmPTUqAdTrLEBjvaqzZupKcgviAmxWGQdjQ"&gt;CoppeliaSim 4.3.0 rev12.7z&lt;/a&gt; (for @gm users only) / 下載 &lt;a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/ESXjJcIX4m9Jm-gX990RwIQBWelBgw8zf0NdKb8qAIxKtQ"&gt;CoppeliaSim 4.3.0 rev12.7z for @nfu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CoppeliaSim 使用者手冊: &lt;a href="https://mde.tw/pjcopsim"&gt;https://mde.tw/pjcopsim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/welcome.html"&gt;CoppeliaSim Overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/tutorials.html"&gt;CoppeliaSim Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/importExport.html"&gt;Import and Export&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/joints.html"&gt;Joints&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/buildingAModelTutorial.html"&gt;Build a clean model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/simulation.html"&gt;Simulation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/designingDynamicSimulations.html"&gt;Design dynamic simulations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/writingCode.html"&gt;Writing code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/pjcopsim/content/externalFrontEnd.html"&gt;Web-browser based frontend&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;控制方法&lt;/h1&gt;
&lt;p&gt;Robotic player 組設計驅動機構並交由 Lua 或 Python 執行控制. Human player 組則直接由鍵盤或搖桿執行控制.&lt;/p&gt;
&lt;h1&gt;可行機構分析&lt;/h1&gt;
&lt;p&gt;Robotic player 平移與旋踢機構設計.&lt;/p&gt;
&lt;p&gt;Actuation 機構設計.&lt;/p&gt;
&lt;p&gt;送球循環機構設計.&lt;/p&gt;
&lt;h2&gt;網誌類別&lt;/h2&gt;
&lt;p&gt;Category:&lt;/p&gt;
&lt;p&gt;Cad2022 類別代表與 2022 Fall 電腦輔助設計實習相關進度的內容&lt;/p&gt;
&lt;p&gt;Tutorial 類別代表與課程有關的教學示範&lt;/p&gt;
&lt;p&gt;Misc 類別代表雜項內容&lt;/p&gt;
&lt;h2&gt;標籤&lt;/h2&gt;
&lt;p&gt;Tags:&lt;/p&gt;
&lt;p&gt;標籤則可以分為: 課程簡介或 w1, w2 等各週的相關教學內容.&lt;/p&gt;
&lt;p&gt;除了課程週次 Tags 之外, 也可以將文章分為 NX, Solvespace, Onshape, CoppeliaSim, Brython or Python, Leo Editor 與 Fossil SCM 等專門介紹 Tags.&lt;/p&gt;
&lt;p&gt;單篇文章可以加入多個 Tags 以逗點隔開.&lt;/p&gt;
&lt;p&gt;其他的文章則放入 Misc 類別.&lt;/p&gt;
&lt;h2&gt;解開 redist_x64.exe&lt;/h2&gt;
&lt;p&gt;C:\CoppeliaSimEdu_4.3.0_rev12\vcRedist&amp;gt;c:\wix311\dark.exe vc_2019redist_x64.exe -x test&lt;/p&gt;
&lt;p&gt;Use UniExtract to extract the .msi&lt;/p&gt;</content><category term="cad2022"></category><category term="cad2022"></category><category term="syllabus"></category></entry></feed>