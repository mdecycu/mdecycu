<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mde.tw - Free</title><link href="./" rel="alternate"></link><link href="./feeds/free.atom.xml" rel="self"></link><id>./</id><updated>2022-09-10T22:00:55+08:00</updated><entry><title>免付費完結篇</title><link href="./the_end_of_free_service.html" rel="alternate"></link><published>2022-09-07T12:00:00+08:00</published><updated>2022-09-10T22:00:55+08:00</updated><author><name>mdecycu</name></author><id>tag:None,2022-09-07:./the_end_of_free_service.html</id><summary type="html">&lt;p&gt;天下沒有白吃的午餐. 2017 年 OpenShift 就曾經終止過免付費雲端應用服務, 2022 年GDrive 也才剛終止教育單位無限空間, &lt;a href="https://blog.heroku.com/next-chapter"&gt;上個月&lt;/a&gt;, 終於輪到 Heroku.&lt;/p&gt;
&lt;p&gt;不過就在此時, &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 即將在雲端應用程式服務界, 取而代之.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;天下沒有白吃的午餐. 2017 年 OpenShift 就曾經終止過免付費雲端應用服務, 2022 年GDrive 也才剛終止教育單位無限空間, &lt;a href="https://blog.heroku.com/next-chapter"&gt;上個月&lt;/a&gt;, 終於輪到 Heroku.&lt;/p&gt;
&lt;p&gt;不過就在此時, &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 即將在雲端應用程式服務界, 取而代之.&lt;/p&gt;


&lt;h1&gt;Heroku 的宣布&lt;/h1&gt;
&lt;p&gt;Starting October 26, 2022, we will begin deleting inactive accounts and associated storage for accounts that have been inactive for over a year. Starting November 28, 2022, we plan to stop offering free product plans and plan to start shutting down free dynos and data services. &lt;/p&gt;
&lt;p&gt;Heroku 進入所謂 next chapter 之後, 希望持續使用免費雲端應用程式服務的用戶, 可以轉往 &lt;a href="https://blog.replit.com/heroku-alternatives"&gt;https://blog.replit.com/heroku-alternatives&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;註冊 Replit 帳號&lt;/h1&gt;
&lt;p&gt;首先以 scrum1 與 cadlab 註冊帳號後, 將 cmsimde_site 透過 &lt;a href="https://replit.com/heroku"&gt;https://replit.com/heroku&lt;/a&gt; 轉換服務. 在 &lt;a href="https://docs.replit.com/hosting/deploying-http-servers"&gt;https://docs.replit.com/hosting/deploying-http-servers&lt;/a&gt; 的協助下, 應該就可以設法執行動態網頁或靜態網頁.&lt;/p&gt;
&lt;h1&gt;Replit 簡介&lt;/h1&gt;
&lt;p&gt;根據 &lt;a href="https://docs.replit.com/"&gt;https://docs.replit.com/&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Replit is a platform for creating and sharing software. You can write your code and host it all in the same place. Replit is also a place to learn how to code, so we have some awesome built-in educational features as well.&lt;/p&gt;
&lt;p&gt;Replit can do it all. It can replace your:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;code editor (e.g. VS Code, Sublime Text, IntelliJ IDEA)&lt;/li&gt;
&lt;li&gt;development environment (e.g. your operating system, and build tools like npm or pip)&lt;/li&gt;
&lt;li&gt;cloud provider (e.g. AWS, Netlify)&lt;/li&gt;
&lt;li&gt;team collaboration tools (e.g. Google Docs, GitHub)&lt;/li&gt;
&lt;li&gt;teaching tools (e.g. Canva, Moodle, Blackboard)&lt;/li&gt;
&lt;li&gt;learning tools (e.g. Codecademy, Coursera, Udemy, Udacity)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;免費帳號可建立不限數量的倉儲, 但只提供 500 MB 容量, 以及 500 MB 的記憶體, 加上 0.2-0.5 vCPUs, 因此大概只夠讓使用者測試了解 Replit 的使用流程以及配置方法.&lt;/p&gt;
&lt;p&gt;希望利用 Replit 配置靜態網頁者, 可以參考 &lt;a href="https://docs.replit.com/hosting/hosting-web-pages"&gt;https://docs.replit.com/hosting/hosting-web-pages&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;以 Replit 建立靜態網頁&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;選擇以 import from github 的方式建立 repl.&lt;/li&gt;
&lt;li&gt;選擇從 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; import 檔案&lt;/li&gt;
&lt;li&gt;language 選擇 html, css 與 javascript 類別&lt;/li&gt;
&lt;li&gt;將 repl 名稱從 cmsimte_site 改為 scrum1 (即與 account 名稱相同)&lt;/li&gt;
&lt;li&gt;隨即可以在 &lt;a href="https://scrum1.repl.co"&gt;https://scrum1.repl.co&lt;/a&gt; 看到靜態網頁&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Replit Flask 範例&lt;/h1&gt;
&lt;p&gt;Flask 基本範例&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from flask import Flask

app = Flask('app')

@app.route('/')
def hello_world():
    return 'Hello, World!'

app.run(host='0.0.0.0', port=8080)
&lt;/pre&gt;

&lt;p&gt;Flask 以 wsgi 執行&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from flask import Flask
from gevent.pywsgi import WSGIServer

app = Flask('app')

@app.route('/')
def hello_world():
    return 'Hello, World!'

#app.run(host='0.0.0.0', port=8080)
http_server = WSGIServer(('0.0.0.0', 8080), app)
http_server.serve_forever()
&lt;/pre&gt;

&lt;p&gt;Flask, wsgi 並壓縮資料&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from gevent import monkey
monkey.patch_all()
from flask import Flask
from gevent.pywsgi import WSGIServer
from flask_compress import Compress

app = Flask('app')
compress = Compress()
compress.init_app(app)

@app.route('/')
def hello_world():
    return 'Hello, World!'

#app.run(host='0.0.0.0', port=8080)
http_server = WSGIServer(('0.0.0.0', 8080), app)
http_server.serve_forever()
&lt;/pre&gt;

&lt;p&gt;Get from Google&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from flask import Flask, request 
from flask_cors import CORS
import requests

app = Flask(__name__)
CORS(app)

@app.route('/get_from_google')
@app.route('/')
def studlist():
  r = requests.get("https://google.com")
  return r.text

app.run(host="0.0.0.0", debug=True)
&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://replit.com/talk/ask/Can-someone-help-me-disable-cors-policy-so-other-repls-can-access-my-database/143997"&gt;Flask 與資料庫&lt;/a&gt;&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from flask import *
from flask_cors import CORS
from replit import db

app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

@app.route("/set/&lt;name&gt;/&lt;data&gt;/")
def set(name, data):
  print(name + " = " + data)
  db[name] = data
  return ""

@app.route("/get/&lt;name&gt;/")
def get(name):
  return db[name]

app.run(host="0.0.0.0", debug=True)
&lt;/pre&gt;

&lt;h1&gt;nfulist 搬遷&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecourse/nfulist"&gt;https://github.com/mdecourse/nfulist&lt;/a&gt; 原先配置在 Heroku, 目前已經無法正常運作, 因此必須設法搬到 Replit.&lt;/p&gt;
&lt;p&gt;理論上, 在 Replit 可以將程式寫為:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from flask import Flask, request 
from flask_cors import CORS

import requests
import bs4
#import ssl

app = Flask(__name__)
CORS(app)

@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    column = request.args.get('column')

    if semester == None:
        semester = '1091'
    if courseno == None:
        courseno = '0762'

    headers = {'X-Requested-With': 'XMLHttpRequest'}

    url = 'https://qry.nfu.edu.tw/studlist.php?selyr=1091&amp;seqno=0762'
    try:
        result = requests.get(url, verify=False, timeout=3)
    except:
        return "Connection refused"
    soup = bs4.BeautifulSoup(result.text, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        if column == "True":
            output +=i[0] + "&lt;/br&gt;"
        else:
            output +=i[0] + "\n"

    return output
    #return  str(pselyr) + " + " +str(pseqno)

# 即使在近端仍希望以 https 模式下執行
#context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
#context.load_cert_chain('localhost.crt', 'localhost.key')

app.run(host="0.0.0.0", debug=True)
&lt;/pre&gt;

&lt;p&gt;但是 qry.nfu.edu.tw 主機先前可以透過 Heroku 遠端連線, 但是卻拒絕 Replit 虛擬主機的連線取值, 因此 nfulist 網際程式必須另外配置在工作站室中的 Server 或另外再找合用的雲端應用程式伺服器.&lt;/p&gt;
&lt;p&gt;在近端執行的 nfulist 程式碼為 (&lt;a href="./../downloads/flask/nfulist_local_8080.py"&gt;nfulist_local_8080.py&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="brush: python"&gt;
import os
from flask import Flask, request 
from flask_cors import CORS
import requests
import bs4
#import ssl
# cpa: http://localhost:8080/?semester=1111&amp;courseno=0747&amp;column=True
# cpb: http://localhost:8080/?semester=1111&amp;courseno=0761&amp;column=True
# cada: http://localhost:8080/?semester=1111&amp;courseno=0773&amp;column=True
# cadb: http://localhost:8080/?semester=1111&amp;courseno=0786&amp;column=True

app = Flask(__name__)
CORS(app)

@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    column = request.args.get('column')

    if semester == None:
        semester = '1091'
    if courseno == None:
        courseno = '0762'

    url = 'https://qry.nfu.edu.tw/studlist.php?selyr=' + semester+ '&amp;seqno=' + courseno
    try:
        result = requests.get(url, timeout=3)
    except:
        return "Connection refused"
    return result.text
    soup = bs4.BeautifulSoup(result.text, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        if column == "True":
            output +=i[0] + "&lt;/br&gt;"
        else:
            output +=i[0] + "\n"

    return output
    #return  str(pselyr) + " + " +str(pseqno)

# 即使在近端仍希望以 https 模式下執行
#context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
#context.load_cert_chain('localhost.crt', 'localhost.key')

app.run(host="0.0.0.0", port=8080, debug=True)
&lt;/pre&gt;

&lt;h1&gt;配置 cmsimde_site&lt;/h1&gt;
&lt;p&gt;在 Replit 配置 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; 的隨選動態網站位於: &lt;a href="https://cmsimdesite.nfulist.repl.co"&gt;https://cmsimdesite.nfulist.repl.co&lt;/a&gt;, 而常駐靜態網站則另外配置於 &lt;a href="https://scrum1.repl.co"&gt;https://scrum1.repl.co&lt;/a&gt;. 由於這兩個 repl 中的檔案並沒能同步, 因此在 &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 目前針對 repl 無法直接更改執行的 language 情況下, 配置 cmsimde 網際內容管理的方式如下.&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 與 Github Pages 結合&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 雖然以雲端 IDE 自稱, 其實是一個使用者友善的雲端應用程式服務, 使用者在各種 language 設定下, 儘管目前只能選定一種執行模式, 但多重的應用服務, 可以藉著 Version Control 功能, 與 Github 倉儲結合, 能夠採下列流程, 部署 cmsimde 網際內容管理的動態與靜態網站內容.&lt;/p&gt;
&lt;p&gt;基本的使用流程是: 將動態網站部署在 &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt;, 且使用該動態網站內容建立對應的 Github 倉儲, 並且在 Github 端設定 Pages, 以便用來伺服與 &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 動態網站同步的靜態網站.&lt;/p&gt;
&lt;p&gt;結合兩者的前提是, cmsimde 網站的 .gitignore 必須事先修改為:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
 # Byte-compiled
__pycache__/
venv/
 &lt;/pre&gt;

&lt;p&gt;表示在 Github Pages 端的倉儲, 並不需要 &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 端的虛擬 Python 與設定檔案, 只要提供 cmsimde 的完整倉儲資料即可.&lt;/p&gt;
&lt;p&gt;另外一個重點是: 雖然 cmsimde 所需要的 Python modules, 在利用 main.py 啟動 &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 端的動態網站時, 會自動安裝, 但 lxml 模組卻不會隨之安裝.&lt;/p&gt;
&lt;p&gt;因此必須手動進入 shell, 以 pip 安裝 lxml.&lt;/p&gt;
&lt;p&gt;pip install lxml&lt;/p&gt;
&lt;p&gt;完成上述準備動作後, 接著修改 cmsimde 目錄下的  flaskapp.py, 處理 nocache.py 導入模組為:&lt;/p&gt;
&lt;p&gt;from .nocache import nocache&lt;/p&gt;
&lt;p&gt;或者 cmsimde 子模組中的程式內容不變, 但必須將 cmsimde/nocache.py 複製一份至根目錄.&lt;/p&gt;
&lt;p&gt;最後再執行 main.py:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from cmsimde import flaskapp

flaskapp.app.run(host='0.0.0.0', port=8080)
&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 端的動態網站就可以啟動: &lt;a href="https://c.scrum1.repl.co"&gt;https://c.scrum1.repl.co&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只要再處理 Github Pages 端倉儲的同步, 就可以得到靜態網站: &lt;a href="https://scrum-1.github.io/c"&gt;https://scrum-1.github.io/c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;若資料直接先從 Github 倉儲進行改版, 則在 &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt; 端的 Version Control, 可以利用 pull, 將改版內容取回合併.&lt;/p&gt;</content><category term="Free"></category><category term="heroku"></category><category term="replit"></category></entry></feed>