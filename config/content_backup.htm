<h1>cp2022</h1>
<h4>2022 Fall</h4>
<p>Introduction to Computer Programming (計算機程式)</p>
<p>線上 Python 教學:</p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/c/Freecodecamp/search?query=python">https://www.youtube.com/c/Freecodecamp/search?query=python</a></p>
<p>程式語言學習順序建議:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/content/Python.html">Brython</a> (Javascript, html5, css) -&gt; <a href="https://mde.tw/content/CPython.html">CPython</a> -&gt; <a href="https://mde.tw/content/ANSIC.html">C</a>/C++-&gt; <a href="https://mde.tw/content/Rust.html">Rust</a></p>
<p style="padding-left: 60px;">Brython - 在網頁 (with Gist) 上編寫程式</p>
<p style="padding-left: 60px;">CPython - Server 端的 Python 程式 (Flask)</p>
<p style="padding-left: 60px;">C/C++ - Server 端的硬體控制與數值分析程式</p>
<p style="padding-left: 60px;">Rust - 專注效能、安全與同步並發程式開發</p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/ETcCqg0jvcxKk3QlzIw1aGUBTNPJpxfof5Npt3iNK8qqng?e=oMG87p">2022_Absolute_Beginners_Guide_to_Python_Programming.pdf</a> (for @nfu users only)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/Ecnh3Fhw-mNIpbE-bLgxMuMBH6uPcubyxRqmHP4uvm6f0g?e=jDO5DT">2022_C_and_Python_Applications.pdf</a> (for @nfu users only)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EfK-lIwCrQpOtdX3_4Nzn1ABCxuEep9dxPTv4wuNqEYiJg?e=cRAAHI">2022_Python_Challenges.pdf</a> (for @nfu users only)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EXdqZ1g0VzhIj0A2Ib3a4wsBirT7rHIZdckBrR9smYrQbA?e=cQWygc">2022_Artificial_Intelligence_with_Python.pdf</a> (for @nfu users only)</p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EfJKULEZI3pFoxkgWHSsW5IBFanIcrFzKucI3f5NB95ZBg?e=II8XnW">2022_Programming_in_Two_Semesters.pdf</a> (for @nfu users only)</p>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<div id="disqus_thread"></div>
<p>
<script>
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://mdetw.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
</p>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><h2>cp-syllabus</h2>
<h4>課程評分:</h4>
<p style="padding-left: 30px;">w3 建立 <a href="https://tcexam.org/">TCExam</a> 帳號, 進行模擬考試.</p>
<p style="padding-left: 30px;">w4 Exam1 (5%)</p>
<p style="padding-left: 30px;">w8 Exam2 (5%)</p>
<p style="padding-left: 30px;">w9 Exam3 (5%)</p>
<p style="padding-left: 30px;">w12 Exam4 (5%)</p>
<p style="padding-left: 30px;">w16 Exam5 (5%)</p>
<p style="padding-left: 30px;">w18 Exam6 (5%)</p>
<p style="padding-left: 30px;">Github Repository and Pages (70%)</p>
<p style="padding-left: 60px;">個人簡歷與課程進度心得</p>
<p style="padding-left: 60px;">課程內容操作影片 (<a href="https://www.debugmode.com/wink/">Wink3</a>)</p>
<p style="padding-left: 60px;">期中程式專案</p>
<p style="padding-left: 60px;">期末程式專案</p>
<h4>課程內容:</h4>
<p style="padding-left: 30px;">學員利用網頁建立個人簡歷 (<a href="https://www.thebalancecareers.com/cv-vs-resume-2058495">Curriculum Vitae</a>)</p>
<p style="padding-left: 60px;">建立 Github 帳號:</p>
<p style="padding-left: 90px;"><a href="https://education.github.com/">https://education.github.com/</a></p>
<p style="padding-left: 60px;">建立 Onedrive 帳號</p>
<p style="padding-left: 90px;">請各學員至 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 @nfu 帳號申請 OneDrive 儲存權限.</p>
<p style="padding-left: 60px;">利用 Github 建立網頁:</p>
<p style="padding-left: 90px;"><a href="https://pages.github.com/">https://pages.github.com/</a></p>
<p style="padding-left: 60px;">維護 Github 上的網頁:</p>
<p style="padding-left: 90px;">在近端將動態網頁轉為靜態網頁後, acp 至 Github 倉儲.</p>
<p style="padding-left: 90px;">利用 <a href="https://github.com/features/actions">Github Actions</a> 將已推送之動態網頁轉為靜態網頁並自動改版.</p>
<p style="padding-left: 60px;">可攜程式系統與網路設定</p>
<p style="padding-left: 60px;">個人電腦, 筆電與隨身碟</p>
<p style="padding-left: 30px;">網頁上的 Pyrhon 程式</p>
<p style="padding-left: 60px;">程式環境配置</p>
<p style="padding-left: 60px;">Python 基本語法</p>
<p style="padding-left: 60px;">html, css 與 Javascript</p>
<p style="padding-left: 60px;">靜態繪圖</p>
<p style="padding-left: 60px;">動態繪圖</p>
<p style="padding-left: 30px;">ANSI C 程式</p>
<p style="padding-left: 60px;">Tiny C compiler and C 基本語法</p>
<p style="padding-left: 60px;">GCC and C 基本語法</p>
<p style="padding-left: 30px;">CPython 程式</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-7774-4">C and Python Applications</a> (2022)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-7410-1">Hands-on Matplotlib</a> (2022)</p>
<h4>Reference:</h4>
<p style="padding-left: 30px;"><a href="https://c1.cycu.org/doc/trunk/content/index.html">cp2021</a></p><h2>cmsimde</h2>
<p>WCM (Web based Content Management) 網際內容管理課程主要在研究改進 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 的功能與應用.</p>
<p><a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 是一套 Web-based content management system, 也就是基於全球資訊網的內容管理系統.</p>
<p style="padding-left: 30px;">研究 <a href="https://www.codementor.io/@lautiamkok/creating-a-nuxt-application-with-python-frameworks-kd2yjqsfx">Nuxt.js 結合 Flask</a></p>
<p>由於全球資訊網頁中主要使用 html, css 與 javascript 控制網頁內容, 因此在利用 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 管理數位內容時, 必須同時對這三種語言有一定的認識.</p>
<h4>有關 html (html5) 請參考:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-3862-1">HTML5 Mastery</a></p>
<h4 style="padding-left: 30px;">假如要在網頁中嵌入 2D 物件, 請參考:</h4>
<p style="padding-left: 60px;"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API</a></p>
<h4 style="padding-left: 30px;">假如要在網頁中嵌入 3D 物件, 請參考:</h4>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-3997-0">Beginning WebGL for HTML5</a></p>
<h4>有關 css 請參考:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6294-8">Modern CSS</a></p>
<h4>有關 Javascript 請參考:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4395-4">Beginning Javascript</a></p>
<p>為了 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 靜態頁面功能表的簡潔性, 一般建議除了 Home 之外的 H1 標題, 不要超過 9 個. 若善用各分類的 H2 與 H3 子頁面分類至多 9 個子頁面, 9x9x9 合計可以容納 729 個頁面, 應該足以涵蓋中等網站的所有內容.</p>
<p><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a></p>
<p>目前的課程網站 cmsimde submodule 已經使用 mdecycu 帳號下的倉儲, 準備要將現有分別位於</p>
<p>get_page2, render_menu2, 以及 sitemap2 函式中, 如下圖所示:</p>
<p><img caption="false" class="add_border" height="189" src="/images/bootstrap_container_fluid.png" width="600"/></p>
<p>的 class='container-fluid' 改為 class='container', 根據 <a href="https://getbootstrap.com/docs/5.0/layout/containers/">bootstrap containers</a> 頁面的說明, 能夠將現有散佈在頁面 100% 的內容, 取用各不同尺寸螢幕的局部大小:</p>
<p><img alt="" class="add_border" height="254" src="/images/bootstrap_contener_table.png" width="600"/></p>
<h4>cmsimde Template:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a></p>
<h4>cmsimde submodule update:</h4>
<p style="padding-left: 30px;">使用 cmsimde 作為 submodule 的倉儲, 當發現 cmsimde 倉儲內容已經更新後, 若希望使用更新後的子模組內容, 則可以利用下列指令完成:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM 從倉儲更換目錄至 cmsimde
cd cmsimde
REM 利用 git 指令中的 pull, 從 origin 代號的網路連結, 取回 master 分支的內容, 在近端進行合併
git pull origin master
REM 回到原始倉儲目錄
cd ..
REM 利用 acp.bat 中的 git add, git commit 與 git push 將更新資料送到遠端 github 倉儲中
acp "update cmsimde submodule"</pre>
<h4>Are we living in a smart city (University, College, Department, Class, Group)?</h4>
<h4>我們生活在智慧城市或場域 (大學, 學院, 科系, 班級, 團隊) 嗎?</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/referencework/10.1007/978-3-030-69698-6">Handbook of Smart Cities</a></p>
<h4>CMSiMDE 引用 ASCII STL方法:</h4>
<p>將 ascii.stl 檔案上傳至 downloads 目錄後, 利用 File List 功能, 後列出 ascii.stl, 以滑鼠點擊會出現顯示 stl 檔案的頁面, 導入頁面時, 以 iframe 標註之 src 對應至顯示 stl 檔案的 html 連結即可, 例如:  &lt;iframe width="600" height="400" src=""&gt;&lt;/iframe&gt;</p>
<p>src 在動態網站中為 /static/viewstl.html?src=/downloads/spikeball.stl</p>
<p><iframe height="400" src="/static/viewstl.html?src=/downloads/spikeball.stl" width="600"></iframe></p><h3>Portable Python</h3>
<h4>何謂可攜式 Python 程式環境?</h4>
<h4 style="padding-left: 30px;">Python 程式是如何執行的?</h4>
<p style="padding-left: 30px;">首先 Python 是一種解譯式 (Interpreted) 程式語言, 與 C 或 C++ 程式語言最大的差別是, C/C++ 程式碼通常必須透過編譯 (Compile) 與連結 (Link) 的過程, 將原始碼轉為可執行的格式 (在 Windows 操作系統為 .exe 檔案), 而 Python 程式寫好後, 可以直接利用解譯器執行, 使用者不需要手動執行程式碼的編譯, 而是由解譯器在執行前即時將程式碼轉換為可執行檔案.</p>
<p style="padding-left: 30px;">在 <a href="https://www.geeksforgeeks.org/internal-working-of-python/">geeksforgeeks 網站</a>, 以下列敘述說明 Python 程式如何執行:</p>
<p style="padding-left: 30px;">Python is an object-oriented programming language like Java. Python is called an interpreted language. Python uses code modules that are interchangeable instead of a single long list of instructions that was standard for functional programming languages. The standard implementation of python is called "cpython". It is the default and widely used implementation of Python.</p>
<p style="padding-left: 30px;">Python doesn’t convert its code into machine code, something that hardware can understand. It actually converts it into something called byte code. So within python, compilation happens, but it’s just not into a machine language. It is into byte code (.pyc or .pyo) and this byte code can’t be understood by the CPU. So we need an interpreter called the python virtual machine to execute the byte codes</p>
<p style="padding-left: 30px;">針對 Python 程式的"編譯"過程, 則<a href="https://www.geeksforgeeks.org/understanding-the-execution-of-python-program/">說明如下</a>:</p>
<p style="padding-left: 30px;">The Python program is converted into byte code. Byte code is a fixed set of instructions that represent arithmetic, comparison, memory operations, etc. It can run on any operating system and hardware. The byte code instructions are created in the .pyc file. The .pyc file is not explicitly created as Python handles it internally but it can be viewed with the following command:</p>
<p style="padding-left: 60px;">Y:\tmp\python_ex&gt;python -m py_compile hello.py</p>
<p style="padding-left: 30px;">-m and py_compile represent module and module name respectively. This module is responsible to generate .pyc file. The compiler creates a directory named  __pycache__ where it stores the hello.cpython-39.pyc file (若採用 Python 3.9 版次的編譯器).</p>
<p style="padding-left: 30px;">至於針對 Python 程式的"解譯"執行過程, 則<a href="https://www.geeksforgeeks.org/understanding-the-execution-of-python-program/">說明如下</a>:</p>
<p style="padding-left: 30px;">The next step involves converting the byte code (.pyc file) into machine code. This step is necessary as the computer can understand only machine code (binary code). Python Virtual Machine (PVM) first understands the operating system and processor in the computer and then converts it into machine code. Further, these machine code instructions are executed by processor and the results are displayed.</p>
<p style="padding-left: 30px;">However, the interpreter inside the PVM translates the program line by line thereby consuming a lot of time. To overcome this, a compiler known as Just In Time (JIT) is added to PVM. JIT compiler improves the execution speed of the Python program. This compiler is not used in all Python environments like CPython which is standard Python software.</p>
<p style="padding-left: 30px;">To execute the hello.cpython-39.pyc we can use the following command:</p>
<p style="padding-left: 60px;">Y:\tmp\python_ex&gt;python __pycache__\hello.cpython-39.pyc</p>
<p style="padding-left: 30px;">至於有關 python.exe 與 pythonw.exe 的差別, 則參見<a href="https://stackoverflow.com/questions/9705982/pythonw-exe-or-python-exe">這裡的說明</a>. 至於 SciTE 設定 python.properties 中, 使用 pythonw.exe -u 表示除了採非同步 (asynchronous) 執行模式外, 同時 force the stdout and stderr streams to be unbuffered; but has no effect on stdin.</p>
<h4 style="padding-left: 30px;">Python 解譯器的類別:</h4>
<p style="padding-left: 30px;">最早的 Python 解譯器以 C 程式語言編寫, 稱為 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a>, 以 Python 編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/PyPy">Pypy</a>, 以 .NET 技術編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/IronPython">Ironpython</a>, 以 Java 編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/Jython">Jython</a>, 以 Javascript 編寫的 Python 解譯器稱為 <a href="https://brython.info/">Brython</a>. 以 Rust 編寫的 Python 解譯器稱為 <a href="https://github.com/RustPython/RustPython">RustPython</a>.</p>
<h4 style="padding-left: 30px;">建立可攜 Python 程式環境的目的:</h4>
<p style="padding-left: 30px;">一般在 Windows 10 中使用 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 都是透過操作系統安裝, 將 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯器登錄在操作系統的 <a href="https://en.wikipedia.org/wiki/Windows_Registry">Registry</a> 中. 只不過配置在操作系統的 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯器若在使用過程中, 透過 <a href="https://pypi.org/project/pip/">pip</a> 安裝額外的模組後, 當電腦輔助設計室中的電腦重新開機後, 操作系統將會因為安裝防寫套件而恢復原先所安裝無額外模組的狀態.</p>
<p style="padding-left: 30px;">網際內容管理與協同產品設計實習課程為了<span style="background-color: #ffff99;">讓使用者可以隨身帶著 <a href="https://en.wikipedia.org/wiki/CPython" style="background-color: #ffff99;">CPython</a> 解譯器</span>, 因此繞過 Windows 10 操作系統的 Registry 登錄, 設法以批次檔案在虛擬的硬碟 (y:) 啟動 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯環境.</p>
<p style="padding-left: 30px;">此外, 配置在 USB 隨身碟的可攜 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 程式環境, 除了可執行一般 Python 程式外, 也可自行安裝所需模組, 並用於 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 動態與靜態網站編輯.</p>
<p style="padding-left: 30px;">可攜程式環境中除 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a>, 還可配置 <a href="https://www.msys2.org/">MSYS2</a> C/C++ 編譯系統. 針對 <a href="https://www.scintilla.org/SciTE.html">SciTE</a>, <a href="https://github.com/solvespace/solvespace">Solvespace</a>, <a href="https://github.com/Range-Software/range3">Range3</a>, <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 等開源套件執行編譯.</p>
<h4>如何建立可攜 Python 程式環境?</h4>
<p style="padding-left: 30px;">能放入 USB 隨身碟執行的 Python 程式環境包含兩個部分:</p>
<p style="padding-left: 60px;">(1) Python 解譯器系統檔案</p>
<p style="padding-left: 60px;">(2) 可攜啟動設定批次檔 (例如: <a href="/downloads/start_ipv6.bat">start_ipv6.bat</a>)</p>
<p style="padding-left: 30px;">要在 Windows 操作系統中, 取得各版本的 Python 解譯器系統檔案, 也有兩種方法:</p>
<p style="padding-left: 60px;">(1) 從官方網站下載安裝檔 (例如: <a href="https://www.python.org/ftp/python/3.10.5/">3.10.5 版</a>的 <a href="https://www.python.org/ftp/python/3.10.5/python-3.10.5-amd64.exe">python-3.10.5-amd64.exe)</a>, 手動安裝 Python, 取下安裝內容後, 解除安裝程式.</p>
<p style="padding-left: 60px;">(2) 利用 <a href="/downloads/gen_portable_python.py">gen_portable_python.py</a>, 從 Python 官方網站下載基本的 .msi 檔案 (例如 <a href="https://www.python.org/ftp/python/3.10.5/amd64/">3.10.5 版</a>中的 core.msi, dev.msi, exe.msi, lib.msi, tcltk.msi 與 tools.msi), 然後利用 <a href="https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/msiexec">msiexec.exe</a> 配合 <a href="https://docs.microsoft.com/zh-tw/windows/win32/msi/targetdir">targetdir</a> 屬性解開各安裝檔.</p>
<p id="pp310">以下將要結合 <a href="https://www.scintilla.org/SciTE.html">SciTE</a>, <a href="https://github.com/TinyCC/tinycc">Tiny C Compiler</a> 與 <a href="https://www.python.org/ftp/python/3.10.5/">Python 3.10.5</a>, 建立一個可攜版的 CPython 與 <a href="https://en.wikipedia.org/wiki/ANSI_C">ANSI C</a> 執行環境.</p>
<ol>
<li>從 <a href="http://download.savannah.gnu.org/releases/tinycc/">http://download.savannah.gnu.org/releases/tinycc/</a> 下載 <a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27-win64-bin.zip">tcc-0.9.27-win64-bin.zip</a>.</li>
<li>從 <a href="https://www.scintilla.org/SciTEDownload.html">https://www.scintilla.org/SciTEDownload.html</a> 下載 <a href="https://www.scintilla.org/wscite521.zip">wscite521.zip</a>.</li>
<li>利用 Python 3.9.5 (或先前的 Python3 舊版可攜程式) 執行 <a href="/downloads/gen_portable_python.py">gen_portable_python.py</a> 取得 Python310 解譯器系統檔案.</li>
<li>根據上述流程建立的基本 Python 與 ANSI C 可攜程式系統 <a href="http://wcm.cycu.org:88/Portable_py310_tcc.7z">Portable_py310_tcc.7z</a> (只能在系網路 下載, 此一 Python 解譯器只帶有基本模組且尚未安裝 <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwiywaDasrb2AhX7rVYBHbSJCcoQFnoECAoQAQ&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">get-pip.py</a>)</li>
<li>此一 Python 解譯器以 python <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwigkdK1s7b2AhUBs1YBHYhXA8oQFnoECAcQAQ&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">get-pip.py</a> 安裝 pip 後, 再以 pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl 安裝 <a href="https://mde.tw/cmstemplate/content/CMSiMDE.html">cmsimde 所需模組</a>後, 即可用於 wcm2022 動態與靜態系統的編輯.</li>
<li>此一 Python 解譯器再結合 <a href="https://git-scm.com/download/win">Portablegit</a> 與 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>, 就可以支援以 <a href="https://mde.tw/wcm2022_guide/content/Token%20and%20SSH.html">SSH</a> 執行 github 倉儲的 git push.</li>
</ol>
<h4>如何建立網際 Python 程式環境 (Brython)?</h4>
<p style="padding-left: 30px;">例如: <a href="https://mde.tw/cp2022/content/Brython.html">Brython</a> 頁面.</p>
<p>從 <a href="https://drive.google.com/file/d/1TMPsHz6G01-pxkvXf9NFM8nFdtCHQv8D/view?usp=sharing">portable_python_wcm2022.7z</a> 下載的可攜程式環境有哪些功能?</p>
<p><span style="background-color: #ffff99;">請注意: 以下的 .7z 檔案下載, 只允許在系上網段上下載</span>.</p>
<ol>
<li><a href="http://wcm.cycu.org:88/compile_copsim_cd2022.7z">compile_copsim_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB, 包含除了 NX1980 之外的所有課程相關可攜程式套件, 是專門為 <a href="http://wcm.cycu.org:88/github/cd2022_guide/content/index.html">cd2022</a> 課程學員打造的套件).</li>
<li><a href="http://wcm.cycu.org:88/portable_python_wcm2022.7z">portable_python_wcm2022.7z</a> (file size: 513 MB, extracted size: 2.3 G, 這是專門為 <a href="https://mde.tw/wcm2022http://wcm.cycu.org:88/github/wcm2022_guide/content/index.html">wcm2022</a> 課程打造的可攜程式套件, 適合選修學員下載後在任何 Windows 10 中以隨身碟啟動後操作)</li>
<li><a href="http://wcm.cycu.org:88/drive.7z">drive.7z</a> (file size: 2.6 MB, extracted size: 10 MB, 只包含 PUTTY, tcc, wscite 與 tmp 目錄, 採用 Hybrid 方式設定, 可與目前電腦輔助設計室中 SSD 硬碟所安裝的 Python 3.9.5 與 <a href="https://git-scm.com/download/win">Portablegit</a> 結合, 使用者只需自行設定啟動後的 home_ipv6 目錄與 home_ipv6/Desktop 目錄後即可以最輕薄便捷的方式將 SSH key 存入隨身碟, 並將個人與分組倉儲存入隨身碟啟動後的 tmp 目錄進行操作).</li>
</ol>
<p>以下利用 Wink3 影片說明以 Hybrid 方式啟動的 USB 隨身碟如何建立? 以及使用上與完整 USB 隨身碟可攜程式系統的差別:</p>
<p>Hybrid 可攜程式系統是只將必要檔案配置到 USB 隨身碟, 其餘檔案則使用已經存在電腦上的內容, 主要包含 Python 3.9.5 解譯程式 (863 MB) 與 Portblegit 2.31.1 (285 MB).</p>
<p>Hybrid 可攜程式系統優點:</p>
<ol>
<li>初始 USB 隨身碟只需複製 10.5 MB 的資料 (只自帶 PUTTY (4.3 MB), tcc (1.7 MB), tmp 與 wscite (4.3 MB)).</li>
<li>使用電腦 SSD 上所安裝的 Python 與 Portablegit, 執行速度會比一般 USB 隨身碟快.</li>
</ol>
<p>Hybrid 可攜程式系統缺點:</p>
<ol>
<li>在未修改 Python Script 目錄中的 .exe 可執行檔之前, 必須透過 .py 執行, 例如: 命令列 中輸入 leo 並無法執行執行, 必須採用 import leo.core.runLeo;leo.core.runLeo.run()</li>
<li>若在裝有還原卡的電腦, 未修改 Python 系統模組路徑之前, 所安裝的額外模組無法放入 USB 隨身碟中.</li>
</ol>
<h3>Token and SSH</h3>
<p>Remote Desktop - Windows, Ubuntu, Mac</p>
<h4 id="token">Token:</h4>
<p style="padding-left: 30px;"><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>
<p style="padding-left: 30px;">Github token 是一串可以用來替代 Github 帳號與密碼功能的字串, 可在登入 Github 帳號後, 至 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> 設定. 每一個 token 都具備有效時間與權限範圍, 一般初學者可以只勾選 Token 的 repo 改版權限, 並選擇 30 天的有效時間. 之後再設法改用 SSH 對 Github 倉儲改版.</p>
<p>以下影片說明如何使用 Personal Access Token 執行 git push:</p>
<p></p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData1" height="630" muted="true" width="1008">
<source src="/downloads/token_wink/github_token.mp4" type="video/mp4"/></video>
<h4 id="ssh">SSH:</h4>
<p style="padding-left: 30px;"><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">https://docs.github.com/en/authentication/connecting-to-github-with-ssh</a></p>
<p style="padding-left: 30px;">Windows 10 環境中的 SSH 可以透過 <a href="https://www.putty.org/">https://www.putty.org/</a> 執行設定.</p>
<p style="padding-left: 30px;">puttygen.exe 可用來建立 OpenSSL 格式的數位簽章, public key 送到使用者 Github 帳號下 settings 中的 SSH and GPG keys 區, 在隨身碟中則存放與 public key 成對的 Putty 格式 private key.</p>
<p style="padding-left: 30px;">使用者在 Windows 10 使用 git + putty 時, 必須在啟動隨身系統時設定 GIT_SSH 變數 (<a href="https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables">Git 環境變數</a>) 至 putty 中的 plink.exe, 之後再利用 putty 設定連至 github.com 用的 session, 且在純 IPv6 環境中, 連至 github.com 的 session 除了必須指向隨身碟中的 private key 外, 還需要設定能同時支援 IPv6 與 IPv4 的 proxy server.</p>
<p style="padding-left: 30px;">使用者希望透過 SSH 對 github 中的倉儲改版時, 必須使用 <a href="mailto:git@session_name:github_account/repository.git">git@session_name:github_account/repository.git</a> 連線.</p>
<p style="padding-left: 30px;">有關 GIT_SSH 變數：</p>
<p style="padding-left: 60px;">GIT_SSH, if specified, is a program that is invoked instead of ssh when Git tries to connect to an SSH host. It is invoked like $GIT_SSH [username@]host [-p &lt;port&gt;] &lt;command&gt;. Note that this isn’t the easiest way to customize how ssh is invoked; it won’t support extra command-line parameters, so you’d have to write a wrapper script and set GIT_SSH to point to it. It’s probably easier just to use the ~/.ssh/config file for that.</p>
<p>以下影片說明如何在 Windows IPv6 環境下, 利用 PUTTY 以 SSH 協定執行 git push:</p>
<p></p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/ssh_wink/wink_ssh.mp4" type="video/mp4"/></video></div>
</div>
<h3>Bootstrap</h3>
<p>cmsimde 頁面 layout 採用 Bootstrap 4.0 進行配置.</p>
<p><a href="https://getbootstrap.com/">https://getbootstrap.com/</a></p>
<h4>cmsimde page:</h4>
<p style="padding-left: 30px;">head banner</p>
<p style="padding-left: 30px;">search form</p>
<p style="padding-left: 30px;">page navigator</p>
<p style="padding-left: 30px;">page content</p>
<p style="padding-left: 30px;">pelican blog</p>
<p style="padding-left: 30px;">reveal</p>
<h4>Bootstrap editor:</h4>
<p style="padding-left: 30px;"><a href="https://www.layoutit.com/">https://www.layoutit.com/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/Vegetam/BootstrapPageGenerator">https://github.com/Vegetam/BootstrapPageGenerator</a></p>
<h4>Flask and Bootstrap:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mbr/flask-bootstrap">https://github.com/mbr/flask-bootstrap</a></p>
<p style="padding-left: 30px;"><a href="https://www.techwithtim.net/tutorials/flask/adding-bootstrap/">https://www.techwithtim.net/tutorials/flask/adding-bootstrap/</a></p>
<p style="padding-left: 30px;"><a href="https://pythonhosted.org/Flask-Bootstrap/basic-usage.html">https://pythonhosted.org/Flask-Bootstrap/basic-usage.html</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/MashSoftware/flask-bootstrap-ui">https://github.com/MashSoftware/flask-bootstrap-ui</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/hfilimonescu/flask-bs4">https://github.com/hfilimonescu/flask-bs4</a></p><h3>Bugs</h3>
<p>靜態網頁在 Brython 頁面無法執行關鍵字搜尋.</p>
<h3>Frameworks</h3>
<p>目前 cmsimde 採用 Flask, 以下為其他相關 Frameworks:</p>
<h4>fastapi</h4>
<p><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></p>
<h4>starlette</h4>
<p><a href="https://www.starlette.io/">https://www.starlette.io/</a></p><h2>Problem solving</h2>
<p><a href="https://math.berkeley.edu/~gmelvin/polya.pdf">Polya’s Problem Solving Techniques</a></p>
<p><a href="https://courses.cs.washington.edu/courses/cse190d/17sp/materials/GDFPSP-ch1-3.pdf">Game Design for Problem Solving with Python</a></p>
<h4>問題一:</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw">https://mde.tw</a> 網站的靜態網頁個數目前共有 79 頁, 其中, 只有 <a href="https://mde.tw/content/cp2022.html">cp2022</a> 與 <a href="https://mde.tw/content/cad2022.html">cad2022</a> 等兩個頁面置入 <a href="https://disqus.com/">Disqus</a> 討論版的程式連結.</p>
<p style="padding-left: 30px;">已知納入動態網頁中的 Disqus 程式碼為 <a href="/downloads/disqus_mdetw_scripts.txt">disqus_mdetw_scripts.txt</a>, 請問若要在 <a href="https://mde.tw">https://mde.tw</a> 各頁面中都加入此段程式碼, 該如何進行?</p>
<p style="padding-left: 30px;">提示:</p>
<p style="padding-left: 60px;">分別將 Disqus 程式碼, 在編輯階段納入頁面超文件內容?</p>
<p style="padding-left: 60px;">了解 <a href="https://mde.tw">https://mde.tw</a> 建立動態網頁與靜態網頁的架構, 以程式方法將 Disqus 程式碼加入所有頁面中?</p>
<p style="padding-left: 60px;">直接透過程式方法, 讓 <a href="https://mde.tw">https://mde.tw</a> 在產生動態與靜態網頁時, 自動附加特定的 Disqus 程式碼討論串?</p>
<h4>問題二:</h4>
<p style="padding-left: 30px;">如何從學校教務主機取出有用資料?</p>
<div>
<p style="padding-left: 30px;"><a href="https://nfu.cycu.org/?semester=1111&amp;courseno=0747&amp;column=True" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://nfu.cycu.org/?semester=1111&amp;courseno=0747&amp;column=true">1a 計算機程式修課學員名單</a> (取自教務主機)</p>
<p style="padding-left: 30px;"><a href="https://nfu.cycu.org/?semester=1111&amp;courseno=0761&amp;column=True" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://nfu.cycu.org/?semester=1111&amp;courseno=0761&amp;column=true">1b 計算機程式修課學員名單</a> (取自教務主機)</p>
</div>
<h4>問題三:</h4>
<p style="padding-left: 30px;">在機電產品開發過程中, 設計者該如何在各種成本 (costs) 約束條件中, 找到最佳的設計組合?</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4471-2748-2">Mechanical Design Optimization Using Advanced Optimization Techniques</a> (2012)</p>
<p></p>
<p style="padding-left: 60px;"></p><h2>Programming</h2>
<p><a href="https://link.springer.com/book/10.1007/978-3-7091-1343-1">Introduction to Programming Concepts with Case Studies in Python</a> (2012)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-2172-3">Learn to Program with Python</a> (2016)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-0028-5">Beginning Python</a> (2017)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3879-0">Learn to Program with Python 3</a> (2018)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3378-8">Python Graphics</a> (2018)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4504-0">PowerShell and Python Together</a> (2019)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6339-6">Foundation Dynamic Web Pages with Python</a> (2020)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-81885-2">Algorithms on Trees and Graphs</a> (2021)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4281-0">Python Continuous Integration and Delivery</a> (2019)</p>
<h3>Computer</h3>
<p><a href="https://en.wikipedia.org/wiki/Computer">https://en.wikipedia.org/wiki/Computer</a></p>
<h3>Program</h3>
<p><a href="https://en.wikipedia.org/wiki/Computer_program">https://en.wikipedia.org/wiki/Computer_program</a></p>
<h3>Python</h3>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script><h3>ANSIC</h3>
<p>Based on <a href="https://study.com/academy/lesson/ansi-c-history-formation-structure.html">study.com</a>: The C programming language was developed in the <a href="https://en.wikipedia.org/wiki/Bell_Labs">Bell Labs</a> of AT&amp;T by an employee called <a href="https://en.wikipedia.org/wiki/Dennis_Ritchie">Dennis Ritchie</a> between 1969 and 1973 while working on Unix operating system. He created this language using <a href="https://en.wikipedia.org/wiki/ALGOL">ALGOL</a>, <a href="https://en.wikipedia.org/wiki/BCPL">BCPL</a>, and <a href="https://en.wikipedia.org/wiki/B_(programming_language)">B</a> the languages that were used before C was created. He added many powerful features to C and used it to further develop the <a href="https://en.wikipedia.org/wiki/Unix">UNIX</a> operating system. <a href="https://en.wikipedia.org/wiki/American_National_Standards_Institute">American National Standards Institute</a> (ANSI) in 1983, formed a committee to provide a comprehensive definition to the C language and thus came into existence the new ANSI C language with better features.</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4612-1484-7">C Programming</a> (1999)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-50750-3">Computer Programming in C for Beginners</a> (2020)</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// Our first program
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main()
{
    printf("Hello world!\n");
    return 0;
}</pre>
<p><a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EXxz57GzrnBKmnniJvffmoABCDC_cUCbqlTa4cx29dC_UA?e=iCaVgk">cp2022_ANSIC_w_tinyc_scite.7z</a> (for cp2022 @gm users only) / <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EU0vRPRqlYlEgS4rJzcAq-0BDP2Lac2WfJl9dSAz2UEkgA?e=uo0n6a">cp2022_ANSIC_w_tinyc_scite.7z for @nfu</a></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// from https://stackoverflow.com/questions/6127503/shuffle-array-in-c
#include &lt;stdio.h&gt; //for printf()
#include &lt;stdlib.h&gt; //for srand() and rand()
#include &lt;time.h&gt; //for time()
#include &lt;memory.h&gt; //for memcpy()
// 作業, 請計算各數值在各位數出現的總數, 是否依照亂數機率出現?
// 作業, 請將此程式改用 Brython 編寫.

void main ()
{
    int elesize = sizeof (int);
    int i;
    int j;
    int r;
    int num = 10;
    int times = 50;
    int src [num];
    int tgt [num];
    
    srand ( (unsigned int) time (0) );
    
    for (j = 0; j &lt; times; j++)
    {
        for (i = 0; i &lt; num; src [i] = i++);
        
        for (i = num; i &gt; 0; i --)
        {
            r = rand () % i;
            memcpy (&amp;tgt [num - i], &amp;src [r], elesize);
            memcpy (&amp;src [r], &amp;src [i - 1], elesize);
        }
        
        for (i = 0; i &lt; num; printf ("%d ", tgt [i++] ) );
        printf("\n");
    }
}</pre>
<p>利用 <a href="https://en.wikipedia.org/wiki/Differential_evolution">Differential Evoluation</a> (差分進化演算法), 以 <a href="https://en.wikipedia.org/wiki/ANSI_C">ANSI C</a> 程式語言編寫適應方程式的最大化或最小化演算:</p>
<p style="padding-left: 30px;"><a href="/downloads/volume_in_de_ex1.c">volume_in_de_ex1.c</a></p>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66">其他範例程式</a></p>
<p style="padding-left: 30px;">相同演算法, 以 CPython 解題:</p>
<p style="padding-left: 60px;"><a href="/downloads/volume_in_de_ex1.py">volume_in_de_ex1.py</a></p>
<p style="padding-left: 30px;">相同演算法, <a href="https://mde.tw/cp2022/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66/raw/ccdea7b056702bcf06ed24c7407a43e0a1aacdbc/volume_in_de_ex1.py">以 Brython 解題</a>.</p>
<p style="padding-left: 30px;">此一採<a href="https://www.analyzemath.com/calculus/Problems/maximum_volume_problem.html">固定表面積的紙盒體積最大化</a>運算範例, <a href="/downloads/volume_in_de_ex1.py">volume_in_de_ex1.py</a> 的原始作者為<a href="https://hdl.handle.net/11296/tur9hu">李孟恭</a> (<a href="https://github.com/kmollee/algorithm/blob/master/de.py">https://github.com/kmollee/algorithm/blob/master/de.py</a>)</p>
<p>從 <a href="https://github.com/Akagi201/lw_oopc/blob/master/doc/%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D.md">lw-oopc 的簡介</a> 以及<a href="https://github.com/Akagi201/lw_oopc">升級版 lw-oopc 原始碼</a>中, 則可以進一步對 ANSI C 在嵌入式 (embedded) 系統上的應用有所了解.</p>
<p style="padding-left: 60px;"></p><h3>Rust</h3>
<p>Fornjot is an early-stage project to create a next-generation, code-first CAD application.</p>
<p style="padding-left: 30px;"><a href="https://www.fornjot.app/">https://www.fornjot.app/</a></p>
<p>Based on <a href="https://en.wikipedia.org/wiki/Rust_(programming_language)">Wikipedia</a>: Rust is a multi-paradigm, general-purpose programming language. Rust emphasizes performance, type safety, and concurrency. Rust enforces memory safety—that is, that all references point to valid memory—without requiring the use of a garbage collector or reference counting present in other memory-safe languages.  To simultaneously enforce memory safety and prevent concurrent data races, Rust's borrow checker tracks the object lifetime and variable scope of all references in a program during compilation. Rust is popular for systems programming but also offers high-level features including functional programming constructs.<br/><br/>Software developer <a href="https://github.com/graydon">Graydon Hoare</a> (<a href="https://www.reddit.com/r/rust/comments/7qels2/i_wonder_why_graydon_hoare_the_author_of_rust/">comment</a> made on 2018.01.16) designed Rust while working at Mozilla Research in 2006.  Mozilla officially sponsored the project in 2009, and the designers refined the language while writing the Servo experimental browser engine and the Rust compiler. Rust's major influences include <a href="https://en.wikipedia.org/wiki/Standard_ML">SML</a>, <a href="https://en.wikipedia.org/wiki/OCaml">OCaml</a>, <a href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>, <a href="https://en.wikipedia.org/wiki/Cyclone_(programming_language)">Cyclone</a>, <a href="https://en.wikipedia.org/wiki/Haskell">Haskell</a>, and <a href="https://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a>. Since the first stable release in January 2014, Rust has been adopted by companies including Amazon, Discord, Dropbox, Facebook (Meta), Google (Alphabet), and Microsoft.<br/><br/>Rust has been noted for its growth as a newer language and has been the subject of academic programming languages research. </p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7208-4">Beginning Rust</a> (2022)</p>
<p><a href="https://course.rs/about-book.html">https://course.rs/about-book.html</a> (Rust 語言聖經) - <a href="https://github.com/sunface/rust-course">https://github.com/sunface/rust-course</a></p>
<p><a href="https://export.arxiv.org/ftp/arxiv/papers/2206/2206.05503.pdf">Rust: The Programming Language for Safety and Performance</a> (<a href="/downloads/Rust -The Programming Language for Safety and Performance.pdf">local</a>)</p>
<p style="padding-left: 30px;">Even though this study was not comprehensive (and more work must be done in this area), it informs the programming and research communities on the promising features of Rust as the language of choice for the future.</p>
<p style="padding-left: 30px;">Rust is a systems programming language meant to supersede languages like C++. The main<br/>focus of Rust is (memory) safety, but it later began to target performance as well, adopting the<br/>C++ approach of zero cost abstraction.</p>
<p><a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a></p>
<p><a href="https://github.com/rust-lang/book">https://github.com/rust-lang/book</a></p>
<p><a href="https://github.com/cmsc388z/lectures">https://github.com/cmsc388z/lectures</a></p>
<p><a href="https://www.ralfj.de/projects/rust-101/">https://www.ralfj.de/projects/rust-101/</a></p>
<p><a href="https://github.com/rust-lang/mdBook">https://github.com/rust-lang/mdBook</a></p>
<p><a href="https://github.com/rust-lang/miri">https://github.com/rust-lang/miri</a></p>
<p><a href="https://github.com/lowenware/dotrix">https://github.com/lowenware/dotrix</a> (3D engine)</p>
<h3>Carbon</h3>
<p><a href="https://en.wikipedia.org/wiki/Carbon_(programming_language)">Carbon 語言</a>是 Google 開發希望能夠取代 C++ 的程式語言.</p>
<p><a href="https://github.com/carbon-language/carbon-lang">https://github.com/carbon-language/carbon-lang</a></p>
<p><a href="https://github.com/carbon-language/carbon-lang/blob/trunk/README.md">https://github.com/carbon-language/carbon-lang/blob/trunk/README.md</a></p>
<p><a href="https://tipseason.com/carbon-language-tutorial-syntax/">https://tipseason.com/carbon-language-tutorial-syntax/</a></p>
<p><a href="https://blog.logrocket.com/exploring-carbon-new-superset-c-plus-plus/">https://blog.logrocket.com/exploring-carbon-new-superset-c-plus-plus/</a></p><h2>TCExam</h2>
<p><a href="https://tcexam.org/">https://tcexam.org/</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7141-4">PHP 8 Solutions</a> (2022)</p>
<p><a href="https://netcorecloud.com/tutorials/send-an-email-via-gmail-smtp-server-using-php/">https://netcorecloud.com/tutorials/send-an-email-via-gmail-smtp-server-using-php/</a></p>
<p><a href="https://phppot.com/php/send-email-in-php-using-gmail-smtp/">https://phppot.com/php/send-email-in-php-using-gmail-smtp/</a></p>
<p style="padding-left: 30px;"><a href="https://myaccount.google.com/security">https://myaccount.google.com/security</a></p>
<p style="padding-left: 30px;">Google has decided to begin phasing out Less Secure Apps from May 30th, 2022. Google Workspace and Google Cloud Identity users won’t be affected right away, but support for Less Secure Apps will still be phased out for those users at a later date.</p>
<p style="padding-left: 30px;"><a href="https://support.google.com/accounts/answer/185839" rel="nofollow noopener" target="_blank">turn on two factor authentication for your Google account</a></p>
<p style="padding-left: 30px;"><a href="https://phppot.com/php/sending-email-using-phpmailer-with-gmail-xoauth2/">https://phppot.com/php/sending-email-using-phpmailer-with-gmail-xoauth2/</a></p>
<p style="padding-left: 30px;"><a href="https://stackoverflow.com/questions/22335574/phpmailer-send-email-using-gmail-oauth2">https://stackoverflow.com/questions/22335574/phpmailer-send-email-using-gmail-oauth2</a></p>
<p style="padding-left: 30px;"><a href="https://matters.news/@johnny5610j6/253533-php-mailer%E7%99%BC%E4%BF%A1-%E9%AB%98%E5%AE%89%E5%85%A8%E6%80%A7%E6%A8%A1%E5%BC%8F-oauth2-bafyreigrdtdyww6ua6xf6q3hpxk4mmzfeka3pl3xb4tkkhbivf2d7aszd4">PHPMailer with Oauth2</a><br/>   </p>
<h3>sendmail</h3>
<p><a href="https://tcexam.org/">https://tcexam.org/</a> 線上考試系統允許使用者自行建立帳號, 並選擇參與特定 Group (即與帳號對應的課程, 若同時選擇多個 CYCU 所開設的線上考試課程, 則必須在建立帳號時參與多個 Groups).</p>
<p>當使用者忘記註冊時所選用的密碼時, 原系統允許使用者透過所登錄的 email 收信, 以便重新設定密碼.</p>
<p>但此一 sendmail 必須由 php 程式配合 php.ini 進行設定. 先前 Gmail 帳號允許使用較低權限的設定進行 sendmail, 但此功能已經從一般 Gmail 帳號中移除. 而目前仍保留降低 Gmail 權限的功能僅限 Workspace 的用戶 (即先前的 GSuite 用戶), 但隨後 Google 也已經宣布將逐一移除此項功能.</p>
<p>因應 Google 此項變更, 預計在 2022 Fall 或仍可使用 Google Workspace 下的帳號進行送信 (例如: mde.nfu.edu.tw 或 eng.nfu.edu.tw), 但最終還是必須透過 Gmail API 進行程式化的 sendmail.</p>
<p></p>
<h2>Three.js</h2>
<p><a href="https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene">https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene</a></p>
<p><a href="https://riptutorial.com/Download/three-js.pdf">https://riptutorial.com/Download/three-js.pdf</a></p>
<p><a href="https://github.com/josdirksen/learning-threejs-third">https://github.com/josdirksen/learning-threejs-third</a></p>
<p><a href="https://www.jotform.com/blog/20-exceptional-three-js-experiments-98740/">https://www.jotform.com/blog/20-exceptional-three-js-experiments-98740/</a></p>
<p><iframe frameborder="0" height="600" src="/downloads/threejs_ex/index.html" width="600"></iframe></p>
<p><iframe frameborder="0" height="600" src="/downloads/threejs_ex/asm.html" width="600"></iframe></p>
<!-- 先定義 id 為 threejs 的 canvas -->
<p><canvas id="threejs"></canvas></p>
<!-- 從 downloads 目錄下導入 three.min.js 程式庫 -->
<p>
<script src="/downloads/three.min.js"></script>
</p>
<!-- 以下直接利用 three.js 在 id 為 threejs 的 canvas 上建立 3D 場景 -->
<p>
<script>
const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
    // create a canvas by id
    const canvas = document.getElementById('threejs');
    // create a renderer in the canvas
    const renderer = new THREE.WebGLRenderer({canvas: canvas});
    // set renderer size
    renderer.setSize(window.innerWidth/3, window.innerHeight/3);
    // create a box geometry
    const geometry = new THREE.BoxGeometry( 2, 2, 2 );
    // create material
    const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
    // create a cube with material 
    const cube = new THREE.Mesh( geometry, material );
    // add the cube to the scene
    scene.add( cube );
    // set camera position
    camera.position.z = 5;

    function animate() {
        requestAnimationFrame( animate );

        cube.rotation.x += 0.01;
        cube.rotation.y += 0.01;
        // call the render function
        renderer.render( scene, camera );
    };

    animate();
</script>
</p>
<p><iframe height="600" src="https://threejs.org/docs/scenes/geometry-browser.html" width="800"></iframe></p>
<h2>ffmepg</h2>
<p>FFmpeg 手冊: <a href="http://ffmpeg.org/ffmpeg.html">http://ffmpeg.org/ffmpeg.html</a></p>
<h4>擷取 mp4 片段檔案</h4>
<p>從 origin.mp4 影片中的第一秒開始, 切出 15 分鐘的影片, 存為 new.mp4</p>
<p style="padding-left: 30px;">ffmpeg -i origin.mp4 -ss 00:00:01 -t 00:15:00 -async 1 new.mp4</p>
<h4>刪除影片中的聲音資料</h4>
<p style="padding-left: 30px;">ffmpeg -i origin.mp4 -c copy -an new.mp4</p>
<p>合併 mp4 檔案</p>
<p>建立 allmp4.txt 內容為<br/>file '/path/to/1.mp4'<br/>file '/path/to/2.mp4'<br/>file '/path/to/3.mp4'</p>
<p>將 1.mp4, 2.mp4 與 3.mp4 合併為 new.mp4</p>
<p style="padding-left: 30px;">ffmpeg -f concat -i allmp4.txt -c copy new.mp4</p>
<h4>影片中加入字幕</h4>
<p>利用 <a href="http://www.aegisub.org/">http://www.aegisub.org/</a> 可攜版本工具加入字幕</p>
<p>直接將 input.srt 字幕資料 burn 入 input.mp4</p>
<p style="padding-left: 30px;">ffmpeg -i input.mp4 -vf subtitles=input.srt output.mp4</p>
<h4>影片畫面中座標 x=5, y=950 位置中加入圖檔</h4>
<h4 style="padding-left: 30px;"><img alt="" height="30" src="/images/kmol_102x30_color.png" width="102"/></h4>
<p style="padding-left: 30px;">ffmpeg -i input.mp4 -i kmol_102x30_color.png -filter_complex "overlay=5:950" output.mp4</p>
<h4>其他圖形化工具:</h4>
<p style="padding-left: 30px;"><a href="http://www.aegisub.org/">http://www.aegisub.org/</a> (Font: SimSun, Size: 40, Bold, Primary, Color (255, 200, 5))</p>
<p style="padding-left: 30px;"><a href="http://www.avidemux.org/nightly/win64_support/">http://www.avidemux.org/nightly/win64_support/</a> (建立使用 2.6.21 版本, 可與 aegisub 配合使用)</p>
<p style="padding-left: 30px;"><a href="https://www.openshot.org/">https://www.openshot.org/</a> (必須分段輸入字幕, 無法與 aegisub 配合使用)</p><h2>Pandoc</h2>
<p><a href="https://pandoc.org/">https://pandoc.org/</a></p>
<p>cmsimde -&gt; LaTex -&gt; Github Actions -&gt; PDF</p>
<p><a href="https://github.com/mdecycu/4072pj1">https://github.com/mdecycu/4072pj1</a></p>
<p><a href="https://github.com/mdecycu/pj4082">https://github.com/mdecycu/pj4082</a></p>
<p><a href="https://stackoverflow.com/questions/52396579/can-i-convert-github-pages-with-jekyll-to-pdf">https://stackoverflow.com/questions/52396579/can-i-convert-github-pages-with-jekyll-to-pdf</a></p>
<p><a href="https://github.com/topics/html-to-pdf">https://github.com/topics/html-to-pdf</a></p>
<p><a href="https://github.com/chiamingyen/sphinxBook">https://github.com/chiamingyen/sphinxBook</a></p><h2>VSCode</h2>
<h4>EBooks:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6901-5">Visual Studio Code Distilled </a>(2021)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-7344-9">Optimizing Visual Studio Code for Python Development</a> (2021)</p>
<h4>Portable mode of Visual Studio Code:</h4>
<p style="padding-left: 30px;"><a href="https://code.visualstudio.com/docs/editor/portable">https://code.visualstudio.com/docs/editor/portable</a> (338 MB)</p>
<p style="padding-left: 30px;">Download .zip file and add a data directory to enable the Portable mode of VSCode.</p>
<h4>Leo for VSCode:</h4>
<p style="padding-left: 30px;"><a href="https://marketplace.visualstudio.com/items?itemName=boltex.leointeg">https://marketplace.visualstudio.com/items?itemName=boltex.leointeg</a></p>
<p></p><h2>Powershell</h2>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4504-0">PowerShell and Python Together</a> (2019)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7064-6">PowerShell for Beginner</a> (2021)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7759-1">PowerShell Fast Track</a> (2022)</p>
<p><a href="https://www.servertribe.com/difference-between-cmd-vs-powershell-vs-bash/">https://www.servertribe.com/difference-between-cmd-vs-powershell-vs-bash/</a></p>
<p><a href="https://stackoverflow.com/questions/44032838/are-all-cmd-commands-available-within-powershell">https://stackoverflow.com/questions/44032838/are-all-cmd-commands-available-within-powershell</a></p>
<h2>Blockchain</h2>
<p><a href="https://link.springer.com/book/10.1007/978-981-19-1488-1">Blockchain Technology</a></p>
<h1>Brython</h1>
<p><img alt="" height="560" src="/images/local_cloud_server.drawio.png" style="display: block; margin-left: auto; margin-right: auto;" width="500"/></p>
<p style="text-align: center;">local and cloud server collaborative design</p>
<p style="text-align: left;"><img caption="false" height="300" src="/images/pc_client_content.drawio.png" style="display: block; margin-left: auto; margin-right: auto;" width="300"/></p>
<p style="text-align: center;">PC Client 內容</p>
<p style="text-align: center;"><img alt="" height="300" src="/images/win_server.drawio.png" width="300"/></p>
<p style="text-align: center;">Win Server 內容</p>
<p><a href="https://groups.google.com/g/brython">Brython at Google Groups</a></p>
<p>請利用 Chrome 或 Edges 開啟 <a href="https://sim.firialabs.com/">https://sim.firialabs.com/</a>, 研究一下此類程式是如何建構的?</p>
<p style="padding-left: 30px;"><a href="https://microsoft.github.io/monaco-editor/">https://microsoft.github.io/monaco-editor/</a> </p>
<p style="padding-left: 30px;">License: <a href="https://sim.firialabs.com/static/js/2.5a0286f3.chunk.js.LICENSE.txt">https://sim.firialabs.com/static/js/2.5a0286f3.chunk.js.LICENSE.txt</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/facebook/react">https://github.com/facebook/react</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jonschlinkert/repeat-string">https://github.com/jonschlinkert/repeat-string</a></p>
<p style="padding-left: 60px;"><a href="https://lodash.com/">https://lodash.com/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/cssinjs/jss">https://github.com/cssinjs/jss</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/PrismJS/prism">https://github.com/PrismJS/prism</a></p>
<p style="padding-left: 60px;"><a href="https://gist.github.com/FezVrasta/76f51d521cc42099a78ca46be593ba90">https://gist.github.com/FezVrasta/76f51d521cc42099a78ca46be593ba90</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-319-14240-1">The Python Workbook</a> (2014) - 程式練習題</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6812-4">Introduction to Python for Kids</a> (2021) - Turtle graphics</p>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China#Construction_details">ROC 國旗規格</a> <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%97%97#%E8%A7%84%E6%A0%BC">PROC 國旗規格</a> <a href="https://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications">USA 國旗規格</a></p>
<p><a href="https://gist.github.com/mdecourse/05930b1775b77293523b59b1bbb43e57">Gist Brython scripts</a></p>
<p><a href="https://www.arc.id.au/CanvasGraphics.html">Cango</a></p>
<p><a href="/downloads/turtle.py.txt">turtle.py</a></p>
<p><a href="/downloads/turtle_graphics.pdf">turtle_graphics.pdf</a> (<a href="https://www.cs.auckland.ac.nz/compsci111ssc/lectures/LectureSlides/L25_Python3.pdf">source</a>)</p>
<p><a href="/downloads/turtle_graphics_2.pdf">turtle_graphics_2.pdf</a> (<a href="https://eecs.wsu.edu/~schneidj/PyBook/chap13.pdf">source</a>)</p>
<p><a href="/downloads/turtle_graphics_3.pdf">turtle_graphics_3.pdf</a> (<a href="https://www.cs.utexas.edu/~byoung/summer-python-class/summer15-turtle-graphics.pdf">source</a>)</p>
<p><a href="https://github.com/mdecycu/Gesture-Controlled-Snake-Game">https://github.com/mdecycu/Gesture-Controlled-Snake-Game</a></p>
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="deepmerge">deepmerge</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="keycode">Keycode</button><button id="knova1">knova1</button><button id="merge3">merge3</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="tetris">Tetris</button><button id="auto_tetris">Auto Tetris</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="websocket">websocket</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
################################## auto tetris start
auto_tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/45740f32e5c3ee292a88df8a47f46e60039b77f9/pygame_to_brython_tetris_ai.py"
auto_tetris = button2(auto_tetris_url)
doc["auto_tetris"].bind("click", auto_tetris.do)
################################## auto tetris end
</script>
</p><h2>Unitconvert</h2>
<p>攝氏與華氏溫度單位換算程式編寫:</p>
<ol>
<li>請在個人網頁上的 H1 標題為大寫 HW 頁面中增加一個 H2 標題小寫 w12 的頁面, 並將攝氏與華氏溫度單位轉換的公式列入.</li>
<li>請利用 https://www.diagrams.net 繪製一個攝氏與華氏溫度轉換的程式設計流程圖, 完成後將流程圖轉為 .png 格式後嵌入 w12 頁面中.</li>
<li>請根據程式設計流程圖, 在 w12 頁面中直接加入一個 Brython 程式, 使能在頁面中印出今天的日期、時間與該時間點的攝氏及華氏溫度. 例如: 今天是 2022 年 11 月 24 日, 現在時間 10:35, 攝氏溫度為 29 度, 華氏為 84.2 度.</li>
<li>接下來請利用 Brython 程式語法中的 input() 在 w12 頁面中讓使用者按下"溫度換算"按鈕後, 跳出讓使用者輸入攝氏溫度值, 讓溫度單位轉換程式運算後, 可以同時列出使用者所輸入的攝氏與華氏溫度值.</li>
</ol>
<p>input() 取得的資料型別為字串</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
print(type(user_input_temp))</pre>
<p>從上面的範例, 可知 Brython input() 取回使用者的輸入值之後, 傳回的變數資料型別為 str, 也就是字串, 即便使用者輸入 30 整數, 但就程式而言, 取回 30 之後, 會將這個變數視為字串, 因此隨後的程式運算, 應該要將此變數轉為浮點數 (floating number), 因為使用者可能會輸入帶有小數點的資料. 要將字串轉為浮點數, 可以使用 float() 函式.<br/> <br/>當然, 使用者也可能會輸入不是數值的資料, 所以之後若要讓溫度轉換程式能更加人性化, 或者防呆, 就必須在瀏覽器前端 (反應較即時) 或伺服器後端 (若在前端取值後, 再設法將資料傳回後端電腦處理, 則反應較為耗時, 但可收集使用者在瀏覽器前端的所有輸入及操作行為數據).<br/> <br/>接下來要將字串轉為浮點數:</p>
<p>input(), float() 與 type() 的用法</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
f = c*9/5 + 32
c = (f-32)*5/9
'''
c = input("請輸入攝氏溫度值")
c = float(c)
print(c, type(c))</pre>
<p>利用數學運算將攝氏轉為華氏</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
f = c*9/5 + 32
c = (f-32)*5/9
'''
c = input("請輸入攝氏溫度值")
c = float(c)
#print(c, type(c))
f = c*9/5 + 32
print(c, f)</pre>
<p>溫度轉換程式練習至此, 都只是在動態或靜態網站已經配置好 Brython 執行環境的頁面中執行, 接下來我們將要直接在 w12 頁面中配置 Brython 環境, 並且在其中列出使用者透過 input() 函式的輸入資料:</p>
<p>動態網頁中的 Brython 環境設置</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;h3&gt;w12&lt;/h3&gt;
&lt;!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
--&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--&gt;&lt;/p&gt;
&lt;div id="brython_div"&gt;&lt;/div&gt;
&lt;p&gt;
&lt;script type="text/python"&gt;// &lt;![CDATA[
from browser import html, document
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
brython_div &lt;= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;</pre>
<p>上面在動態網頁中的 w12 超文件網頁, 只要連結就會直接跳出取值表單的設計, 並不是很人性化, 因為使用者連結至 w12 可能只想看看該頁面內, 不一定希望執行取值或溫度轉換, 因此必須設法製作一個按鈕, 讓使用者按下按鈕之後才執行特定的程式內容.<br/> <br/>因此將 w12 頁面改為 w12-1 頁面, 以 html 建立一個帶有 id 的 button 標註, 並在原有的 Brython 程式段中設定一個按鈕與表單取值程式的綁定 (bind), 只有當使用者按下按鈕時, 才會根據綁定設計, 呼叫表單取值.</p>
<p>設計超文件按鈕與特定函式綁定</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;h3&gt;w12-1&lt;/h3&gt;
&lt;!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
--&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--&gt;&lt;/p&gt;
&lt;!-- 利用 html 建立一個 id="btn1" 的按鈕 --&gt;
&lt;p&gt;&lt;button id="btn1"&gt;取使用者輸入&lt;/button&gt;&lt;/p&gt;
&lt;div id="brython_div"&gt;&lt;/div&gt;
&lt;p&gt;
&lt;script type="text/python"&gt;// &lt;![CDATA[
from browser import html, document
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div &lt;= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def get_input(env):
    user_input_temp = input("請輸入攝氏溫度值:")
    brython_div &lt;= user_input_temp
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;</pre>
<p>程式設計到這裡, 不知道有沒有同學想起來, 截至目前所寫的程式都是在瀏覽器前端, 使用者可以透過瀏覽器跳出的表單輸入攝氏溫度值, 然後要求 Brython 程式進行運算轉換, 但是若想要將使用者輸入的值儲存起來, 或者利用使用者輸入的溫度值, 用來設定位於遠端 (Server 端) 的一台冷氣, 該如何將前端表單輸入內容, 送到伺服器端?<br/> <br/>以下將採用 AJAX 將 Brython 表單程式所取得的溫度數值, 以 GET 方式送到伺服器:</p>
<p>Brython 以 AJAX 將資料送到 Flask</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;h3&gt;w12-2&lt;/h3&gt;
&lt;!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
--&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--&gt;&lt;/p&gt;
&lt;!-- 利用 html 建立一個 id="btn1" 的按鈕 --&gt;
&lt;p&gt;&lt;button id="btn1"&gt;取使用者輸入&lt;/button&gt;&lt;/p&gt;
&lt;div id="brython_div"&gt;&lt;/div&gt;
&lt;p&gt;
&lt;script type="text/python"&gt;// &lt;![CDATA[
from browser import html, document, ajax
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div &lt;= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def complete(request):
    pass
def get_input(env):
    user_input_temp = input("請輸入攝氏溫度值:")
    url = "http://127.0.0.1:8080/?temp=" + user_input_temp
    ajax.get(url, oncomplete=complete)
    brython_div &lt;= "已經透過 AJAX 採 GET 將溫度輸入值送到 server"
    brython_div &lt;= html.BR()
    brython_div &lt;= user_input_temp
    brython_div &lt;= html.BR()
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!--
以下為 Flask 伺服器端的程式碼
from flask import Flask, request 
from flask_cors import CORS
  
app = Flask(__name__)
CORS(app)
@app.route('/', methods=['GET'])
def index():
    # 利用 Flask request 取得 GET 模式下的 temp 變數值
    # 若 temp 無值, 則內定為 "30"
    temp = request.args.get('temp', default="30")
    # 當使用者在瀏覽器執行 Brython 程式時, 可以利用 GET 將 temp 變數值傳給 server 端的 Flask Python 程式
    # 若瀏覽器前端採 form 表單取值, 則 Flask 可以 request.form.get() 取值
    return "已經取得 temp: " + str(temp)
  
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)
--&gt;</pre>
<p>使用者若希望測試在 w12-2 網頁中點擊按鈕, 輸入溫度值, 然後透過 AJAX 傳值, 必須在近端 (可以利用 SCiTE) 先啟動以下的 localhost Server 程式:</p>
<p>與 Brython 前端互動的 Flask 伺服器程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS
  
app = Flask(__name__)
CORS(app)
@app.route('/', methods=['GET'])
def index():
    # 利用 Flask request 取得 GET 模式下的 temp 變數值
    # 若 temp 無值, 則內定為 "30"
    temp = request.args.get('temp', default="30")
    # 當使用者在瀏覽器執行 Brython 程式時, 可以利用 GET 將 temp 變數值傳給 server 端的 Flask Python 程式
    # 若瀏覽器前端採 form 表單取值, 則 Flask 可以 request.form.get() 取值
    return "已經取得 temp: " + str(temp)
  
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)</pre>
<p></p><h2>Game</h2>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-5801-8">Advanced Game Design with HTML5 and JavaScript</a> (2015)</p><h2>Simulator</h2>
<p><a href="https://sim.firialabs.com/">CodeSpace Development Environment (firialabs.com)</a></p>
<p style="padding-left: 30px;"><a href="https://groups.google.com/g/brython/c/0kA4pM1YirE">https://groups.google.com/g/brython/c/0kA4pM1YirE</a></p>
<h2>Algorithms</h2>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-3238-4">Python Algorithms</a> (2010)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-0055-1">Python Algorithms Second Edition</a> (2014)</p>
<h1>CPython</h1>
<p>Based on <a href="https://en.wikipedia.org/wiki/Python_(programming_language)">Wikipedia</a>: Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.<br/><br/>Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a "batteries included" language due to its comprehensive standard library.<br/><br/><a href="https://en.wikipedia.org/wiki/Guido_van_Rossum">Guido van Rossum</a> began working on Python in the late 1980s as a successor to the <a href="https://en.wikipedia.org/wiki/ABC_(programming_language)">ABC</a> programming language and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000 and introduced new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 3.0, released in 2008, was a major revision that is not completely backward-compatible with earlier versions. Python 2 was discontinued with version 2.7.18 in 2020.</p>
<p>比對兩份資料, 列出差異:</p>
<p style="padding-left: 30px;">數列應用</p>
<p style="padding-left: 30px;">for 重複迴圈</p>
<p style="padding-left: 30px;">以 utf-8 編碼讀出檔案內容</p>
<p style="padding-left: 30px;">splitlines() 函式逐行將檔案內容放入數列</p>
<p style="padding-left: 30px;">if 判斷式應用</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 兩份資料所在目錄字串
studlist_path = "Y:/studlist/2022spring/"
score_path = "Y:/score/2022/spring/"
# score 區檔案套稿字串
score_file_temp = "_stud_list.txt"
# 班級代號數列
classes = ["1a", "2a", "2b", "5j"]

# 利用 for 迴圈, 逐班進行處理
for i in classes:
    # read data from studlist
    # 以 utf-8 編碼開啟檔案
    with open(studlist_path + i + ".txt", encoding="utf-8") as f:
        studlist_data = f.read().splitlines()
    #print(studlist_data)
    with open(score_path + i + "/" + i + score_file_temp, encoding="utf-8") as f:
        score_list_data = f.read().splitlines()
    #print(score_list_data)
    for i in studlist_data:
        stud_num = i.split("\t")[0]
        #print(stud_num)
        # 列出已經不在評分名單中的學號
        if stud_num not in score_list_data:
            print(stud_num)</pre>
<p>MS Teams assignment downloaded directory rename:</p>
<p style="padding-left: 30px;">os 模組的 walk() 應用</p>
<p style="padding-left: 30px;">next() 應用</p>
<p style="padding-left: 30px;">讀取檔案內容</p>
<p style="padding-left: 30px;">splitlines() 將各行資料納入數列</p>
<p style="padding-left: 30px;">dictionary 資料結構應用</p>
<p style="padding-left: 30px;">for 重複迴圈應用</p>
<p style="padding-left: 30px;">try 與 except 應用</p>
<p style="padding-left: 30px;">os 模組的 rename() 應用</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os

'''
MS Teams student submitted assignment files can be downloaded through SharePoint App, but directory named as student name,
we may use this program to rename directory into student number
'''
# from https://stackoverflow.com/questions/141291/how-to-list-only-top-level-directories-in-python
# rename directory: os.rename(source,destination)
stud_name_list = next(os.walk('./cd2022_student'))[1]
#print(stud_name_list)
# read data from wcm2022_5j_stud_name_email.txt
# firstname \t lastname \t email
with open("cd2022_stud_name_email.txt", encoding="utf-8") as f:
    data = f.read().splitlines()
# set stud_name and stud_num into dict
stud_dict = {}
# skip the first line
for i in data[1:]:
    line = i.split("\t")
    firstname = line[0]
    lastname = line[1]
    # get student number from email
    stud_num = line[2].split("@")[0]
    stud_dict[lastname+firstname] = stud_num
print(stud_dict)
dir_pre = './cd2022_student/'
# loop stud_name_list and rename into stud_num
for i in stud_name_list:
    try:
        os.rename(dir_pre+i, dir_pre+stud_dict[i])
        print("rename ", i, " into ", stud_dict[i])
    except:
        print(i, "no data")
</pre>
<p>Use old Python to create new portable Python:</p>
<p>gen_portable_python.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
import os

# basic files for Python installation
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# Python version
version = "3.10.6"
# location for Portable Python
path = "c:\\tmp\\Python310"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
extract_path = path + "\\extract"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, path+ "\\"+ filename)
    os.system("msiexec.exe /a " + path + "\\" + i + ".msi /qb targetdir=" + extract_path)
    # delete msi file
    os.remove(extract_path + "\\" + i + ".msi")</pre>
<p>search cmd to open command line window.</p>
<p>cd to c:\tmp where gen_portable_python.py located.</p>
<p>c:\tmp&gt;c:\old_python_path\python gen_portable_python.py</p>
<p></p><h2>PDF</h2>
<h4>從單機程式到全球資訊網服務:</h4>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7107-0">Essential Computer Science</a> 是 2021 年出版的電子書, 在校園裡可以直接下載 pdf 檔案, 以下 CPython 程式套用 <a href="https://pypi.org/project/PyPDF2/">PyPDF2</a> 模組, 可以分割或合併 pdf 檔案.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install PyPDF2
from PyPDF2 import PdfFileWriter, PdfFileReader
import os

def SplitPdf(pdfFileName, newFileName, fromPage, toPage):

    """Action to split user uploaded files
    """

    pdfReader = PdfFileReader(open(pdfFileName, "rb"))
    information = [(newFileName, fromPage, toPage)]
    pdf_writer = PdfFileWriter()
    pdf_writer.addPage(pdfReader.getPage(1))
    for i in range(13, 18):
        pdf_writer.addPage(pdfReader.getPage(i))
    
    for page in range(len(information)):
        start = information[page][1]
        end = information[page][2]
        while start&lt;=end:
            pdf_writer.addPage(pdfReader.getPage(start-1))
            start+=1
        if not os.path.exists("./"):
            os.makedirs(savepath)
        output_filename = '{}_{}_page_{}.pdf'.format(information[page][0], information[page][1], information[page][2])
        with open(output_filename,'wb') as out:
            pdf_writer.write(out)

    outstring = "已經將 " + pdfFileName + " 中的第 " + str(fromPage) + " 到第 " + str(toPage) + "頁, 存為 " + output_filename

    return outstring

def CombinePdf(pdfFileNames, newFileName):

    """Action to split user uploaded files
    """
    
    # pdfFileNames is []
    pdf_write_object = PdfFileWriter()

    filenameString = ""
    
    for filename in pdfFileNames:
        pdf_read_object = PdfFileReader(open(filename, "rb"))
        filenameString += filename + ", "
        for page in range(pdf_read_object.numPages):
            pdf_write_object.addPage(pdf_read_object.getPage(page))
     
    final_file_object = open(newFileName + ".pdf", 'wb')
    pdf_write_object.write(final_file_object)
    final_file_object.close()

    outstring = "已經將 " + filenameString+ " 合併為: "+ newFileName + ".pdf"

    return outstring
 
pdfFileName = "2021_Book_EssentialComputerScience.pdf"
newFileName = "cp2022_textbook_part1.pdf"
fromPage = 21
toPage = 98
SplitPdf(pdfFileName, newFileName, fromPage, toPage)
print("done")</pre>
<p>上列程式只能在單機執行, 假如再套用 <a href="https://flask.palletsprojects.com/en/2.1.x/">Flask</a> 全球資訊網框架. 就可以將單機程式配置在 server 上, 讓參與協同產品設計的成員可以在任何地方透過瀏覽器使用分割與合併 pdf 檔案的功能.</p>
<p><a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EXUaz5TU5bZNsrnxUfA-CZwBvsngVpA7S4ikP9J7ueb6nw?e=i3QMBN">cp2022_CPython_pypdf2_Flask_project1.7z</a> (for cp2022 @gm users only) / <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EZiBbQe_d2ZOm-P6wgsMfgUBJ6hoC_rYtyp774D0u9JThw?e=4NOcW7">cp2022_CPython_pypdf2_Flask_project1.7z for @nfu</a></p>
<p></p>
<p></p><h2>RoboDK</h2>
<p><a href="https://robodk.com/">https://robodk.com/</a></p>
<p><a href="https://robodk.com/doc/en/Basic-Guide.html">https://robodk.com/doc/en/Basic-Guide.html</a> </p>
<p><a href="https://github.com/RoboDK/RoboDK-API/tree/master/Python">https://github.com/RoboDK/RoboDK-API/tree/master/Python</a> </p>
<p><a href="https://www.making.unsw.edu.au/learn/robodk-learn-module/">https://www.making.unsw.edu.au/learn/robodk-learn-module/</a> </p>
<p>Install-RoboDK-64-v5.2.2.exe (<a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EY9IrF--gnRIswGpB_3pHjgBSz2l_zcZU505Ta2I-GYklA?e=XraCKq">5.2.2</a>)</p>
<p>Install-RoboDK-64-v5.5.1.exe (<a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/Ef20l5x_z-VHgRtIM0ZC9Y0BIOGHQGqay-drMWzuko6adA?e=qxOq31">5.5.1</a>)</p>
<p><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EYhqkyDbsuVOhzzxaa08VF8BAkxw5gHDj03wytAA2lIIRQ?e=NH0h8Y">robodk_python_api_example.7z</a></p>
<p>pick_and_place.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># KMOLab Portable RoboDK pick and place
from robolink import *    # API to communicate with robodk
from robodk import *      # robodk robotics toolbox

# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool

#----------------------------------------------
# Function definitions

def box_calc(BALLS_SIDE=4, BALLS_MAX=None):
    """Calculate a list of points (ball center) as if the balls were stored in a box"""
    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3
    xyz_list = []
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE):
            for j in range(BALLS_SIDE):
                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]
                if len(xyz_list) &gt;= BALLS_MAX:
                    return xyz_list
    return xyz_list

def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list

def balls_setup(frame, positions):
    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""
    nballs = len(positions)
    step = 1.0/(nballs - 1)
    for i in range(nballs):
        newball = frame.Paste()
        newball.setName('ball ' + str(i)) #set item name
        newball.setPose(transl(positions[i])) #set item position with respect to parent
        newball.setVisible(True, False) #make item visible but hide the reference frame
        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color

def cleanup_balls(parentnodes):
    """Delete all child items whose name starts with \"ball\", from the provided list of parent items."""
    todelete = []
    for item in parentnodes:
        todelete = todelete + item.Childs()

    for item in todelete:
        if item.Name().startswith('ball'):
            item.Delete()

def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
        
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));


#----------------------------------------------------------
# The program starts here:

# Any interaction with RoboDK must be done through RDK:
RDK = Robolink()

# Turn off automatic rendering (faster)
RDK.Render(False)

#RDK.Set_Simulation_Speed(500); # set the simulation speed

# Gather required items from the station tree
robot = RDK.Item('Fanuc M-710iC/50')
robot_tools = robot.Childs()
#robottool = RDK.Item('MainTool')
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')

# Copy a ball as an object (same as CTRL+C)
ballref = RDK.Item('reference ball')
ballref.Copy()

# Run a pre-defined station program (in RoboDK) to replace the two tables
prog_reset = RDK.Item('Replace objects')
prog_reset.RunProgram()

# Call custom procedure to remove old objects
cleanup_balls([frame1, frame2])

# Make a list of positions to place the objects
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)

# Programmatically place the objects with a custom-made procedure
balls_setup(frame1, frame1_list)

# Delete previously generated tools
for tool in robot_tools:
    if tool.Name().startswith('TCP'):
        tool.Delete()
        
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)

TCP_0 = TCP_list[0]

# Turn on automatic rendering
RDK.Render(True)

# Move balls    
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0
target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)

while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)

    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)

    # grab ntake balls from frame 1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
 
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame 2 and place the tool balls into table 2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")
        
        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)

    robot.MoveJ(target_app_frame)

# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])
</pre>
<p></p><h2>CAD</h2>
<p>SolidWorks: <a href="https://www.solidworks.com/">https://www.solidworks.com/</a></p>
<p>AutoDesk Inventor: <a href="https://www.autodesk.com/products/inventor">https://www.autodesk.com/products/inventor</a></p>
<p>Siemens NX: <a href="https://www.plm.automation.siemens.com/global/en/products/nx/">https://www.plm.automation.siemens.com/global/en/products/nx/</a></p>
<p>PTC Onshape: <a href="https://www.ptc.com/en/products/onshape">https://www.ptc.com/en/products/onshape</a></p>
<p>Solvespace: <a href="https://solvespace.com">https://solvespace.com</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a></p><h3>Python for SW</h3>
<p><a href="http://wcm.cycu.org:88/github/cad2020/content/HW1_SW.html">http://wcm.cycu.org:88/github/cad2020/content/HW1_SW.html</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import pythoncom
import win32com.client
import win32api
import os
 
os.system("taskkill /IM sldworks.exe /F")
os.system("taskkill /IM sldworks_fs.exe /F")
 
'''
About DispatchEx and Dispatch Methods:
https://stackoverflow.com/questions/18648933/using-pywin32-what-is-the-difference-between-dispatch-and-dispatchex
Source code:
http://pywin32.hg.sourceforge.net/hgweb/pywin32/pywin32/file/0db1b26904d5/com/win32com/src/PyIDispatch.cpp
Doc:
https://docs.microsoft.com/en-us/dotnet/standard/native-interop/com-callable-wrapper
 
IDispatch: Provides a mechanism for late binding to type.
IDispatchEx:
    Interface supplied by the runtime if the class implements IExpando. The IDispatchEx interface is an extension of the IDispatch interface that, unlike IDispatch, enables enumeration, addition, deletion, and case-sensitive calling of members.
'''
app = win32com.client.DispatchEx("SldWorks.Application")
#app=win32com.client.Dispatch("SldWorks.Application")
 
# define var to convert variables
def var(type, value):
    # type needs to be string
    # use builtin getattr() to return pythoncom.type
    pytype = getattr(pythoncom, type)
    return win32com.client.VARIANT(pytype, value)
 
# for two-type variable convert
# is there any three-type variant?
def var2(type1, type2, value):
    pytype1 = getattr(pythoncom, type1)
    pytype2 = getattr(pythoncom, type2)
    return win32com.client.VARIANT(pytype1|pytype2, value)
     
def part(app, fileName, sketchName, dimName, newDim, newFileName):
    arg1 = var("VT_I4", 1)
    # GetMassProperties( ((3, 1), (16387, 3)))
    #arg1 = win32com.client.VARIANT(pythoncom.VT_I4, 1)
    arg2 = var("VT_I4", -1)
 
    # 0. need the most important obj app
    #app=win32com.client.Dispatch("SldWorks.Application")
    # use relative directory to open part
    # 1. open part file, need the path of the part file (need the file name)
    #doc=app.OpenDoc(".\\block2.SLDPRT", 1)
    doc=app.OpenDoc(os.path.join(os.getcwd(), fileName), 1)
    # save part as binary stl
    # can we save part as ASCII stl as well?
    #doc.SaveAs2(".\\block2.stl", 0, True, False)
    # the parameter VARIANT list for SelectByID2
    # can we automate the VARIANT conversion?
    # 2. use the sketch to select the SKETCH (need the sketch name)
    #SelectByID2((8, 1), (8, 1), (5, 1), (5, 1), (5, 1), (11, 1), (3, 1), (9, 1), (3, 1))
    #arg3 = var("VT_BSTR", "Sketch1")
    arg3 = var("VT_BSTR", sketchName)
    arg4 = var("VT_BSTR", "SKETCH")
    arg5 = var("VT_R8", 0)
    arg6 = var("VT_R8", 0)
    arg7 = var("VT_R8", 0)
    arg8 = var("VT_BOOL", False)
    arg9 = var("VT_I4", 0)
    arg10 = var("VT_DISPATCH", None)
    arg11 = var("VT_I4", 0)
    # select Sketch1 first
    status = doc.Extension.SelectByID2(arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    # select DIMENSION to to modify
    # 3. use the dimension name @ sketch name @ part file name
    # to select the DIMENSION to modify
    #arg12 = var("VT_BSTR", "Width@Sketch1@block2.SLDPRT")
    arg12 = var("VT_BSTR", dimName+"@"+sketchName+"@"+fileName)
    arg13 = var("VT_BSTR", "DIMENSION")
    status = doc.Extension.SelectByID2(arg12, arg13, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    #Dim swDimension As SldWorks.Dimension
    # 4. to bring out the parameter to modify, need the dimension name and 
    # sketch name
    #swDimension = doc.Parameter("Width@Sketch1")
    swDimension = doc.Parameter(dimName+"@"+sketchName)
    # the dimension unit is in meter
    # 5. need the new value of the parameter
    #swDimension.SystemValue = 0.50
    swDimension.SystemValue = newDim
    # 6. do the final house keeping process, clear selection and rebuild the part
    sel = doc.ClearSelection2 
    sel = True
    status = doc.EditRebuild()
    arg31 = var("VT_I4", 1)
    arg32 = var2("VT_I4", "VT_BYREF", 3)
    # 7. get the volume of the new part
    volumn = doc.Extension.GetMassProperties(arg31, arg32)
    #print(volumn[3]*1E9, "mm*3")
    # 8. save the new part (need the new part file name)
    #doc.SaveAs2(".\\block3.SLDPRT", 0, True, False)
    doc.SaveAs2(os.path.join(os.getcwd(), "html/" + newFileName + ".SLDPRT"), 0, True, False)
    # save jpg of part
    doc.EditRebuild()
    arg33 = var("VT_BSTR", "Isometric")
    doc.ShowNamedView(arg33)
    doc.ViewZoomtofit2()
    doc.SaveAs3(os.path.join(os.getcwd(), "html/" + newFileName + ".jpg"), 0, 0)
    # mm*3
    return str(round(volumn[3]*1E9, 3)) + " mm*3"
html = "以下零件採 SolidWorks 2017 SP 2.0 教育版繪製:&lt;br /&gt;&lt;br /&gt;&lt;table border='1' cellpadding='5'&gt;&lt;tr&gt;&lt;th&gt;Number&lt;/th&gt;&lt;th&gt;Part&lt;/th&gt;&lt;th&gt;Jpg&lt;/th&gt;&lt;th&gt;Width&lt;/th&gt;&lt;th&gt;Volume&lt;/th&gt;&lt;/tr&gt;"
index = 0
for i in range(1, 11):
    dim = i*0.002
    blockVolume = part(app, "31_step.SLDPRT", "Sketch1", "Width", dim, "31_" + str(i))
    print("31_" + str(i) + ".SLDPRT, dim= " + str(round(dim, 3)) +", volume= " + blockVolume)
    index += 1
    newFileName = "31_" + str(i)
    html += '''&lt;tr&gt;
    &lt;td&gt;''' + str(index) +'''&lt;/td&gt;
    &lt;td&gt;&lt;a href="./../downloads/sw_macro/html/''' + newFileName + '''.SLDPRT"&gt;''' + newFileName + '''.SLDPRT&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;img width="300" src="./../downloads/sw_macro/html/''' + newFileName + '''.jpg"&gt;&lt;/img&gt;&lt;/td&gt;
    &lt;td&gt;''' + str(round(dim*1000, 2)) + ''' mm &lt;/td&gt;
    &lt;td&gt;''' + blockVolume + '''&lt;/td&gt;
    &lt;/tr&gt;
    '''
html += "&lt;/table&gt;"
# save part.html
with open("./html/part.html", "w", encoding="utf-8") as f:
     f.write(html)
      
'''
for assembly
        swModelDocExt.SelectByID2("", "EDGE", -0.439825991092107, 7.07350481263802E-02, 0.40982045578545, true, 2, null, 0);
        swModelDocExt.SelectByID2("", "EDGE", -0.219003008311574, 0.073085842475507, 0.549481823985616, true, 4, null, 0);
        swModelDocExt.SelectByID2("Part-3@AssemModel", "COMPONENT", 0, 0, 0, true, 1, null, 0);
        swFeature = (Feature)swFeatureManager.FeatureLinearPattern2(3, 40 / 1000, 0, 0, false, true, "NULL", "NULL", false);
        assemblyModel.ClearSelection2(true);
'''
os.system("taskkill /IM sldworks.exe /F")
os.system("taskkill /IM sldworks_fs.exe /F")
# now the SolidWorks is embedding</pre>
<p></p>
<h3>Python for INV</h3>
<p>針對 HW1 使用 AutoDesk Inventor 2019 教育版繪零件圖者, 可以利用下列 Python 程式修改零件參數, 取零件影像圖並計算零件體積:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import pythoncom
import win32com.client
import win32api
import os
 
# Open Inventor
invApp = win32com.client.Dispatch("Inventor.Application")
#print(invApp)
invApp.Visible = True
 
invApp.SilentOperation = True
 
# Set location of assembly
partName = 'C:/tmp/Part1.ipt'
 
# Open the model
oDoc = invApp.Documents.Open(partName)
# use UserParameters to access the user parameters
#oUserParams = oDoc.ComponentDefinition.Parameters.UserParameters
#oNewParam = oUserParams.AddByExpression("x", "9", "mm")
# use Item() to get the model parameter named "d0"
d0 = oDoc.ComponentDefinition.Parameters.Item("d0")
# Expression can add dimension unit
#d0.Expression = "2 cm"
# Value use the default system unit: cm
d0.Value = 2
# use Update() method to get the new part volume
oDoc.Update()
# fit the active view and save the part image
invApp.ActiveView.Fit(True)
oDoc.SaveAs("C:/tmp/Part1.png", True)
print(oDoc.ComponentDefinition.MassProperties.Volume)
#invApp.Quit()</pre>
<p></p>
<h3>Python for NX</h3>
<p>針對 HW1 使用 NX12.0.2 教育版繪零件圖者, 可以利用下列 Python 程式修改零件參數, 取零件影像圖並計算零件體積:</p>
<p>參考零件: <a href="http://wcm.cycu.org:88/github/cad2020/downloads/nx12/journal/block.prt">block.prt</a></p>
<p><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html">NX12 NXOpen Python API Reference</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># nx_open_part.py
# 導入 NXOpen
import NXOpen
import NXOpen.UF
import NXOpen.Gateway
   
def main():
    # 取得目前開啟的工作階段
    theSession = NXOpen.Session.GetSession()
    theUfSession = NXOpen.UF.UFSession.GetUFSession()
      
    # 建立 ListingWindow
    listWin= theSession.ListingWindow
    # 開啟零件檔案
    basePart1 = theSession.Parts.OpenBaseDisplay("c:/tmp/block.prt")
    workPart = theSession.Parts.Work
    unit1 = workPart.UnitCollection.FindObject("MilliMeter")
    # height
    p7 = workPart.Expressions.FindObject("p7")
    # width
    p8 = workPart.Expressions.FindObject("p8")
    # length
    p9 = workPart.Expressions.FindObject("p9")
    workPart.Expressions.EditWithUnits(p7, unit1, "30")
    workPart.Expressions.EditWithUnits(p8, unit1, "60")
    workPart.Expressions.EditWithUnits(p9, unit1, "90")
    theSession.UpdateManager.DoUpdate(0)
    #saveStatus1 = workPart.SaveAs("c:/tmp/block_new.prt")
    #saveStatus1.Dispose()
    # initialize list to hold bodies
    theBodyTags = []
   
    for x in workPart.Bodies:
        if x.IsSolidBody:
            theBodyTags.append(x.Tag)
      
    # 準備輸出 ASCII 格式 STL 零件檔案
    sTLCreator1 = theSession.DexManager.CreateStlCreator()
    sTLCreator1.AutoNormalGen = True
    sTLCreator1.ChordalTol = 0.08
    sTLCreator1.AdjacencyTol = 0.08
    sTLCreator1.OutputFile = "C:\\tmp\\block_ascii.stl"
    # Binary STL: NXOpen.STLCreatorOutputTypeEnum.Binary
    sTLCreator1.OutputType = NXOpen.STLCreatorOutputTypeEnum.Text
    # 已知 body1 命名
    body1 = workPart.Bodies.FindObject("EXTRUDE(2)")
    added1 = sTLCreator1.ExportSelectionBlock.Add(body1)
    nXObject1 = sTLCreator1.Commit()
    sTLCreator1.Destroy()
  
    # 開啟所建立的 ListingWindow
    listWin.Open()
    listWin.WriteLine("number of solid bodies: " + str(len(theBodyTags)))
   
    (massProps, Stats) = theUfSession.Modeling.AskMassProps3d(theBodyTags, len(theBodyTags), 1, 4, .03, 1, [0.99,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])
    listWin.WriteLine("units: kg, mm")
    listWin.WriteLine("surface area: " + str(massProps[0]))
    listWin.WriteLine("volume: " + str(massProps[1]*1E9))
    # 在 ListingWindow 中寫入字串
    listWin.WriteLine("Hello, NXOpen")
    listWin.Close()
     
    # 將零件檔案 fit 之後, export 出 png 檔案
    theUI = NXOpen.UI.GetUI()
    imageExportBuilder1 = theUI.CreateImageExportBuilder()
 
    custombackgroundcolor1 = [None] * 3
    custombackgroundcolor1[0] = 1.0
    custombackgroundcolor1[1] = 1.0
    custombackgroundcolor1[2] = 1.0
 
    imageExportBuilder1.SetCustomBackgroundColor(custombackgroundcolor1)
    imageExportBuilder1.FileFormat = NXOpen.Gateway.ImageExportBuilder.FileFormats.Png
    imageExportBuilder1.FileName = "c:\\tmp\\block.png"
 
    imageExportBuilder1.BackgroundOption = NXOpen.Gateway.ImageExportBuilder.BackgroundOptions.Original
 
    imageExportBuilder1.EnhanceEdges = False
    imageExportBuilder1.RegionMode = False
    # fit view 後 commit export png
    workPart.ModelingViews.WorkView.Fit()
    nXObject6 = imageExportBuilder1.Commit()
 
    imageExportBuilder1.Destroy()
      
if __name__ == "__main__":
    main()</pre>
<p></p>
<h2>CAE</h2>
<h4>Mechatronic control system design and simulation:</h4>
<h4 style="padding-left: 30px;">Coppeliasim:</h4>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/">https://www.coppeliarobotics.com/</a></p>
<p style="padding-left: 90px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm">https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm</a></p>
<p style="padding-left: 90px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm">https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<h4 style="padding-left: 30px;">Webots:</h4>
<p style="padding-left: 60px;"><a href="https://cyberbotics.com/">https://cyberbotics.com/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<h4>FEM:</h4>
<h4 style="padding-left: 30px;">sfepy:</h4>
<p style="padding-left: 60px;"><a href="https://sfepy.org/doc-devel">https://sfepy.org/doc-devel</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/sfepy/sfepy">https://github.com/sfepy/sfepy</a></p>
<p style="padding-left: 60px;"><a href="https://sfepy.org/doc-devel/examples/gallery.html">https://sfepy.org/doc-devel/examples/gallery.html</a></p>
<h4 style="padding-left: 30px;">Netgen/NGSolve:</h4>
<p style="padding-left: 60px;"><a href="https://www.math.uzh.ch/compmath/fileadmin/user/stas/compmath/Abschlussarbeiten/Arnold_Noam/myManual.pdf">https://www.math.uzh.ch/compmath/fileadmin/user/stas/compmath/Abschlussarbeiten/Arnold_Noam/myManual.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://ngsolve.org/">https://ngsolve.org/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/NGSolve/ngsolve">https://github.com/NGSolve/ngsolve</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/NGSolve/netgen">https://github.com/NGSolve/netgen</a></p>
<p style="padding-left: 60px;"></p>
<h2>BS4</h2>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3925-4">Website Scraping with Python</a> (2018)</p>
<p><a href="https://github.com/mdecycu/nfulist">https://github.com/mdecycu/nfulist</a></p>
<h2>PostgreSQL</h2>
<p><a href="https://docs.postgresql.tw/">https://docs.postgresql.tw/</a></p>
<p style="padding-left: 30px;">PostgreSQL 可以以一般使用者進行安裝，它並不需要系統管理者（root）的權限才能安裝。</p>
<p><a href="https://courses.cs.washington.edu/courses/csep544/11au/resources/postgresql-instructions.html">Get Started with PostgreSQL</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-0018-5">Beginning Database with PostgreSQL</a> (2005)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-5663-3">PostgreSQL Configuration</a> (2020)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6885-8">PostgreSQL Query Optimization</a> (2021)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3447-1">Beginning PostgreSQL on the Cloud</a> (2018)</p><h2>PyQt</h2>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7999-1">Beginning PyQt</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7490-3">Introducing Qt6</a></p><h2>MS Graph</h2>
<p>Microsoft Graph client library for Python</p>
<p><a href="https://github.com/microsoftgraph/msgraph-sdk-python-core">https://github.com/microsoftgraph/msgraph-sdk-python-core</a></p>
<h4>MS Teams:</h4>
<p style="padding-left: 30px;">Microsoft Teams is the ultimate hub for teamwork and intelligent communications. Built on the strength and scale of Microsoft 365 with over 120 million users, Microsoft Teams delivers chat-based collaboration, meetings, calling, and enterprise voice features.</p>
<h4>MS Graph:</h4>
<p style="padding-left: 30px;">Microsoft Graph makes it easy to create large numbers of teams and populate them with users and channels, by automating the creation and management of teams, channels, tabs, and apps. Microsoft Graph also lets you find and archive the teams you are no longer using. This is the same API that the Microsoft Teams Admin Center and Teams PowerShell cmdlets are built on.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/KCvAhQEJmyY" title="YouTube video player" width="560"></iframe></p>
<h4>More MS Teams related video:</h4>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/c/Microsoft365Developer/search?query=Teams">https://www.youtube.com/c/Microsoft365Developer/search?query=Teams</a></p>
<h4>安裝模組:</h4>
<p style="padding-left: 30px;">pip install msgraph-core azure-identity</p>
<p>Target:</p>
<h4>MS Graph SDK for MS Teams:</h4>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/graph/teams-concept-overview">https://docs.microsoft.com/en-us/graph/teams-concept-overview</a></p>
<h4>Login: </h4>
<p style="padding-left: 30px;"><a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program">https://developer.microsoft.com/en-us/microsoft-365/dev-program</a></p>
<h3>MS Teams</h3>
<p><a href="https://docs.microsoft.com/en-us/sharepoint/dev/solution-guidance/security-apponly-azuread">Granting access via Azure AD App-Only | Microsoft Docs</a></p>
<p style="padding-left: 30px;">Azure Access Control (ACS), a service of Azure Active Directory (Azure AD), has been retired on November 7, 2018. This retirement does not impact the SharePoint Add-in model, which uses the <a href="https://accounts.accesscontrol.windows.net">https://accounts.accesscontrol.windows.net</a> hostname (which is not impacted by this retirement). For more information, see <a href="https://developer.microsoft.com/office/blogs/impact-of-azure-access-control-deprecation-for-sharepoint-add-ins">Impact of Azure Access Control retirement for SharePoint Add-ins</a>.</p>
<p>Download MS Teams Student submitted files:</p>
<ol>
<li>Login to Onedrive.</li>
<li>From App Launcher, select SharePoint -&gt; My sites.</li>
<li>Search for the specific class -&gt; Site contents -&gt; Student Work -&gt; Submitted Files, click Download to download all submitted files or use Ctrl to select multiple students and click Download to download associated files.</li>
</ol>
<h1>cad2022</h1>
<h4>2022 Fall</h4>
<p>Computer aided Design and Practices 電腦輔助設計實習</p>
<h4>行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<div id="disqus_thread"></div>
<p>
<script>
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://mdetw.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
</p>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><h2>cad-syllabus</h2>
<h4>課程評分:</h4>
<p style="padding-left: 30px;">w3 建立 <a href="https://tcexam.org/">TCExam</a> 帳號, 進行模擬考試.</p>
<p style="padding-left: 30px;">w4 Exam1 (5%)</p>
<p style="padding-left: 30px;">w8 Exam2 (5%)</p>
<p style="padding-left: 30px;">w9 Exam3 (5%)</p>
<p style="padding-left: 30px;">w12 Exam4 (5%)</p>
<p style="padding-left: 30px;">w16 Exam5 (5%)</p>
<p style="padding-left: 30px;">w18 Exam6 (5%)</p>
<p style="padding-left: 30px;">Github Repository and Pages (70%)</p>
<p style="padding-left: 60px;">個人簡歷與課程進度心得</p>
<p style="padding-left: 60px;">課程內容操作影片 (<a href="https://www.debugmode.com/wink/">Wink3</a>)</p>
<p style="padding-left: 60px;">期中設計專案</p>
<p style="padding-left: 60px;">期末設計專案</p>
<h4>課程內容:</h4>
<h4 style="padding-left: 30px;">Design a Foosball Table:</h4>
<h4 style="padding-left: 60px;">期中設計專案:</h4>
<p style="padding-left: 90px;">請在個人網頁中, 建立一個 Foosball 頁面, 以 MCAD 套件建立所需的所有零組件檔案:</p>
<p style="padding-left: 120px;"><a href="https://www.youtube.com/watch?v=uhIqciRFMLM">How To Make a Desktop Foosball Table</a></p>
<p style="padding-left: 120px;"><a href="https://www.youtube.com/watch?v=PgnvZV5s13c">Foosball Table with 3d printing</a></p>
<p style="padding-left: 120px;"><a href="https://www.theseus.fi/bitstream/handle/10024/745224/Mohebi_Dani.pdf?sequence=3">The Study of Semi-Automated Football Table</a></p>
<p style="padding-left: 120px;"><a href="https://2019wcm.blogspot.com/2019/04/table-foosball.html">https://2019wcm.blogspot.com/2019/04/table-foosball.html</a></p>
<p style="padding-left: 90px;">評分項目 (<a href="https://pages.github.com/">Github Pages</a>, <a href="https://en.wikipedia.org/wiki/PDF">pdf</a>, <a href="https://revealjs.com/">reveal</a>, <a href="https://getpelican.com/">pelican</a>):</p>
<p style="padding-left: 120px;">專案摘要</p>
<p style="padding-left: 120px;">專案目錄</p>
<p style="padding-left: 120px;">設計簡介與目標</p>
<p style="padding-left: 120px;">相關文獻探討</p>
<p style="padding-left: 150px;">專利:</p>
<p style="padding-left: 180px;"><a href="https://patentimages.storage.googleapis.com/e5/81/ef/9799c9e66ba2f9/US2215687.pdf">Game Apparatus</a> (1939)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/8e/91/1f/ad20040354e5ee/US2507258.pdf">Simulated Hockey Game</a> (1950)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/7e/b4/25/f7590b2e8ad46f/US3724851.pdf">Table soccer or football game structure</a> (1973)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/91/99/2e/eb253894bd23c7/US3926432.pdf">Table soccer or football game structure</a> (1975)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/69/23/1f/16e1e961c81abb/US4382598.pdf">Rod Bearing for Table Soccer  or Fussball Game Structure</a> (1983)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/e3/dc/cd/bfb33b9ad4680d/US5072880.pdf">Sectional Rod Bearing for Fussball Game Structure</a> (1991)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/ef/7d/29/feabf8b805aad4/US5058892.pdf">Table Soccer or Fussball Game Playing Ball</a> (1991)<br> <br> <a href="https://patentimages.storage.googleapis.com/49/25/72/afbd4c20d23734/US5071137.pdf">Table Soccer Game Bumper Structure</a> (1991)<br> <br> <a href="https://patentimages.storage.googleapis.com/d3/1f/fc/c1d24b39561834/US5333864.pdf">Table Soccer Playing Figure</a> (1994)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/36/8b/ae/1a149f3094e2dd/USD347245.pdf">Soccer Table</a> (1994)<br> <br> <a href="https://patentimages.storage.googleapis.com/46/9b/74/7c25bf392913e4/US5630760.pdf">Convertible Game Table</a> (1997)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/61/83/92/582e246f118944/US6027251.pdf">Bracing Structure of Rotary Rod</a> (2000)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/69/ea/15/3c40119a551aa8/US6231046.pdf">Structure of a Soccer Game Table</a> (2001)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/20/cd/2b/8873ba5fe44dda/US6357744.pdf">Player Structure in a Fooz Ball Game</a> (2002)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/53/f1/94/c237bfb13e461c/US6464220.pdf">Retractable Rotating Rod for Football Table</a> (2002)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/ca/b0/c2/0ea0d3b03d67d1/US20100084812A1.pdf">Double Sided Soccer Man</a> (2010)<br/> <br/> <a href="https://patentimages.storage.googleapis.com/dd/fd/fd/58d26ff6b4a35a/US20120205865A1.pdf">Support Device for Slidable Shafts of Table Soccer Games</a> (2012)</br></br></br></br></br></br></p>
<p style="padding-left: 150px;">課程報告:</p>
<p style="padding-left: 180px;"><a href="https://mdecadp2018.github.io/site-40623128">https://mdecadp2018.github.io/site-40623128</a></p>
<p style="padding-left: 180px;"><a href="https://mdecadp2018.github.io/site-40623130">https://mdecadp2018.github.io/site-40623130</a></p>
<p style="padding-left: 180px;"><a href="https://mdecadp2018.github.io/site-40623224">https://mdecadp2018.github.io/site-40623224</a></p>
<p style="padding-left: 180px;"><a href="https://mdecadp2018.github.io/site-40623242">https://mdecadp2018.github.io/site-40623242</a></p>
<p style="padding-left: 150px;">大學部專題:</p>
<p style="padding-left: 180px;"><a href="https://www.theseus.fi/bitstream/handle/10024/745224/Mohebi_Dani.pdf">The Study of Semi-Automated Football Table</a></p>
<p style="padding-left: 150px;">研究報告:</p>
<p style="padding-left: 180px;"><a href="https://ieeexplore.ieee.org/search/searchresult.jsp?queryText=foosball">foosball keyword searching on IEEE</a></p>
<p style="padding-left: 180px;"><a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.5428&amp;rep=rep1&amp;type=pdf">Development Of Robotic Foosball As A Versatile Platform For Robotics Research and Contests</a> (2003)</p>
<p style="padding-left: 180px;"><a href="https://gki.informatik.uni-freiburg.de/papers/weigel-etal-robocup-02-kiro.pdf">Kiro</a> (2006)</p>
<p style="padding-left: 180px;"><a href="https://diglib.eg.org/bitstream/handle/10.2312/PE.vriphys.vriphys09.049-058/049-058.pdf?sequence=1&amp;isAllowed=y">Space Foosball: Coupling Tangible Interfaces with a Real-time Game Physics Engine</a> (2009)</p>
<p style="padding-left: 180px;"><a href="https://core.ac.uk/download/pdf/19161196.pdf">Automated Foosball Table</a> (2013)</p>
<p style="padding-left: 180px;"><a href="https://2019wcm.blogspot.com/search/label/foosball">https://2019wcm.blogspot.com/search/label/foosball</a></p>
<p style="padding-left: 180px;"><a href="https://www.ximea.com/en/corporate-news/foosball-table-robot-camera">https://www.ximea.com/en/corporate-news/foosball-table-robot-camera</a></p>
<p style="padding-left: 180px;"><a href="https://computing.ece.vt.edu/~steflee/pdfs/foosball-tracking.pdf">Foosball tracking</a> (2012)</p>
<p style="padding-left: 180px;"><a href="https://www.ece.ucf.edu/seniordesign/fa2012sp2013/g30/docs/Final%20Paper-%20G30.pdf">Foose</a> (2012)</p>
<p style="padding-left: 180px;"><a href="https://cduck.me/2015/robotic-foosball-table/">https://cduck.me/2015/robotic-foosball-table/</a> (2015)</p>
<p style="padding-left: 180px;"><a href="https://www.siliconrepublic.com/machines/chess-go-and-now-foosball-ai-is-coming-for-you">https://www.siliconrepublic.com/machines/chess-go-and-now-foosball-ai-is-coming-for-you</a> (2016)</p>
<p style="padding-left: 180px;"><a href="https://www.thestar.com/news/insight/2016/05/12/can-a-computer-beat-you-at-foosball-yes-yes-it-can.html">https://www.thestar.com/news/insight/2016/05/12/can-a-computer-beat-you-at-foosball-yes-yes-it-can.html</a> (2016)</p>
<p style="padding-left: 180px;"><a href="https://mro.massey.ac.nz/bitstream/handle/10179/15187/02_whole.pdf?sequen">Low latency vision-based control for robotics</a> (2018)</p>
<p style="padding-left: 180px;"><a href="https://www.researchgate.net/publication/341204434_KIcker_An_Industrial_Drive_and_Control_Foosball_System_automated_with_Deep_Reinforcement_Learning">KIcker</a> (2021)</p>
<p style="padding-left: 180px;"><a href="https://youtu.be/Hu7LFrP43tA">https://youtu.be/Hu7LFrP43tA</a></p>
<p style="padding-left: 180px;"><a href="https://forum.allaboutcircuits.com/threads/automated-foosball-hardware-advice-for-crazy-speeds.137860/">https://forum.allaboutcircuits.com/threads/automated-foosball-hardware-advice-for-crazy-speeds.137860/</a></p>
<p style="padding-left: 120px;">設計方法與工具 (<a href="https://solvespace.com">Solvespace</a>, <a href="https://www.onshape.com">Onshape</a>, NX 分屬三種不同類型的 MCAD 套件)</p>
<p style="padding-left: 150px;">可自行編譯延伸的 MCAD (<a href="https://solvespace.com">Solvespace</a>, <a href="https://verylowfreq.github.io/experimental-solvespace-on-browser/bin-2022081301/solvespace.html">Web version</a>, <a href="https://kevinlynagh.com/cadtron/">CADtron</a>) 套件</p>
<p style="padding-left: 150px;">可直接在雲端上執行的 MCAD (<a href="https://www.onshape.com">Onshape</a>) 套件</p>
<p style="padding-left: 150px;">可放入 USB 連網啟動的高階 MCAD (<a href="https://community.sw.siemens.com/s/question/0D54O00007ZW2YFSA1/nxcustom-for-nx-base-version-2206-revb">NX2206 revB</a>) 套件</p>
<p style="padding-left: 180px;"><a href="https://me5763.github.io/lab/">https://me5763.github.io/lab/</a></p>
<p style="padding-left: 180px;"><a href="https://www.youtube.com/channel/UChYht2a_KxGdqqJBQ00m4lA/videos">NX Tips Video</a></p>
<p style="padding-left: 120px;">設計結果</p>
<p style="padding-left: 120px;">設計討論</p>
<p style="padding-left: 120px;">附錄</p>
<h4 style="padding-left: 60px;">期末設計專案:</h4>
<p style="padding-left: 90px;">請根據期中專案所完成的設計零組件, 轉入 <a href="https://www.coppeliarobotics.com/downloads">CoppeliaSim 4.3.0 rev3</a> 以上版本後, 透過網路連線, 建立可讓 Human 與 Human 對打, Human 與 Computer 對打, 以及 Computer 與 Computer 對打的 Foosball 線上遊戲.</p>
<p style="padding-left: 120px;"><a href="https://www.coppeliarobotics.com/">https://www.coppeliarobotics.com/</a></p>
<p style="padding-left: 120px;"><a href="https://forum.coppeliarobotics.com/">https://forum.coppeliarobotics.com/</a></p>
<p style="padding-left: 120px;"><a href="https://mde.tw/pjcopsim">https://mde.tw/pjcopsim</a></p>
<p style="padding-left: 120px;"><a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<p style="padding-left: 90px;">評分項目:</p>
<p style="padding-left: 120px;">專案摘要</p>
<p style="padding-left: 120px;">專案目錄</p>
<p style="padding-left: 120px;">設計簡介與目標</p>
<p style="padding-left: 120px;">相關文獻探討</p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/welcome.html">CoppeliaSim Overview</a></p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/tutorials.html">CoppeliaSim Tutorials</a></p>
<p style="padding-left: 120px;">設計方法與工具</p>
<p style="padding-left: 150px;">自行編譯 CoppeliaSim: <a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/buildingAModelTutorial.html">Building a Clean Model</a></p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/joints.html">Joints</a></p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/kinematics.html">Kinematics</a></p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/designingDynamicSimulations.html">Desiging Dynamic Simulations</a></p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/writingCode.html">Writing Code</a></p>
<p style="padding-left: 180px;"><a href="https://mde.tw/pjcopsim/content/remoteApiOverview.html">RemoteAPI</a></p>
<p style="padding-left: 150px;"><a href="https://mde.tw/pjcopsim/content/externalFrontEnd.html">Web-browser based Front-end</a></p>
<p style="padding-left: 120px;">設計結果</p>
<p style="padding-left: 120px;">設計討論</p>
<p style="padding-left: 120px;">附錄</p>
<p style="padding-left: 120px;">期末簡報</p>
<h2>ME</h2>
<p><a href="https://www.sg-lib.org/">https://www.sg-lib.org/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/timlueth/SG-Lib-Matlab-Toolbox">https://github.com/timlueth/SG-Lib-Matlab-Toolbox</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/jan-mue/geometer">https://github.com/jan-mue/geometer</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/Dessia-tech/volmdlr">https://github.com/Dessia-tech/volmdlr</a></p>
<p><a href="https://gmnfuedutw-my.sharepoint.com/:b:/g/personal/yen_gm_nfu_edu_tw/EYAuJdRwebpLlY7DMcY4BSUBKXOAlq86mLhCFhhmfAu4TA?e=GjJ5rQ">A Method for the Automatic Design of Mechanisms on the Example of a Four-Bar Linkage.pdf</a> (for @gm users only) / <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EdZwjdzX4x5KuM2BHSLqRpgBI-5xlXPIztmzgVAMzFx-Zw?e=Vj61HN">for @nfu users</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-7091-2532-8">Basics of Robotics</a> (1999)</p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-3-319-01851-5.pdf">Fundamentals of Robotic Mechanical Systems</a> (2014)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-73022-2">Gears in Design, Production and Education</a> (2021)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-93220-6">Theory of Applied Robotics Kinematics Dynamics and Control</a> (2022)</p>
<p><a href="https://link.springer.com/book/10.1007/978-981-16-5007-9">Modular Robots: Theory and Practice</a> (2022)</p>
<p><a href="http://engineering.nyu.edu/mechatronics/smart/pdf/Intro2Robotics.pdf">Intro to Robotics</a></p>
<p><a href="https://www.theseus.fi/bitstream/handle/10024/37806/Shakhatreh_Fareed.pdf">The Basics of Robotics</a></p>
<p><a href="https://www.therobotreport.com/10-most-automated-countries-wordlwide-in-2020/">https://www.therobotreport.com/10-most-automated-countries-wordlwide-in-2020/</a></p>
<p><a href="https://wokwi.com/">https://wokwi.com/</a></p>
<p><a href="https://pimylifeup.com/raspberry-pi-virtualbox/">https://pimylifeup.com/raspberry-pi-virtualbox/</a></p><h3>Trends</h3>
<p><a href="https://workofthefuture.mit.edu/wp-content/uploads/2021/01/2020-Final-Report4.pdf">The Work of the Future 2020</a></p>
<p><a href="https://www3.weforum.org/docs/WEF_Future_of_Jobs_2020.pdf">Future of Jobs Report 2020</a></p>
<h4 style="padding-left: 30px;">根據上列 report, Key findings:</h4>
<p style="padding-left: 60px;">The pace of technology adoption is expected to remain unabated and may accelerate in some areas. The adoption of <strong>cloud computing</strong>, <strong>big data and e-commerce</strong> remain high priorities for business leaders, following a trend established in previous years. However, there has also been a significant rise in <strong>interest for encryption</strong>, <strong>non-humanoid robots</strong> and <strong>artificial intelligence</strong>.</p>
<p style="padding-left: 60px;">Automation, in tandem with the COVID-19 recession, is creating a 'double-disruption' scenario for workers. In addition to the current disruption from the pandemic-induced lockdowns and economic contraction, technological adoption by companies will transform tasks, jobs and skills by 2025. Forty-three percent of businesses surveyed indicate that they are set to <strong>reduce their workforce</strong> due to technology integration, 41% plan to expand their use of contractors for task-specialized work, and 34% plan to expand their workforce due to technology integration. By 2025, <strong>the time spent on current tasks at work by humans and machines will be equal</strong>. A significant share of companies also expect to make changes to locations, their value chains, and the size of their workforce due to factors beyond technology in the next five years.</p>
<p style="padding-left: 60px;">Although the number of jobs destroyed will be surpassed by the number of 'jobs of tomorrow' created, in contrast to previous years, job creation is slowing while <strong>job destruction accelerates</strong>. Employers expect that by 2025, <strong>increasingly redundant roles will decline</strong> from being 15.4% of the workforce to 9% (6.4% decline), and that <strong>emerging professions</strong> will grow from 7.8% to 13.5% (5.7% growth) of the total employee base of company respondents. Based on these figures, we estimate that by 2025, 85 million jobs may be displaced by <strong>a shift in the division of labour between humans and machines</strong>, while 97 million new roles may emerge that are more adapted to the <strong>new division of labour between humans, machines and algorithms</strong>.</p>
<p style="padding-left: 60px;"><strong>Skills gaps continue to be high</strong> as in-demand skills across jobs change in the next five years. The top skills and skill groups which employers see as rising in prominence in the lead up to 2025 include groups such as <strong>critical thinking and analysis</strong> as well as <strong>problem-solving</strong>, and skills in self-management such as <strong>active learning</strong>, <strong>resilience</strong>, <strong>stress tolerance and flexibility</strong>. On average, companies estimate that around 40% of workers will require <strong>reskilling of six months or less</strong> and 94% of business leaders report that they expect employees to <strong>pick up new skills on the job</strong>, a sharp uptake from 65% in 2018.</p>
<p style="padding-left: 60px;">The future of work <strong>has already arrived</strong> for a large majority of the <strong>online white-collar workforce</strong>. Eighty-four percent of employers are set to <strong>rapidly digitalize working processes</strong>, including a significant expansion of <strong>remote work</strong>—with the potential to move 44% of their workforce to <strong>operate remotely</strong>. To address concerns about productivity and well-being, about one-third of all employers expect to also take steps to create a sense of <strong>community, connection and belonging among employees through digital tools</strong>, and to tackle the well-being challenges posed by the shift to remote work.</p>
<p style="padding-left: 60px;">In the absence of proactive efforts, <strong>inequality</strong> is likely to be exacerbated by the dual <strong>impact of technology and the pandemic recession</strong>. Jobs held by lower wage workers, women and younger workers were more deeply impacted in the first phase of the economic contraction. Comparing the impact of the Global Financial Crisis of 2008 on <strong>individuals with lower education levels</strong> to the impact of the COVID-19 crisis, the impact today is far more significant and more likely to deepen existing inequalities.</p>
<p style="padding-left: 60px;"><strong>Online learning and training</strong> is on the rise but looks different for those in employment and those who are unemployed. There has been a four-fold increase in the numbers of individuals seeking out opportunities for learning online through their own initiative, a five-fold increase in employer provision of online learning opportunities to their workers and a nine-fold enrolment increase for learners accessing online learning through government programmes. Those in employment are placing larger <strong>emphasis on</strong> <strong>personal development courses</strong>, which have seen 88% growth among that population. Those who are unemployed have placed greater emphasis on <strong>learning digital skills</strong> such as <strong>data analysis</strong>, <strong>computer science</strong> and <strong>information technology</strong>.</p>
<p style="padding-left: 60px;">The window of opportunity to <strong>reskill and upskill workers</strong> has become shorter in the newly constrained labour market. This applies to workers who are likely to stay in their roles as well as those who risk losing their roles due to rising recession-related unemployment and can no longer expect to retrain at work. For those workers set to remain in their roles, the share of <strong>core skills that will change</strong> in the next five years is 40%, and 50% of all employees will need reskilling (up 4%).</p>
<p style="padding-left: 60px;">Despite the current <strong>economic downturn</strong>, the large majority of employers recognize the value of human capital investment. An average of 66% of employers surveyed expect to get a return on <strong>investment in upskilling and reskilling</strong> within one year. However, this time horizon risks being too long for many employers in the context of the current economic shock, and nearly 17% remain uncertain on having any return on their investment. On average, employers expect to offer reskilling and upskilling to just over 70% of their employees by 2025. However, employee engagement into those courses is lagging, with only 42% of employees taking up employer-supported reskilling and upskilling opportunities.</p>
<p style="padding-left: 60px;">Companies need to invest in <strong>better metrics of human and social capital</strong> through adoption of environmental, social and governance (ESG) metrics and matched with renewed measures of human capital accounting. A significant number of business leaders understand that reskilling employees, particularly in industry coalitions and in <strong>public-private collaborations</strong>, is both cost-effective and has significant mid- to long-term dividends—not only for their enterprise but also for the benefit of society more broadly. Companies hope to internally redeploy nearly 50% of workers displaced by <strong>technological automation and augmentation</strong>, as opposed to making wider use of layoffs and automation-based labour savings as a core workforce strategy.</p>
<p style="padding-left: 60px;">The public sector needs to provide stronger support for <strong>reskilling and upskilling</strong> for<br/>at-risk or displaced workers. Currently, only 21% of businesses report being able to make use of public funds to support their employees through reskilling and upskilling. The public sector will need to create incentives for investments in the markets and jobs of tomorrow; provide stronger safety nets for displaced workers in the midst of job transitions; and to decisively <strong>tackle long- delayed improvements to education and training systems</strong>. Additionally, it will be important for governments to consider the longer-term labour market implications of maintaining, withdrawing or partly continuing the strong COVID-19 crisis support they are providing to support wages and maintain jobs in most advanced economies.</p>
<p><a href="https://milkeninstitute.org/sites/default/files/2021-04/MI%20Future%20of%20Work%20Report%20-%20FINAL.pdf">Future of Work Report 2021</a></p>
<h4 style="padding-left: 30px;">根據上列 report, KEY TAKEAWAYS:</h4>
<p style="padding-left: 30px;">The COVID-19 pandemic is a double-whammy for inequality: The worst-off are hit harder while <strong>accelerating economy-wide digitalization</strong> further widens the skills gap.</p>
<p style="padding-left: 30px;">This report highlights technology's increasing impact on the workplace, providing valuable information for policymakers, business leaders, and educational institutions so they can make better decisions about how to prepare workers for the future.</p>
<p style="padding-left: 30px;">First, the report describes attitudes and perspectives toward <strong>remote work and skills training</strong>, using a "Future of Work" survey of 1,000 managers and employees by technology consulting firm Infosys. Key findings include:</p>
<p style="padding-left: 60px;">a broad shift toward <strong>remote working and hiring</strong>, with a greater focus on inclusion and diversity (however, lower-wage respondents saw fewer opportunities);</p>
<p style="padding-left: 60px;">net satisfaction with remote work and productivity, notwithstanding higher workloads and the loss of social interactions with colleagues;</p>
<p style="padding-left: 60px;">high trust in employees during remote work, though with increased surveillance; and</p>
<p style="padding-left: 60px;">a rise in employee skills training focused on working remotely, which most employees found useful (however, lower-wage employees felt more responsible for training themselves).</p>
<p style="padding-left: 30px;">Building on these findings, this report makes several recommendations to address rising inequality and disruption, supplemented with insights generated from numerous public events the Milken Institute has convened. These recommendations include:</p>
<p style="padding-left: 60px;">accelerating regional growth through public investments that broaden access to local sectors with high potential;</p>
<p style="padding-left: 60px;">financing access to education and skills training, including for underprivileged populations;</p>
<p style="padding-left: 60px;">strengthening business-education partnerships, including <strong>just-in-time learning</strong>, <strong>agile curricula</strong>, and <strong>flexible time commitment</strong>; and</p>
<p style="padding-left: 60px;">regular and outcomes-based evaluation of initiatives, to continually identify areas for improvement.</p>
<p></p><h3>Gears</h3>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-92262-7">Advances in Gear Theory and Gear Cutting Tool Design</a> (2022)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-64638-7">Recent Advances in Gearing</a> (2022)</p><h3>Robots</h3>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-90848-5">Fundamentals of Mechanics of Robotic Manipulation</a> (2022)</p>
<h3>Vehicle</h3>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-75884-4">Vehicle Dynamics</a> (2022)</p><h3>Aircraft</h3>
<p><a href="https://github.com/convexengineering/SPaircraft">https://github.com/convexengineering/SPaircraft</a></p>
<p><a href="https://convex.mit.edu/publications/spajoa_final.pdf">2017_Application of Signomial Programming to Aircraft Design.pdf</a></p>
<p><a href="https://convex.mit.edu/publications/turbofanSP.pdf">2017_Turbofan Engine Sizing and Tradeoff Analysis via Signomial Programming.pdf</a></p>
<p><a href="https://github.com/camUrban/PteraSoftware">https://github.com/camUrban/PteraSoftware</a></p>
<p><a href="https://github.com/vibrationtoolbox/vibration_toolbox">https://github.com/vibrationtoolbox/vibration_toolbox</a></p>
<p><a href="https://github.com/white-noise-ntua/autogyro-blades-optimization">https://github.com/white-noise-ntua/autogyro-blades-optimization</a></p>
<p><a href="https://github.com/matst1008/FlyPy">https://github.com/matst1008/FlyPy</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-83144-8">Automated Low-Altitude Air Delivery</a> (2022)</p>
<p><a href="http://www.hevac-heritage.org/e-books_large/fan_engineering_1840/FAN_contents-1/[1]FANS-INTRODUCTION.pdf">Fan Engineering 1840-1930</a></p>
<p style="padding-left: 30px;"><a href="http://www.hevac-heritage.org">http://www.hevac-heritage.org</a></p>
<h3>3D print</h3>
<p><a href="https://link.springer.com/book/10.1007/978-1-4419-1120-9">Additive Manufacturing Technologies</a> (2010)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-89401-6">Innovations in Additive Manufacturing</a> (2022)</p>
<h3>Computer Vision</h3>
<p><a href="https://link.springer.com/book/10.1007/978-1-84882-935-0">Computer Vision</a> (2011)</p>
<p></p><h3>Industry 4.0</h3>
<p><a href="https://link.springer.com/book/10.1007/978-3-662-64448-5">Handbook Industry 4.0</a> (2022)</p><h2>Reference</h2>
<p><a href="https://mdecadp2018.github.io/site-40623128">https://mdecadp2018.github.io/site-40623128</a></p>
<p><a href="https://mdecadp2018.github.io/site-40623130">https://mdecadp2018.github.io/site-40623130</a></p>
<p><a href="https://mdecadp2018.github.io/site-40623224">https://mdecadp2018.github.io/site-40623224</a></p>
<p><a href="https://mdecadp2018.github.io/site-40623242">https://mdecadp2018.github.io/site-40623242</a></p>
<h3>Portable NX1980</h3>
<p>在 Windows 10 配置可攜 NX1980 程式, 需要:</p>
<ol>
<li><a href="https://github.com/Bioruebe/UniExtract2">https://github.com/Bioruebe/UniExtract2</a></li>
<li><a href="https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm">https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm</a></li>
</ol>
<p>等兩項工具, UniExtract2 用來解開 SiemensNX-1980_wntx64\nx\SiemensNX.msi, 以及 .msi, 而 wix 則用來解開 SiemensNX-1980_wntx64\nx\VC_redist.x64.exe, 指令為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">wix311-binaries\dark.exe vc_redist.x64.exe -x x64-extracted</pre>
<p>表示要在 x64-extracted 目錄中取得 x64-extracted\AttachedContainer\packages\vcRuntimeMinimum_amd64\vc_runtimeMinimum_x64.msi 之後, 再利用 UniExtract2 解開所需的 dll 檔案後, 再放入 NXBIN 目錄.</p>
<p>製作 Portable NX1980 的步驟請參考以下影片:</p>
<p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_portable_nx1980.mp4" type="video/mp4"/></video></div>
<h3>template and SSH</h3>
<p>以下教學影片說明如何利用 <a href="https://github.com/wcm2022/wcm2022">https://github.com/wcm2022/wcm2022</a> 倉儲作為 template, 建立個人與分組的倉儲. 並且利用 putty 與 GIT_SSH 變數的設定, 採用 SSH 網路協定對 Github 上的倉儲進行改版:</p>
<p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_template.mp4" type="video/mp4"/></video></div>
<h3>Pull Requests</h3>
<p>以下影片說明如何利用 Pull Requests 對沒有協同管理權限的 github 倉儲進行改版後, 要求合併內容:</p>
<p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/2a_w3_studlist_pull_requests.mp4" type="video/mp4"/></video></div>
<p>以下影片說明如何透過逆向 Pull Requests 讓各學員帳號下的分組倉儲與組長帳號下的協同倉儲內容保持同步:</p>
<p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
    "1682": [
      { type: "gotourl", rect: { x: 321, y: 166, width: 60, height: 24 }, target: "https://support.mozilla.org/en-US/questions/1230877", window: "reset certificate" },
    ],
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w5_pull_request.mp4" type="video/mp4"/></video></div>
<h3>Resolve Conflicts</h3>
<h4>解決協同設計流程中的倉儲衝突</h4>
<p>當各組學員對組長帳號下的分組倉儲具備協同管理權限後, 各學員可以 git 採非同步協同設計, 對組長帳號下的分組倉儲進行改版, 其間不免要設法以手動方式解決 config/content.htm 動態超文件中的衝突.</p>
<p>以下影片就是利用動態網頁系統中的 Search 與 Edit All 設法找出帶有衝突起點、中線與衝突終點的超文件範圍, 然後根據協同設計整體需求解決衝突後, 新增、提交並推送新版本.</p>
<hr/>
<p>
<script>
var winkVideoData_resolve_conflict = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_resolve_conflict" height="630" muted="true" width="1008">
<source src="/downloads/w11_resolve_conflict.mp4" type="video/mp4"/></video></div>
<div class="winkVideoContainerClass"><hr/></div>
<h3>Revealjs</h3>
<p><a href="https://revealjs.com/">https://revealjs.com/</a> 是一個 Javascript 程式框架, 可用來建立全球資訊網上的簡報.</p>
<p>將 reveal.js 納入分組倉儲的真正目的, 是能直接在統一的 GitHub 提交推送過程中, 持續查核各組員對於協同產品開發流程的貢獻度.</p>
<p>至於為何要利用 markdown 格式, 在 Leo Editor 中轉為 index.html 進行展示, 是希望在組員改版間避開以 html 格式處理衝突的難度.</p>
<p>課程中所採的各種方法並非限制, 而是在衡量協同利弊得失後的可行方法之一.你們可以就各種工具在協同產品設計流程中的應用. 進行討論及實作, 然後查驗所採行的方法是否也能:</p>
<ol>
<li>持續改進</li>
<li>保有各組員的改版紀錄</li>
<li>方便處理合併及展示</li>
<li>具永續性及可應變性</li>
</ol>
<p><a href="https://github.com/hakimel/reveal.js">https://github.com/hakimel/reveal.js</a> 引用了許多 Javascript 程式庫, 這些程式庫的改版非常頻繁, 經常造成改版頻率相對緩慢的 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 經常收到來自 Github 的改版通知.</p>
<p>因此在利用 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 建立 cd2022 課程網站與大分組網站時, 若要直接使用 Reveal.js 建立線上簡報, 就必須將 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 的 reveal 目錄內容保持在最新的 Reveal.js 版本.</p>
<p><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a> 就是用於開發 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 的倉儲. cmsimde_site 的 main 分支直接將 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 內容放入 cmsimde 目錄, 可以直接根據需求修改其中的任何內容, 當測試無誤後(尚未使用 <a href="https://docs.python.org/3/library/unittest.html">unittest</a>), 將改版內容反應至 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 後, 將在 cmsimde_site 倉儲中的 submodule 分支中進行測試.</p>
<p>由於 cmsimde_site 的 main 分支直接將 cmsimde 當作子目錄, 而 submodule 分支則將 cmsimde 當作子模組. 從 main 分支切換到 submodule, 由於需要同時取下 cmsimde 子模組資料, 因此使用:</p>
<p style="padding-left: 30px;">git checkout -f submodule --recurse-submodules</p>
<p>而從 submodule 分支切換回 main 分支, 則使用:</p>
<p style="padding-left: 30px;">git checkout -f main</p>
<p><a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 倉儲中的 config/reveal.leo 使用 <a href="https://leoeditor.com/">Leo Editor</a> 編輯各簡報頁面內容. reveal.leo 中包含 demo.html 中的各種簡報應用, 使用者可以從 Leo Editor 專案中取出所需的簡報頁面進行編輯.</p>
<p>以下影片說明如何利用 Leo Editor 編輯 config/reveal.leo 網際簡報檔案:</p>
<p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_reveal.mp4" type="video/mp4"/></video></div>
<p>以下影片說明如何利用 Leo Editor 編輯 config/pelican.leo 網誌檔案:</p>
<p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w6_blog.mp4" type="video/mp4"/></video></div>
<h3>Virtualbox</h3>
<p>利用 nssm 與 vboxheadless 啟動虛擬主機.</p>
<p>nssm install nxserver</p>
<p>nssm edit nxserver</p>
<p>nssm remove nxserver</p>
<p style="padding-left: 30px;">Path: C:\Program Files\Oracle\VirtualBox\VBoxHeadless.exe</p>
<p style="padding-left: 30px;">Startup directory: C:\pj2022</p>
<p style="padding-left: 30px;">Arguments: --startvm nxserver</p>
<p style="padding-left: 30px;">Log on: 輸入管理者帳號與密碼</p>
<h3>cube</h3>
<p>以下為採用 NX1980 繪製的正方體零件, 可能原先的繪圖流程是在草圖階段繪圖時並未對長度與寬度設定尺寸, 就直接長出實體, 然後再回到草圖設定尺寸, 因此 Tools -&gt; Expressions 以 p1 定義高度, 而長度則設為 p2, 寬度設為 p3, 在沒有透過 set Expressions 對長度與寬度對應尺寸約束之前, 在 Tools -&gt; Expressions 只能看到 p1, 其實 p2 與 p3 應該已經跟草圖的尺寸綁定, 因此可以透過 NXOpen Python API 程式 對無列出長寬尺寸變數的零件進行操控, 看是否能夠利用 p2 與 p3 變數控制草圖大小.</p>
<p>以下為設法透過草圖編輯列出尺變數的 Wink 影片:</p>
<p><a href="/downloads/w10_cube_1980_cubes.7z">參考零件.7z</a></p>
<p>
<script>
var winkVideoData_40923151 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_40923151" height="630" muted="true" width="1008">
<source src="/downloads/w10_cube.mp4" type="video/mp4"/></video></div>
<h2>Solvespace</h2>
<p><a href="https://solvespace.com">https://solvespace.com</a></p>
<p><a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a></p>
<p><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a></p>
<p>將 Solvespace 轉出的 Binary STL 零組件轉為 ASCII STL 程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import struct
normals = []
points = []
triangles = []
triangle_number = 0
def load_binary_stl(fp):
    '''
    二位元 STL 檔案格式如下:
    檔案標頭共有 80 個字元(bytes), 內容通常省略, 但是內容不可使用 solid, 以免與文字檔案 STL 混淆
    UINT8[80] – Header
    UINT32 – Number of triangles (I:佔 4 bytes 的 unsigned integer)
   
    foreach triangle
    REAL32[3] – Normal vector (f:每一座標分量為一佔 4 bytes 的 float, 共佔 12 bytes)
    REAL32[3] – Vertex 1
    REAL32[3] – Vertex 2
    REAL32[3] – Vertex 3
    UINT16 – Attribute byte count (H:兩個 bytes 的 unsigned short, 表示 attribute byte count)
    end
   
    '''
    # 已經在外部開檔
    #fp=open(filename,'rb')
    header=fp.read(80)
    triangle_number = struct.unpack('I',fp.read(4))[0]
    #print(triangle_number)
    count=0
    while True:
        try:
            p=fp.read(12)
            if len(p)==12:
                n=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                normals.append(n)
                l = len(points)
                #print(n)
            p=fp.read(12)
            if len(p)==12:
                p1=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                points.append(p1)
                #print(p1)
            p=fp.read(12)
            if len(p)==12:
                p2=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                points.append(p2)
            p=fp.read(12)
            if len(p)==12:
                p3=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                points.append(p3)
                triangles.append((l, l+1, l+2))
            # 使用 count 來計算三角形平面個數
            # triangle_number 為 STL 檔案中的三角形個數
            count += 1
            #print(count)
            # 在前面 12*4 個 bytes 的 normal 與三個點資料後, 為
            # 一個 2 bytes 長的 unsigned short, 其值為零, 為 attribute
            fp.read(2)
            # 讀完所有三角平面後, 即跳出 while
            if count &gt; triangle_number:
                break
        except EOFError:
            break
    #fp.close()
def read_length(f):
    length = struct.unpack("@i", f.read(4))
    return length[0]
def read_header(f):
    f.seek(f.tell()+80)
def write_as_ascii(outfilename):
    f = open(outfilename, "w")
    f.write ("solid "+outfilename+"\n")
    for n  in range(len(triangles)):
        f.write ("facet normal {} {} {}\n".format(normals[n][0],normals[n][1],normals[n][2]))
        f.write ("outer loop\n")
        f.write ("vertex {} {} {}\n".format(points[triangles[n][0]][0],points[triangles[n][0]][1],points[triangles[n][0]][2]))
        f.write ("vertex {} {} {}\n".format(points[triangles[n][1]][0],points[triangles[n][1]][1],points[triangles[n][1]][2]))
        f.write ("vertex {} {} {}\n".format(points[triangles[n][2]][0],points[triangles[n][2]][1],points[triangles[n][2]][2]))
        f.write ("endloop\n")
        f.write ("endfacet\n")
    f.write ("endsolid "+outfilename+"\n")
    f.close()
def main():
    infilename = "binary.stl"
    outfilename = "ascii.stl"
    try:
        f = open(infilename, "rb")
        #read_header(f)
        #l = read_length(f)
        try:
            load_binary_stl(f)
            l = len(normals)
        except Exception as e:
            print("Exception",e)
        print(len(normals), len(points), len(triangles), l)
        write_as_ascii(outfilename)
        print("done")
    except Exception as e:
        print(e)
if __name__ == '__main__':
    main()</pre>
<h4>切割多零件 STL 檔案:</h4>
<p>stlSplitter.py 與 stlRW.py</p>
<p>stlSplitter.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python
# STL splitter
# splits a STL file containing separate objects
#
# copyright 2014 Francesco Santini &lt;francesco.santini@gmail.com&gt;
#
# based on https://github.com/cmpolis/convertSTL by Chris Polis
# and BinarySTL https://github.com/sukhbinder/python by Sukhbinder Singh
#
# Released under the MIT/X license
 
 
import stlRW
import sys
from os import path
 
## functions
 
# maybe insert a tolerance for floating points?
def check_connection(tri1, tri2):
    for v1 in tri1[0:2]:
        for v2 in tri2[0:2]:
            if (v1[0] == v2[0] and v1[1] == v2[1] and v1[2] == v2[2]): return True
    return False
     
 
if len(sys.argv) &lt; 2:
    print("Usage: " + sys.argv[0] + " &lt;file.stl&gt;")
    sys.exit(-1)
 
fname = sys.argv[1]
 
print("Reading...")
 
head,points,n,v1,v2,v3,isAscii = stlRW.stlRead(fname)
 
print("Analyzing...")
 
faceTree = []
 
for triangleIndex in range(0, len(v1)):
    triangle = [ v1[triangleIndex], v2[triangleIndex], v3[triangleIndex], n[triangleIndex] ]
    connectedTo = []
    for treeindex in range(0, len(faceTree)):
        for face in faceTree[treeindex]:
            if check_connection(face, triangle):
                connectedTo.append(treeindex) # the triangle is connected to at least one triangle of the current treeIndex
                break
       
    if len(connectedTo) == 0:
        # this is a triangle from a new set
        #print "new set"
        faceTree.append([])
        faceTree[len(faceTree)-1].append(triangle)
    elif len(connectedTo) == 1:
        #print "existing set"
        # the triangle is connected to one set
        faceTree[connectedTo[0]].append(triangle)
    else:
        #print "connecting triangle"
        #this triangle connects two branches of the tree: collapse the branches
        faceTree[connectedTo[0]].append(triangle)
        for i in range(len(connectedTo)-1, 0, -1):
            faceTree[connectedTo[0]].extend(faceTree.pop(connectedTo[i]))
       
print("Number of separate objects: ", len(faceTree))
 
print("Writing files")
 
origFile, origExt = path.splitext(fname)
for i in range(0, len(faceTree)):
    newFile = origFile + "-" + str(i+1) + origExt
    print("Writing ", newFile)
    n = [field[2] for field in faceTree[i]]
    v1 = [field[0] for field in faceTree[i]] 
    v2 = [field[1] for field in faceTree[i]] 
    v3 = [field[2] for field in faceTree[i]]
    stlRW.stlWrite(newFile, n, v1, v2, v3)</pre>
<p>stlRW.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># STL reader-writer
#
# copyright 2014 Francesco Santini &lt;francesco.santini@gmail.com&gt;
#
# based on https://github.com/cmpolis/convertSTL by Chris Polis
# and BinarySTL https://github.com/sukhbinder/python by Sukhbinder Singh
#
# Released under the MIT/X license
 
import numpy as np
from struct import unpack, pack
 
def stlReadBinary(fname):
    fp = open(fname, 'rb')
    Header = fp.read(80)
    nn = fp.read(4)
    Numtri = unpack('i', nn)[0]
    #print nn
    record_dtype = np.dtype([
                  ('normals', np.float32,(3,)),  
                  ('Vertex1', np.float32,(3,)),
                  ('Vertex2', np.float32,(3,)),
                  ('Vertex3', np.float32,(3,)) ,              
                  ('atttr', '&lt;i2',(1,) )
    ])
    data = np.fromfile(fp , dtype = record_dtype , count =Numtri)
    fp.close()
 
    Normals = data['normals']
    Vertex1= data['Vertex1']
    Vertex2= data['Vertex2']
    Vertex3= data['Vertex3']
 
    p = np.append(Vertex1,Vertex2,axis=0)
    p = np.append(p,Vertex3,axis=0) #list(v1)
    Points =np.array(list(set(tuple(p1) for p1 in p)))
 
    return Header,Points,Normals,Vertex1,Vertex2,Vertex3,False
 
def stlReadAscii(fname):
    fp = open(fname, 'r')
    Normals = []
    Vertex1 = []
    Vertex2 = []
    Vertex3 = []
    Points = []
    while True:
        line = fp.readline()
        if not line: break
        if line.find("solid") &gt; -1 or line.find("endfacet") &gt; -1: continue
        if line.find("facet normal") &gt; -1:
            normline = line[line.find("facet normal")+len("facet normal"):]
            normal = np.array([float(val.strip()) for val in normline.split()])
            Normals.append(normal)
            vertices = []
            fp.readline() # outer loop
            # read vertices after normal
            for vIndex in range(0,3):
                vLine = fp.readline()
                vLine = vLine[vLine.find("vertex")+len("vertex"):]
                vertices.append(np.array([float(val.strip()) for val in vLine.split()]))
            Vertex1.append(vertices[0])
            Vertex2.append(vertices[1])
            Vertex3.append(vertices[2])
            Points.extend(vertices)
            fp.readline() # endloop
    return "", Points, Normals, Vertex1, Vertex2, Vertex3,True
     
   
def stlRead(fname):
    fp = open(fname, "r")
    try:
        if fp.readline().find("solid") &gt; -1:
            fp.close()
            return stlReadAscii(fname)
        else:
            fp.close()
            return stlReadBinary(fname)
    except:
        return stlReadBinary(fname)
     
def stlWriteBinary(fname, normals, v1, v2, v3):
    with open(fname, "wb") as fout:
        # write 80 bytes header
        for i in range(0, 80): fout.write(pack("&lt;c", b" "))
        fout.write(pack("&lt;I", len(normals))) # number of triangles
        for i in range(0, len(normals)):
            fout.write(pack("&lt;fff", *normals[i]))
            fout.write(pack("&lt;fff", *v1[i]))
            fout.write(pack("&lt;fff", *v2[i]))
            fout.write(pack("&lt;fff", *v3[i]))
            fout.write(pack("&lt;H", 0)) # attribute
       
def writeVector(fd, vec):
    for v in vec:
        fd.write("{:.7e}".format(v))
        fd.write(" ")
       
def stlWriteAscii(fname, normals, v1, v2, v3):
    with open(fname, "w") as fout:
        fout.write("solid \n")
        for i in range(0, len(normals)):
            fout.write("  facet normal ")
            writeVector(fout, normals[i])
            fout.write("\n")
            fout.write("    outer loop\n")
            fout.write("      vertex ")
            writeVector(fout, v1[i])
            fout.write("\n")
            fout.write("      vertex ")
            writeVector(fout, v2[i])
            fout.write("\n")
            fout.write("      vertex ")
            writeVector(fout, v3[i])
            fout.write("\n")
            fout.write("    endloop\n")
            fout.write("  endfacet\n")
       
       
def stlWrite(fname, normals, v1, v2, v3, isAscii=False):
    if isAscii:
        stlWriteAscii(fname, normals, v1, v2, v3)
    else:
        stlWriteBinary(fname, normals, v1, v2, v3)
       
# test
if __name__ == "__main__":
    import sys
    fname = sys.argv[1]
    h,p,n,v1,v2,v3,isAscii = stlRead(fname)
    print(len(n))
    print(v1[0])
    stlWriteBinary("binary.stl", n, v1, v2, v3);
    stlWriteAscii("ascii.stl", n, v1, v2, v3);</pre>
<p>用法:</p>
<p style="padding-left: 30px;">python stlSplitter.py solvespace_assembly_ascii.stl</p>
<p>目前可以分割從 Solvespace 轉出的組立檔案, 但是各零件比例與座標位置錯誤, 希望修正後可以套用到 wrl 組立件檔案的分割, 以便將 Solvespace 轉出的 wrl 組立檔案輸入 Webots.</p>
<p>Solvespace 轉出的 STL 組件, 利用 stlSplitter.py 轉出各零件 STL 後, 再利用 <a href="https://www.patrickmin.com/meshconv/">https://www.patrickmin.com/meshconv/</a> 轉為 WRL, 之後再將 WRL 零件轉入 Webots.</p>
<p>STL 零件檔案也可以利用 <a href="https://github.com/cnr-isti-vclab/meshlab">https://github.com/cnr-isti-vclab/meshlab</a> (GUI 以 Qt 編寫) 轉為 WRL, 之後再轉入 Webots.</p>
<p style="padding-left: 30px;">相關 converter 程式與 meshconv.exe: </p>
<p style="padding-left: 60px;"><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EWjKjLe_XOlItHMNYKX54mABiy-fdfRZ4ZZYLJNSkTWK9Q?e=JXJp3S">meshconv_stl_split_and_converter.7z</a> (for @nfu users only)</p>
<p style="padding-left: 30px;">可攜 <a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EZl4rhs3STFEg64VZ0Wp_2gBQZ59_zDo1G00-ZLk1SCHZQ?e=YsXSJV">meshlab_portable.7z</a> (for @nfu users only)</p>
<hr/>
<p>Split STL in Javascript: <a href="http://mde.tw/cad2019/downloads/splitstl/">http://mde.tw/cad2019/downloads/splitstl/</a></p>
<p>Split STL in C++: <a href="https://github.com/admesh/stlsplit">https://github.com/admesh/stlsplit</a></p>
<p>STL viewer in C: <a href="https://github.com/hroncok/viewstl">https://github.com/hroncok/viewstl</a></p>
<p>Flutter and three.js: <a href="https://github.com/andreibosco/flutter_threejs_test">https://github.com/andreibosco/flutter_threejs_test</a></p>
<p><a href="https://nfuedu.sharepoint.com/:b:/s/cad2022/ESSIbY3PBIpMssjlvNBRBk4BSUSsyQl1sQnTh8IIWQiQSQ?e=V7ufLT">An Optimal Algorithm for 3D Triangle Mesh Slicing.pdf</a> (for @nfu users only)</p>
<h4>Libfivepy</h4>
<p><a href="https://gitlab.com/rcmz0/libfivepy">https://gitlab.com/rcmz0/libfivepy</a></p>
<p><a href="https://github.com/mkeeter/fstl">https://github.com/mkeeter/fstl</a></p>
<p><a href="https://github.com/wxkNeter/qt-stl">https://github.com/wxkNeter/qt-stl</a></p><h2>Realizable</h2>
<p>機械元件建模工具:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2021/content/Compile%20Solvespace.html">Solvespace</a> (開源)、<a href="https://mde.tw/cad2021_hw/content/NX1980.html">NX1980</a> (高端)、<a href="https://www.onshape.com/en/">Onshape</a> (全雲端)</p>
<p>電子電機控制與感測模擬工具:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3462-4">Beginning Robotics with Raspberry Pi and Arduino</a> (在校園網路下載)</p>
<p style="padding-left: 30px;">Wokwi (web-based):</p>
<p style="padding-left: 60px;"><a href="https://wokwi.com/">https://wokwi.com/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/wokwi">https://github.com/wokwi</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/wokwi">https://github.com/wokwi</a></p>
<p style="padding-left: 60px;"><a href="https://wokwi.com/arduino/libraries/Servo/Sweep">Servo motor 控制</a></p>
<p style="padding-left: 30px;"><a href="https://www.sites.google.com/site/unoardusim/services">Unoardusim</a> (單機)</p>
<p style="padding-left: 30px;"><a href="https://lcgamboa.github.io/">PICSimLab</a> (開源)</p>
<p>3D 列印與模擬工具</p>
<p style="padding-left: 30px;">G-code based 列印模擬:</p>
<p style="padding-left: 60px;"><a href="https://github.com/sudipchakraborty/A-simulated-3D-Printer-In-CoppeliaSim">https://github.com/sudipchakraborty/A-simulated-3D-Printer-In-CoppeliaSim</a> (<a href="https://zenodo.org/record/5897079">Paper</a>)</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/gsim">https://github.com/mdecourse/gsim</a> (執行需要 PyGObject, <a href="https://mde.tw/wcm2022/content/Project5.html">參考</a>)</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/FIBR3DEmul">https://github.com/mdecourse/FIBR3DEmul</a> (CoppeliaSim plugin in Cpp, <a href="http://wcm.cycu.org:88/github/cd2022/downloads/FIBR3DEmul—an open-access simulation solution for 3D printing processes of FDM machines with 3 plus actuated axes.pdf">paper)</a></p>
<p style="padding-left: 60px;">G-code processing:</p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/gcode_machine">https://github.com/mdecourse/gcode_machine</a></p>
<p style="padding-left: 30px;">3D Printer based 列印模擬:</p>
<p style="padding-left: 60px;"><a href="https://all3dp.com/2/gcode-viewer-3d-printer-simulator-best-tools/">https://all3dp.com/2/gcode-viewer-3d-printer-simulator-best-tools/</a></p>
<p>雷射切割模擬工具:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/papercraft">https://github.com/mdecourse/papercraft</a>  (Unfold STL for laser cutting)</p>
<h2>Bash</h2>
<p>Bash: <a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">https://en.wikipedia.org/wiki/Bash_(Unix_shell)</a></p>
<p>acp</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
# bash script for Linux and Mac
# chmod u+x acp
# source acp "commit message"
git add .
git commit -m "$1"
git push</pre>
<p>cms</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
# for Linux and Mac
# chmod u+x cms
# source cms
python3 cmsimde/wsgi.py</pre>
<p>ssh-keygen: <a href="https://en.wikipedia.org/wiki/Ssh-keygen">https://en.wikipedia.org/wiki/Ssh-keygen</a> </p>
<p>chmod: <a href="https://en.wikipedia.org/wiki/Chmod">https://en.wikipedia.org/wiki/Chmod</a></p>
<p>vi: <a href="https://en.wikipedia.org/wiki/Vi">https://en.wikipedia.org/wiki/Vi</a></p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6873-5">2021 Pro Windows Subsystem for Linux (WSL) </a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-1081-8">2008 Beginning Ubuntu LTS Server Administration</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-0649-1">2008 Beginning Ubuntu Linux</a></p><h2>Leo Editor</h2>
<p><a href="https://leoeditor.com/">https://leoeditor.com/</a></p>
<p><a href="https://github.com/leo-editor/leo-editor">https://github.com/leo-editor/leo-editor</a></p>
<p><a href="https://groups.google.com/g/leo-editor">https://groups.google.com/g/leo-editor</a></p>
<p><a href="https://edreamleo.blogspot.com/">https://edreamleo.blogspot.com/</a></p><h2>Fossil SCM</h2>
<p><a href="https://www.fossil-scm.org">https://www.fossil-scm.org</a></p>
<p><a href="https://sqlite.org/whynotgit.html">https://sqlite.org/whynotgit.html</a></p>
<h2>Classroom</h2>
<p><a href="https://youtu.be/4i1D5rIrkAM">https://youtu.be/4i1D5rIrkAM</a></p>
<h2>Gazebo</h2>
<p><a href="https://gazebosim.org">https://gazebosim.org</a></p>
<p><a href="https://community.gazebosim.org/">https://community.gazebosim.org/</a></p>
<p><a href="https://gazebosim.org/docs/garden/install_windows_src">https://gazebosim.org/docs/garden/install_windows_src</a></p>
<h2>Webots</h2>
<p><a href="https://cyberbotics.com">https://cyberbotics.com</a></p>
<p><a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<p><a href="https://robotbenchmark.net/">https://robotbenchmark.net/</a></p>
<h2>Deep RL</h2>
<p>Deep Learning:</p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/playlist?list=PLtBw6njQRU-rwp5__7C0oIVt26ZgjG9NI">Introduction to Deep Learning</a> from MIT (2022)</p>
<p style="padding-left: 30px;">Lecture <a href="https://youtu.be/7sB052Pz0sQ">1</a>, <a href="https://youtu.be/QvkQ1B3FBqA">2</a>, <a href="https://youtu.be/uapdILWYTzE">3</a>, <a href="https://youtu.be/QcLlc9lj2hk">4</a>, <a href="https://youtu.be/-WbN61qtTGQ">5</a>, <a href="https://youtu.be/wySXLRTxAGQ">6</a>, <a href="https://youtu.be/NHZMfSMAHlo">7</a>, <a href="https://youtu.be/sR6_bZ6VkAg">8</a>, <a href="https://youtu.be/QZxcTZj0L-M">9</a>, <a href="https://youtu.be/veYq6EWZyVc">10</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-59238-7">Learning to play</a> (2020)</p>
<p><a href="https://link.springer.com/book/10.1007/978-981-15-4095-0">Deep Reinforcement Learning</a> (2020)</p>
<p><a href="https://link.springer.com/book/10.1007/978-981-19-0638-1">Deep Reinforcement Learning</a> (2022)</p>
<p><a href="https://deepreinforcementlearningbook.org/docs/Fundamentals/">Deep Reinforcement Learning Book</a> (2020)</p>
<p style="padding-left: 30px;"><a href="https://deepreinforcementlearningbook.org/assets/pdfs/ch16.pdf">模擬環境中機器人學習</a></p>
<p><a href="https://dtransposed.github.io/blog/2020/10/21/Robotic-Assembly/">Robotic Assembly Using Deep Reinforcement Learning</a> (2020)</p>
<p><a href="https://www.hou.usra.edu/meetings/isairas2020fullpapers/pdf/5032.pdf">RL STaR Platform: Reinforcement Learning for Simulation based Training of Robots</a> (2020)</p>
<p><a href="https://ieeexplore.ieee.org/document/9663504">Robots Learn Visual Pouring Task Using Deep Reinforcement Learning with Minimal Human Effort </a>(2021)</p>
<p><a href="https://www.sciencedirect.com/science/article/pii/S0020025521001158">Deep reinforcement learning based moving object grasping</a> (2021)</p>
<p><a href="https://github.com/gbartyzel/gym-vrep">https://github.com/gbartyzel/gym-vrep</a></p><h1>NX</h1>
<p><a href="https://www.plm.automation.siemens.com/global/en/products/nx/">https://www.plm.automation.siemens.com/global/en/products/nx/</a></p>
<p>下載 <a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/Eb7GeAUGMANEkijnWXGNH60BltYzKwkkffas3JhzgwnmxQ?e=K4HKXF">NX12.0.2.9_lite_cad2022.7z</a> (for @gm users only, 1.20 GB, 解開後 6.24 GB)</p>
<p>下載 <a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfvS63_7udVPhe-xlXrYPCMBVTUEEona5_QXwHdZD_8Vww?e=LNczOS">NX2027.3401_lite_cad2022.7z</a> (for @gm users only, 1.97 GB, 解開後 7.49 GB)</p>
<p>下載 <a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfC-9gy1PN9MmJtpD9VO5KcB3kehP6VVVgmQt3ej5D_BIQ?e=deXuWs">NX2027.3401_cad2022.7z</a> (for @gm users only, 8.02 GB, 解開後 28.32 GB)</p>
<p>下載 <a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EU-fmibMpBZKg2ZiXmBlK-oBQj7wLV5YeMGI8rCI60NhmQ?e=EuxlyD">NX2007_documentation.7z</a> (for @gm users only, 2.18 GB, 解開後 2.86 GB), 使用時執行 start_static.py 後, 以瀏覽器 http://localhost:7443 開啟.</p>
<p>線上 <a href="https://docs.sw.siemens.com/en-US/release/209349590/NX%202007%20Series">NX2007 EN Documentation</a>.</p>
<p>完整版的 NX2027.3401 各目錄容量如下, 總容量為 28.32 GB, NX2206 總容量則為 31 GB:</p>
<p>AUTOMATED_TESTING : 1.52 MB<br/>AUTOMATION_DESIGNER : 254.08 MB<br/>CAPITALINTEGRATION : 2.04 MB<br/>CATIAV5 : 784.01 KB<br/>CLOUDDM : 31.07 KB<br/>CMM_INSPECTION : 143.31 MB<br/>DESIGNSPACEEXPLORER : 7.31 KB<br/>DESIGN_TOOLS : 275.8 MB<br/>DIAGRAMCORE : 5.81 MB<br/>DIAGRAMMING : 64.65 MB<br/>DRAFTING : 123.65 MB<br/>DXFDWG : 206.79 MB<br/>IGES : 5.2 MB<br/>INSTALL : 55.55 KB<br/>LOCALIZATION : 1.09 GB<br/>MACH : 1.96 GB<br/>MANUFACTURING_PLANNING : 141.66 MB<br/>MBD : 54.05 MB<br/>MECH : 793.28 MB<br/>MECHATRONICS : 212.81 MB<br/>MENDIXREPORTING : 1.04 MB<br/>MOLDCOOLING : 12.28 KB<br/>MOLDWIZARD : 226.71 MB<br/>MPA : 1.5 MB<br/>NXAECDESIGN : 15.48 KB<br/>NXASSEMBLY : 120.98 MB<br/>NXBIN : 5.07 GB<br/>NXCABLEROUTER : 190.45 KB<br/>NXCAE_EXTRAS : 2.36 GB<br/>NXCOATINGS : 645.3 KB<br/>NXCREO : 6.17 MB<br/>NXHUMAN : 247.51 MB<br/>NXJOIN : 16.38 MB<br/>NXNASTRAN : 2.93 GB<br/>NXPARTS : 53.76 MB<br/>NXPLOT : 151.34 MB<br/>NXPROE : 6.17 MB<br/>NXREPORTS : 9.42 MB<br/>NXSHIP : 359.0 MB<br/>NXSTRUCTUREDESIGN : 106.47 MB<br/>NXVR : 441.53 MB<br/>NX_VSA : 13.88 MB<br/>OCCUPANTSAFETY : 514.74 MB<br/>POSTBUILD : 37.65 MB<br/>PSTUDIO : 35.5 MB<br/>PVTRANS : 102.46 KB<br/>REL_INFO : 36.92 KB<br/>ROUTING : 315.47 MB<br/>RULE : 316.7 KB<br/>SIMULATION : 4.19 GB<br/>STAGE_MODEL : 3.53 MB<br/>STAMPING_TOOLS : 77.06 MB<br/>STEP203UG : 1.28 MB<br/>STEP214UG : 1.27 MB<br/>TDP : 237.62 MB<br/>temp : 0B<br/>TOOLING_BASE : 970.0 KB<br/>TRANSLATORS : 157.87 MB<br/>UGALLIANCE : 82.9 KB<br/>UGAUTOMOTIVE : 99.41 MB<br/>UGCATIA : 6.53 MB<br/>UGFLEXLM : 29.4 MB<br/>UGFPCD : 35.19 KB<br/>UGII : 677.93 MB<br/>UGIMW : 8.45 MB<br/>UGMANAGER : 117.29 MB<br/>UGOPEN : 425.32 MB<br/>UGOPENPP : 567.28 KB<br/>UGPCBX : 3.42 MB<br/>UGPCBXCHANGE : 90.23 MB<br/>UGPHOTO : 2.98 GB<br/>UGSTRUCTURES : 735.35 MB<br/>UGSTUDIO : 14.03 MB<br/>UGTIPS : 278.35 MB<br/>UGTO2D : 911.38 KB<br/>UGWEB : 9.08 MB<br/>UGWELD : 2.07 MB<br/>UNFOLD : 71.92 KB<br/>VDA : 25.44 KB<br/>VDV : 13.11 KB<br/>total: 28.32 GB</p>
<p>NX2206 只包含下列目錄 (CAD_lite), 檔案容量 7.5 GB: dir /b /ad &gt; dir.txt</p>
<p>DESIGNSPACEEXPLORER (<a href="https://webinars.sw.siemens.com/en-US/design-space-exploration">Webina</a>r (41 分 19 秒 - View with Gmail account)<br/>DESIGN_TOOLS (<a href="https://www.designfusion.com/post/a-look-at-nx-check-mate">A look at NX Check-Mate</a>)<br/>DIAGRAMCORE (利用 <a href="https://www.yworks.com/products/yfiles">yFiles</a> 繪製 Diagrams)<br/>DIAGRAMMING (<a href="https://www.plm.automation.siemens.com/global/fr/webinar/piping-and-instrumentation-diagrams/78351">Piping and Instrumentation Diagramming</a>)<br/>DRAFTING (<a href="https://www.youtube.com/watch?v=yQy6lY-Gq6Y">Basic Drafting Tutorial</a>)<br/>DXFDWG<br/>IGES<br/>INSTALL<br/>MECHATRONICS<br/>NXASSEMBLY<br/>NXBIN<br/>NXPARTS<br/>STEP203UG<br/>STEP214UG<br/>Temp<br/>TRANSLATORS<br/>UGFLEXLM<br/>UGII<br/>UGMANAGER<br/>UGOPEN<br/>UGOPENPP<br/>UNFOLD</p>
<p>若加上簡單的 CAE 工程分析模組 (CAX_lite), 檔案容量 21 GB:</p>
<p>AUTOMATED_TESTING<br/>AUTOMATION_DESIGNER<br/>DESIGNSPACEEXPLORER<br/>DESIGN_TOOLS<br/>DRAFTING<br/>DXFDWG<br/>IGES<br/>INSTALL<br/>MACH<br/>MANUFACTURING_PLANNING<br/>MECHATRONICS<br/>NXASSEMBLY<br/>NXBIN<br/>NXCAE_EXTRAS<br/>NXHUMAN<br/>NXNASTRAN<br/>NXPARTS<br/>NXSTRUCTUREDESIGN<br/>SIMULATION<br/>STEP203UG<br/>STEP214UG<br/>Temp<br/>TRANSLATORS<br/>UGFLEXLM<br/>UGII<br/>UGMANAGER<br/>UGOPEN<br/>UGOPENPP<br/>UGSTRUCTURES<br/>UNFOLD</p>
<p>若包含全模組, 檔案容量 31 GB:</p>
<p>AUTOMATED_TESTING<br/>AUTOMATION_DESIGNER<br/>CAPITALINTEGRATION<br/>CATIAV5<br/>CLOUDDM<br/>CMM_INSPECTION<br/>DESIGNSPACEEXPLORER<br/>DESIGN_TOOLS<br/>DIAGRAMCORE<br/>DIAGRAMMING<br/>DRAFTING<br/>DXFDWG<br/>IGES<br/>INSTALL<br/>LOCALIZATION<br/>MACH<br/>MANUFACTURING_PLANNING<br/>MBD<br/>MECH<br/>MECHATRONICS<br/>MENDIXREPORTING<br/>MOLDCOOLING<br/>MOLDWIZARD<br/>MPA<br/>NXAECDESIGN<br/>NXASSEMBLY<br/>NXBIN<br/>NXCABLEROUTER<br/>NXCAE_EXTRAS<br/>NXCOATINGS<br/>NXCREO<br/>NXHUMAN<br/>NXJOIN<br/>NXNASTRAN<br/>NXPARTS<br/>NXPLOT<br/>NXPROE<br/>NXREPORTS<br/>NXSHIP<br/>NXSTRUCTUREDESIGN<br/>NXVR<br/>NX_VSA<br/>POSTBUILD<br/>PSTUDIO<br/>PVTRANS<br/>REL_INFO<br/>ROUTING<br/>RULE<br/>SAFETY<br/>SIMULATION<br/>STAGE_MODEL<br/>STAMPING_TOOLS<br/>STEP203UG<br/>STEP214UG<br/>TDP<br/>Temp<br/>TOOLING_BASE<br/>TRANSLATORS<br/>UGALLIANCE<br/>UGAUTOMOTIVE<br/>UGCATIA<br/>UGFLEXLM<br/>UGFPCD<br/>UGII<br/>UGIMW<br/>UGMANAGER<br/>UGOPEN<br/>UGOPENPP<br/>UGPCBX<br/>UGPCBXCHANGE<br/>UGPHOTO<br/>UGSTRUCTURES<br/>UGSTUDIO<br/>UGTIPS<br/>UGTO2D<br/>UGWEB<br/>UGWELD<br/>UNFOLD<br/>VDA<br/>VDV</p><h2>NX1980_setup</h2>
<p>以下影片說明如何設定 Journal 存檔格式, 關閉 Product Execellence Program, 並查驗版本與授權使用單位:</p>
<p><a href="/downloads/w5_nx_api.7z">w5_nx_api.7z</a></p>
<p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_nx_api.mp4" type="video/mp4"/></video></div>
<h2>NX2206</h2>
<p>2022.06.17 正式推出 SiemensNX-2206_wntx64.zip (10.9GB)</p>
<p>NX2206 完整系統容量為 29.35 GB</p>
<p>以下列 get_dir_size.py 計算 NX2206 各目錄容量:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
import math
 
def convert_size(size_bytes):
    # from https://stackoverflow.com/questions/5194057/better-way-to-convert-file-sizes-in-python
    if size_bytes == 0:
        return "0B"
    size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return "%s %s" % (s, size_name[i])
    
def get_dir_size(path='.'):
    # from https://note.nkmk.me/en/python-os-path-getsize/
    total = 0
    with os.scandir(path) as it:
        for entry in it:
            if entry.is_file():
                total += entry.stat().st_size
            elif entry.is_dir():
                total += get_dir_size(entry.path)
    return total
 
#for (root,dirs,files) in os.walk('./', topdown=True):
    #print (dirs)
 
total = 0
nx_dir_list = os.listdir('./')
for i in nx_dir_list:
    try:
        # skip files
        total += get_dir_size(i)
        print(i, ":", convert_size(get_dir_size(i)))
    except:
        #print(i)
        pass
print("total:", convert_size(total))</pre>
<p>執行結果:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">AUTOMATED_TESTING : 3.9 MB
AUTOMATION_DESIGNER : 276.42 MB
CAPITALINTEGRATION : 2.04 MB
CATIAV5 : 763.49 KB
CLOUDDM : 99.22 KB
CMM_INSPECTION : 143.32 MB
DESIGNSPACEEXPLORER : 7.87 KB
DESIGN_TOOLS : 64.18 MB
DIAGRAMCORE : 5.77 MB
DIAGRAMMING : 51.07 MB
DRAFTING : 123.71 MB
DXFDWG : 207.4 MB
IGES : 5.2 MB
INSTALL : 55.05 KB
LOCALIZATION : 1.1 GB
MACH : 1.96 GB
MANUFACTURING_PLANNING : 136.6 MB
MBD : 62.8 MB
MECH : 568.6 MB
MECHATRONICS : 216.88 MB
MENDIXREPORTING : 1.04 MB
MOLDCOOLING : 12.17 KB
MOLDWIZARD : 230.24 MB
MPA : 1.5 MB
NXAECDESIGN : 32.3 MB
NXASSEMBLY : 127.27 MB
NXBIN : 5.24 GB
NXCABLEROUTER : 205.75 KB
NXCAE_EXTRAS : 3.3 GB
NXCOATINGS : 645.3 KB
NXCREO : 6.19 MB
NXHUMAN : 247.8 MB
NXJOIN : 18.22 MB
NXNASTRAN : 2.94 GB
NXPARTS : 53.28 MB
NXPLOT : 255.92 MB
NXPROE : 6.19 MB
NXREPORTS : 9.45 MB
NXSHIP : 340.46 MB
NXSTRUCTUREDESIGN : 121.55 MB
NXVR : 446.12 MB
NX_VSA : 13.88 MB
POSTBUILD : 37.65 MB
PSTUDIO : 35.5 MB
PVTRANS : 104.49 KB
REL_INFO : 36.92 KB
ROUTING : 324.37 MB
RULE : 302.85 KB
SAFETY : 522.78 MB
SIMULATION : 4.29 GB
STAGE_MODEL : 3.53 MB
STAMPING_TOOLS : 93.18 MB
STEP203UG : 1.28 MB
STEP214UG : 1.27 MB
TDP : 237.67 MB
TOOLING_BASE : 970.12 KB
TRANSLATORS : 157.99 MB
UGALLIANCE : 85.09 KB
UGAUTOMOTIVE : 105.7 MB
UGCATIA : 6.55 MB
UGFLEXLM : 31.5 MB
UGFPCD : 35.19 KB
UGII : 698.39 MB
UGIMW : 8.45 MB
UGMANAGER : 118.83 MB
UGOPEN : 436.93 MB
UGOPENPP : 567.28 KB
UGPCBX : 3.92 MB
UGPCBXCHANGE : 81.62 MB
UGPHOTO : 2.99 GB
UGSTRUCTURES : 789.79 MB
UGSTUDIO : 14.03 MB
UGTIPS : 192.46 MB
UGTO2D : 921.06 KB
UGWEB : 9.08 MB
UGWELD : 2.07 MB
UNFOLD : 71.92 KB
VDA : 25.43 KB
VDV : 14.55 KB
total: 29.35 GB</pre>
<p>假如只需要 NX2206 Modeling, Drawing, Mechatronic Design Studio, Product Template Studio 等功能, 則只需要下列目錄檔案, 容量為 7.49GB, NX2206_CAD_lite.7z:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">DESIGNSPACEEXPLORER : 7.87 KB
DESIGN_TOOLS : 64.18 MB
DIAGRAMCORE : 5.77 MB
DIAGRAMMING : 51.07 MB
DRAFTING : 123.71 MB
DXFDWG : 207.4 MB
IGES : 5.2 MB
INSTALL : 55.05 KB
MECHATRONICS : 216.88 MB
NXASSEMBLY : 127.27 MB
NXBIN : 5.24 GB
NXPARTS : 53.28 MB
STEP203UG : 1.28 MB
STEP214UG : 1.27 MB
Temp : 1.02 KB
TRANSLATORS : 157.99 MB
UGFLEXLM : 31.5 MB
UGII : 698.39 MB
UGMANAGER : 118.83 MB
UGOPEN : 436.93 MB
UGOPENPP : 567.28 KB
UNFOLD : 71.92 KB
total: 7.49 GB</pre>
<p>基本 NX2206 CAD 教育版功能模組:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># NX Academic - Core &amp; CAD
3d_to_2d_flattener
acis_nx_translator
adv_assemblies
adv_sheet_metal_dsgn
aero_sheet_metal
assemblies
cam_additive_1
cam_additive_2
cam_additive_post
cam_robotics_1000
cam_robotics_1001
cam_robotics_1002
cam_robotics_1003
cam_robotics_1004
cam_robotics_1006
cam_robotics_1009
catv5_nx_sca
conf_cooling_channel
des_top_opt
design_studio
die_engineering
drafting
dxf_to_ug
dxfdwg
features_modeling
free_form_modeling
gateway
geometric_tol
grip_execute
ifc_to_nx
iges
insp_programming
ld_line_designer
mrl_connect
nx_3d_path_planning
nx_4gd_integration
nx_access_tcclass
nx_additive_design
nx_aero_design
nx_animationdesigner
nx_cam_deburr_planar
nx_cam_deburring3x
nx_cam_deburring4x
nx_cam_deburring5x
nx_cam_rotary_4x
nx_cam_smks_3x
nx_cam_smks_4x
nx_cam_smks_additive
nx_cam_smks_complex
nx_cam_turn_prime
nx_coatings
nx_design_explorer
nx_diagramming
nx_drawing_auto
nx_electrode_wizard
nx_flexible_pcb
nx_freeform_1
nx_freeform_2
nx_gc_toolkit
nx_general_packaging
nx_issue_mgmt
nx_isv_mtb
nx_isv_vm_hmi
nx_jacktkapi
nx_join
nx_lnx_batch
nx_mc_basic
nx_mc_full
nx_mcd_core
nx_ml_cmd_pred_ui
nx_onestep_analysis
nx_penetration_mgmt
nx_pid_design_author
nx_pmi_effectivity
nx_point_cloud_view
nx_polygon_modeling
nx_post_config_adv
nx_post_config_full
nx_posture
nx_reuse_cadenas
nx_samcef_ui
nx_sdpd_mpm_a
nx_sdpd_mpm_v
nx_sdpd_pam_a
nx_sdpd_pam_v
nx_sheet_metal
nx_ship_basic
nx_ship_concept
nx_ship_detail
nx_ship_drafting
nx_ship_gen_arrange
nx_ship_mfg_prep
nx_snap_author
nx_structure_design
nx_subdivision
nx_sysnoise_bem
nx_to_ifc
nx_visual_reporting
nx_wi_authoring
nx_xr
pcf_package_file
proenx
prog_die_wizard
pstudio_cons
pts_author
pts_consumer
pv_ugdatagenerator
routing_advanced
routing_base
routing_cabling
routing_harness
routing_hvac
routing_pid
routing_pipetube
routing_platform
sc_des_topol_opt
sc_fp_sa
sc_fp_sa_beam
sc_fp_sa_dyn
sc_fp_sa_dyn_nl
sc_fp_sa_opt
sc_fp_sa_shell
shape_search
sinumerik_spline
sla_3d_systems
solid_modeling
std_ug_library
step_ap203
step_ap214
step_ap242
structure_weld
student_read
studio_analyze
studio_free_form
studio_render
studio_visualize
ug_body_design
ug_checkmate
ug_comp_flattener
ug_comp_pipeline
ug_die_design
ug_human
ug_kf_author
ug_kf_checker
ug_kf_execute
ug_mold_design
ug_opt_wizard
ug_prod_des_advisor
ug_visualize
ug_web_express
ugopen_menuscript
ugweld
ui_styler
usr_defined_features
wave</pre>
<p>假如要再加上 CAE 與 CAM 功能, 則需要下列目錄, 容量為 21.47GB, NX2206_CAX_lite.7z</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">AUTOMATED_TESTING : 3.9 MB
AUTOMATION_DESIGNER : 276.42 MB
DESIGNSPACEEXPLORER : 7.87 KB
DESIGN_TOOLS : 64.18 MB
DRAFTING : 123.71 MB
DXFDWG : 207.4 MB
IGES : 5.2 MB
INSTALL : 55.05 KB
MACH : 1.96 GB
MANUFACTURING_PLANNING : 136.6 MB
MECHATRONICS : 216.88 MB
NXASSEMBLY : 127.27 MB
NXBIN : 5.24 GB
NXCAE_EXTRAS : 3.3 GB
NXHUMAN : 247.8 MB
NXNASTRAN : 2.94 GB
NXPARTS : 53.28 MB
NXSTRUCTUREDESIGN : 121.55 MB
SIMULATION : 4.29 GB
STEP203UG : 1.28 MB
STEP214UG : 1.27 MB
Temp : 0B
TRANSLATORS : 157.99 MB
UGFLEXLM : 31.5 MB
UGII : 698.39 MB
UGMANAGER : 118.83 MB
UGOPEN : 436.93 MB
UGOPENPP : 567.28 KB
UGSTRUCTURES : 789.79 MB
UNFOLD : 71.92 KB
total: 21.47 GB</pre>
<p>NX2206 基本 CAE + CAM 教育版功能:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># NX Academic Perpetual License CAE+CAM
3d_to_2d_flattener
appearance_mgmt
appearance_mgmt_aw
appearance_mgmt_mgd
assemblies
cam_additive_3
cam_base
cam_facets
cavity_milling
contour_profile
dmu_markup
dxf_to_ug
dxfdwg
elma
fbm_author
fix_axis_surf_mill
flow_cut
gateway
gmc
graphical_tool_path
grip_execute
iges
mechanisms
motion_cd_tire
motion_ext_control
motion_flex_modal
motion_std_tire
motion_swift_tire
motion_tno_tire
nc_external_program
nc_wizard_builder
nurb_output_enabler
nx_3d_swept_volume
nx_abaqus_env
nx_abaqus_export
nx_abaqus_export_g
nx_abaqus_import
nx_acoustic_modeling
nx_acoustics_bem_hpc
nx_adv_durability
nx_adv_fld_mod_solv
nx_adv_fluid_mod
nx_algorithmic
nx_ansys_env
nx_ansys_export
nx_ansys_export_g
nx_ansys_import
nx_cam_deburring4x
nx_cam_rotary_4x
nx_cam_smks_3x
nx_cam_smks_4x
nx_cam_smks_complex
nx_correl_base
nx_correl_update
nx_design_sim
nx_drafting_plus
nx_draw_shape
nx_durability_wiz
nx_easyfill_advanced
nx_easyfill_analysis
nx_esc_solv
nx_esc_ui
nx_flow_adv_solv
nx_flow_adv_ui
nx_flow_solver
nx_flow_ui
nx_general_packaging
nx_implicit
nx_isv_mtb
nx_lam_comp_adv
nx_lam_composites
nx_layout
nx_lsdyna_export
nx_lsdyna_import
nx_mach_line_planner
nx_masterfem
nx_mbd
nx_ml_sel_pred_std
nx_ml_show_hide
nx_mlp_setup
nx_mlp_solid
nx_mscnastran_env
nx_mu_notifications
nx_multi_blade_mill
nx_nas_acous_adv
nx_nas_aero_dsk
nx_nas_bn_basic_dsk
nx_nas_dmap_dsk
nx_nas_dyn_dsk
nx_nas_nonlin_dsk
nx_nas_optim_dsk
nx_nas_rotdyn_dsk
nx_nas_supel_dsk
nx_nas_topol
nx_nas_uss_dsk
nx_nastran_export
nx_nastran_export_g
nx_post_config_adv
nx_response_anlys
nx_ship_super_plate
nx_space_therm_solv
nx_space_therm_ui
nx_spsd_stress
nx_spsd_vibration
nx_sysnoisebem_ui
nx_tdp
nx_thermal_adv_solv
nx_thermal_adv_ui
nx_thermal_solver
nx_thermal_ui
nx_tilt_tool_axis
nx_vr_sudr
nx_wedm_base
nx_wedm_extra
nx_wedm_gear
nx_wedm_ruled
nx_wedmp_db
nx_wedmp_no_db
nx_wi_authoring
planar_milling
probe
pstudio_auth
pstudio_cons
pv_ugdatagenerator
sequential_milling
shop_doc
sla_3d_systems
stage_model
step_ap203
step_ap214
surface_milling
sync_mgr
tol_cavity_milling
ug_epak
ug_holemaking
ug_isv_full
ug_kf_execute
ug_library_access
ug_nas_bn
ug_nas_des
ug_pcb_exchange
ug_pcb_modeler
ug_post_exe
ug_post_kinematics
ug_post_mill
ug_schematics
ug_smart_models
ug_strength_wizard
ug_to_dxf
ug_to_vericut
ug_turning
ug_visualize
ugopen_menuscript
var_axis_surf_mill
vehicle_des_val
wire_edm_machining</pre>
<p></p>
<h2>NXOpen</h2>
<p>NX Open is an Application Programming Interface (API) that lets you write programs to customize or extend NX. The benefit is that applications created this way can often speed up repetitive tasks, and capture important design process knowledge.</p>
<p>Python 範例: UGOPEN\SampleNXOpenApplications\Python</p>
<p><a href="/downloads/Introduction_to_NXOpen.pdf">Introduction_to_NXOpen.pdf</a> from <a href="https://github.com/derda48/NXOpen">https://github.com/derda48/NXOpen</a></p>
<p><a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide">NXOpen Programmer's Guide</a> (NX12)</p>
<p><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html">NXOpen for Python Reference Guide</a> (NX12</p>
<p><a href="/downloads/NXOpen_spur_gear.c">NXOpen_spur_gear.c</a></p>
<p><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/1872/nx_api/common/en_US/graphics/fileLibrary/nx/nxopen/NXOpen_Getting_Started.pdf">Get Started with NXOpen.pdf</a> (2019)</p>
<p>NX10: <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref/index.html">https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref/index.html</a></p>
<p>NX12: <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html">https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html</a></p>
<p><a href="/downloads/SNAP_Getting_Started_nx1872.pdf">SNAP_Getting_Started_nx1872.pdf</a></p>
<p style="padding-left: 30px;">A <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref/NXOpen.Assemblies.Component.html">Component</a> (組件) is an <a href="https://en.wikipedia.org/wiki/Event_(computing)">occurrence</a> (事件) whose <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref/NXOpen.NXObject.html#prototype">prototype</a> (原型) is a NXOpen.Part.</p>
<p style="padding-left: 60px;">Component 為電腦事件, 其原型為零件檔案.</p>
<p>下圖的黃色部分即為組件 (Components), 也就是所謂的零件事件. 透過組件間的樹狀結構, 就可以得知組立件中的零件組成, 而無需開啟零件檔案.</p>
<p>每一個組立件中都有一個根組件 (RootComponent), 也就是該組立件的樹狀結構源頭. 若一個 prt 檔案中並無根組件, 代表其並非組立件.</p>
<p>因為每一個組件都應該帶有連結到其子組件、父組件與其零件檔案的連結. 而其中的零件檔案就稱為該組件的原型. 至於根組件並非"真實的"組件, 因為其原型連結有特殊意義, 也就是根組件的原型連結會"連回"其零件檔案本身.</p>
<p><img caption="false" height="483" src="/images/assembly_component1.png" width="600"/></p>
<p><img caption="false" height="479" src="/images/assembly_component2.png" width="600"/></p>
<p>NXOpen Python 程式範例:</p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/nxopen_ex1.py">nxopen_ex1.py</a></p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/nxopen_ex2.py">nxopen_ex2.py</a></p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/nxopen_ex3.py">nxopen_ex3.py</a></p>
<p>Convert VB to Python:</p>
<p style="padding-left: 30px;"><a href="https://community.sw.siemens.com/s/question/0D54O000061xRnYSAU/convert-vb-to-python">https://community.sw.siemens.com/s/question/0D54O000061xRnYSAU/convert-vb-to-python</a> </p>
<h4>Referene:</h4>
<p style="padding-left: 30px;"><a href="https://support.industrysoftware.automation.siemens.com/general/nx.shtml#lp-tab-1">NX 各版本技術手冊</a></p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/tdoc/nx/1899/nx_help">https://docs.plm.automation.siemens.com/tdoc/nx/1899/nx_help</a></p>
<p style="padding-left: 30px;">NX1980\NXBIN\managed\exceladdin_x64.dll</p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/ugii_env_ug.dat.txt">ugii_env_ug.dat.txt</a></p>
<p style="padding-left: 60px;">UGII_PYTHONPATH</p>
<p style="padding-left: 60px;">UGII_PYTHON_LIBRARY_DIR</p>
<p style="padding-left: 30px;"><a href="https://ntnuopen.ntnu.no/ntnu-xmlui/handle/11250/2656770">https://ntnuopen.ntnu.no/ntnu-xmlui/handle/11250/2656770</a> (Design of a KBE system for automatic weld path definition in CAD</p>
<p></p><h2>Mechatronics</h2>
<p>Mechatronic Concept Designer</p>
<p><a href="/downloads/NX10_MCD_Quick_Start.pdf">NX10_MCD_Quick_Start.pdf</a></p>
<p><a href="/downloads/Mechatronics_Cooncept_Designer_WP.pdf">Mechatronics_Cooncept_Designer_WP.pdf</a></p>
<p><a href="/downloads/TURN-TABLE_MODEL_MECHATRONIC_CONCEPT_DESIGNER.pdf">TURN-TABLE_MODEL_MECHATRONIC_CONCEPT_DESIGNER.pdf</a></p>
<p><a href="/downloads/Creating a Static 3D Model Using the NX CAD System.pdf">Creating a Static 3D Model Using the NX CAD System.pdf</a></p>
<p><a href="/downloads/借助 CAD 系统 NX 创建静态 3D 模型.pdf">借助 CAD 系统 NX 创建静态 3D 模型.pdf</a></p>
<p><a href="/downloads/Creation_of_a_dynamic_3D_model_using_the_MCD.pdf">Creation_of_a_dynamic_3D_model_using_the_MCD.pdf</a></p>
<p><a href="/downloads/使用 CAE 系统 Mechatronics Concept Designer 创建动态 3D 模型.pdf">使用 CAE 系统 Mechatronics Concept Designer 创建动态 3D 模型.pdf</a></p>
<p><a href="/downloads/Configuration of the Automation Program of a Dynamic 3D Model in the TIA Portal.pdf">Configuration of the Automation Program of a Dynamic 3D Model in the TIA Portal.pdf</a></p>
<p><a href="/downloads/通过动态 3D 模型 实现制造工厂的虚拟调试.pdf">通过动态 3D 模型 实现制造工厂的虚拟调试.pdf</a></p>
<p><a href="/downloads/Web Based Customized Design.pdf">Web Based Customized Design.pdf</a></p>
<p>Mechatronics Concept Designer is a new solution for concept design of mechatronics products. The software enables 3D modeling and simulation of concepts with multi-body physics and automation-related behavior typically found in mechatronics products.</p>
<p>Supporting a functional design approach, Mechatronics Concept Designer integrates upstream and downstream engineering domains, including requirements management, mechanical design, electrical design, and software/automation engineering.</p>
<p>Mechatronics Concept Designer accelerates development of products that involve mechanical, electrical, and software design disciplines, allowing them to work in parallel, focused on a concept<br/>design that includes mechanical components, sensors, actuators, and motion. </p>
<h1>CoppeliaSim</h1>
<p>CD (Collaborative Design) 協同產品設計實習課程, 旨在探討多名設計人員, 從利用 NX 及 Solvespace 等單機套件, 過渡到採用 Onshape 雲端 MCAD 套件執行零組件繪製後, 並匯入 CoppeliaSim 建立機電資系統整合模擬流程中, 該如何執行同步 (Simultaneous) 協同設計?</p>
<p><a href="/downloads/pythonBubbleRob.pdf">Controlling your robot with Python</a></p>
<p><a href="https://www.sciencedirect.com/science/article/pii/S1569190X22001046">How to pick a mobile robot simulator: A quantitative comparison of</a><br/><a href="https://www.sciencedirect.com/science/article/pii/S1569190X22001046">CoppeliaSim, Gazebo, MORSE and Webots with a focus on accuracy</a><br/><a href="https://www.sciencedirect.com/science/article/pii/S1569190X22001046">of motion</a></p>
<p>User Manual: <a href="https://mde.tw/pjcopsim">https://mde.tw/pjcopsim</a> (相關專題: <a href="https://mde.tw/pj5083">https://mde.tw/pj5083</a>)</p>
<p><a href="https://www.coppeliarobotics.com/">https://www.coppeliarobotics.com/</a></p>
<p><a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<h4>ABB SCARA Robots:</h4>
<p style="padding-left: 30px;"><a href="https://new.abb.com/products/robotics/industrial-robots/irb-920t">https://new.abb.com/products/robotics/industrial-robots/irb-920t</a></p>
<p style="padding-left: 30px;"><a href="/downloads/abb_irb_920t.ttt">abb_irb_920t.ttt</a></p>
<h4>Foosball Table:</h4>
<p style="padding-left: 30px;"><a href="/downloads/cad2022_foosball_table.ttt">cad2022_foosball_table.ttt</a> (<a href="https://grabcad.com/library/football-table--1">source</a>)</p>
<p style="padding-left: 30px;"><a href="/downloads/foosball_nx2206.7z">foosball_nx2206.7z</a> (4.237 MB)</p>
<p style="padding-left: 30px;"><a href="/downloads/foosball_nx12.7z">foosball_nx12.7z</a> (2.75 MB)</p>
<p style="padding-left: 30px;"><a href="/downloads/Foosball Table Goalkeeper Automation Using Reinforcement Learning.pdf">Foosball Table Goalkeeper Automation Using Reinforcement Learning.pdf</a>, 2021 (<a href="http://ceur-ws.org/Vol-2993/paper-17.pdf">source</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/chapter/10.1007/978-3-642-11876-0_12">Real-Time Ball Tracking in a Semi-automated Foosball Table</a> (2009)</p>
<p style="padding-left: 30px;"><a href="https://www.cambridgeconsultants.com/insights/opinion/diary-developer-part-3-foosbot-strategy">https://www.cambridgeconsultants.com/insights/opinion/diary-developer-part-3-foosbot-strategy</a> (2019)</p>
<p style="padding-left: 30px;"><a href="/get_page/CoppeliaSim/KiRo – An autonomous table soccer player.pdf">KIRo</a> (2002, <a href="https://gki.informatik.uni-freiburg.de/papers/weigel-etal-robocup-02-kiro.pdf">source</a>)</p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/profile/Stefano-De-Blasi/publication/341204434_KIcker_An_Industrial_Drive_and_Control_Foosball_System_automated_with_Deep_Reinforcement_Learning/links/60642b8d92851cd8ce7b2005/KIcker-An-Industrial-Drive-and-Control-Foosball-System-automated-with-Deep-Reinforcement-Learning.pdf?origin=publication_detail">KIcker</a> (2020)</p>
<p style="padding-left: 30px;"><a href="https://github.com/glmcdona/FoosAI">FoosAI</a> (2017)</p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=RSYshQdcjYM">AI learns to play table soccer</a> (2018)</p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=8TMT-gHlj_Q">Training a Reinforcement Learning Agent to play Soccer</a> (2020)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/site-40623128">mdecourse/site-40623128: site-40623128 created by GitHub Classroom</a> (2018)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/site-40623130">mdecourse/site-40623130: site-40623130 created by GitHub Classroom</a> (2018)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/site-40623224">mdecourse/site-40623224: site-40623224 created by GitHub Classroom</a> (2018)</p>
<p style="padding-left: 30px;"><a href="https://cad.onshape.com/documents/f942bc02bd60de603095cd9d/w/e3af941ed5245875e39138d0/e/af657625f78911e9e727c91a?renderMode=0&amp;uiState=62b87263e48a585ead2bb1db">40623224 Foosball Table using Onshape</a> (2018)</p>
<p style="padding-left: 30px;"><a href="https://www.theseus.fi/bitstream/handle/10024/745224/Mohebi_Dani.pdf?sequence=3">The Study of Semi-Automated Football Table</a> (2022)</p>
<h4>Snooker Table:</h4>
<p style="padding-left: 30px;"><a href="/downloads/Snooker Table Assembly_sldasm.stp">Snooker Table Assembly_sldasm.stp</a> (<a href="https://grabcad.com/library/foosball-pool-table-1">source</a>)</p><h2>Foosball</h2>
<p><a href="https://ieeexplore.ieee.org/search/searchresult.jsp?queryText=foosball">foosball keyword searching on IEEE</a></p>
<p><a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.5428&amp;rep=rep1&amp;type=pdf">Development Of Robotic Foosball As A Versatile Platform For Robotics Research and Contests</a> (2003)</p>
<p><a href="https://gki.informatik.uni-freiburg.de/papers/weigel-etal-robocup-02-kiro.pdf">Kiro</a> (2006)</p>
<p><a href="https://diglib.eg.org/bitstream/handle/10.2312/PE.vriphys.vriphys09.049-058/049-058.pdf?sequence=1&amp;isAllowed=y">Space Foosball: Coupling Tangible Interfaces with a Real-time Game Physics Engine</a> (2009)</p>
<p><a href="https://core.ac.uk/download/pdf/19161196.pdf">Automated Foosball Table</a> (2013)</p>
<p><a href="https://2019wcm.blogspot.com/search/label/foosball">https://2019wcm.blogspot.com/search/label/foosball</a></p>
<p><a href="https://www.ximea.com/en/corporate-news/foosball-table-robot-camera">https://www.ximea.com/en/corporate-news/foosball-table-robot-camera</a></p>
<p><a href="https://computing.ece.vt.edu/~steflee/pdfs/foosball-tracking.pdf">Foosball tracking</a> (2012)</p>
<p><a href="https://www.ece.ucf.edu/seniordesign/fa2012sp2013/g30/docs/Final%20Paper-%20G30.pdf">Foose</a> (2012)</p>
<p><a href="https://cduck.me/2015/robotic-foosball-table/">https://cduck.me/2015/robotic-foosball-table/</a> (2015)</p>
<p><a href="https://www.siliconrepublic.com/machines/chess-go-and-now-foosball-ai-is-coming-for-you">https://www.siliconrepublic.com/machines/chess-go-and-now-foosball-ai-is-coming-for-you</a> (2016)</p>
<p><a href="https://www.thestar.com/news/insight/2016/05/12/can-a-computer-beat-you-at-foosball-yes-yes-it-can.html">https://www.thestar.com/news/insight/2016/05/12/can-a-computer-beat-you-at-foosball-yes-yes-it-can.html</a> (2016)</p>
<p><a href="https://mro.massey.ac.nz/bitstream/handle/10179/15187/02_whole.pdf?sequen">Low latency vision-based control for robotics</a> (2018)</p>
<p><a href="https://www.researchgate.net/publication/341204434_KIcker_An_Industrial_Drive_and_Control_Foosball_System_automated_with_Deep_Reinforcement_Learning">KIcker</a> (2021)</p>
<p><a href="https://youtu.be/Hu7LFrP43tA">https://youtu.be/Hu7LFrP43tA</a></p>
<p><a href="https://forum.allaboutcircuits.com/threads/automated-foosball-hardware-advice-for-crazy-speeds.137860/">https://forum.allaboutcircuits.com/threads/automated-foosball-hardware-advice-for-crazy-speeds.137860/</a></p>
<p><a href="/downloads/foosball/foosball_solvespace_vrep.7z">foosball_solvespace_vrep.7z</a></p><h2>Mujoco</h2>
<p><a href="https://mujoco.org/">https://mujoco.org/</a></p>
<p><a href="https://mujoco.readthedocs.io/en/latest/overview.html">https://mujoco.readthedocs.io/en/latest/overview.html</a></p>
<p><a href="https://www.deepmind.com/blog/opening-up-a-physics-simulator-for-robotics">https://www.deepmind.com/blog/opening-up-a-physics-simulator-for-robotics</a></p>
<p style="padding-left: 30px;"><a href="https://www.coursehero.com/study-guides/boundless-biology/somatosensation/">https://www.coursehero.com/study-guides/boundless-biology/somatosensation/</a></p>
<p><a href="https://www.deepmind.com/blog/open-sourcing-mujoco">https://www.deepmind.com/blog/open-sourcing-mujoco</a></p>
<p><a href="https://github.com/deepmind/mujoco">https://github.com/deepmind/mujoco</a></p>
<h2>ROS</h2>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-7750-8.pdf">Robot Operating System for Absolute Beginners</a> (2022)</p>
<h1>Projects</h1>
<p>在大學階段執行專案題目研究 (即畢業專題) 的目的:</p>
<ol>
<li><strong>整合</strong>專業課程所學, 實際<strong>體驗</strong>多人<strong>協同</strong>完成任務的過程</li>
<li>學習如何<strong>規劃並管理</strong>多人協同<strong>專案</strong></li>
<li>學習如何<strong>搜尋、歸納及應用文獻</strong>資料</li>
<li>學習如何<strong>編寫</strong>研究<strong>報告</strong></li>
<li>學習如何<strong>簡報</strong>研究<strong>結果</strong></li>
<li>針對<strong>研究所</strong>推薦甄試標的, 提供具體<strong>佐證資料</strong></li>
</ol>
<hr/>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-85390-7">Senior Design Projects in Mechanical Engineering</a> (2022)</p>
<p>2022 Projects:</p>
<p style="padding-left: 30px;">pj40921: <a href="https://github.com/mdecycu/pj40921">https://github.com/mdecycu/pj40921</a></p>
<p style="padding-left: 30px;">pj40922: <a href="https://github.com/mdecycu/pj40922">https://github.com/mdecycu/pj40922</a></p>
<p style="padding-left: 30px;">pj5083: <a href="https://github.com/mdecycu/pj5083">https://github.com/mdecycu/pj5083</a></p>
<p>2021 Projects:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/4072pj1">https://github.com/mdecycu/4072pj1</a> - 中興機研所 (2) 北科機電所 (1)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/4072pj2">https://github.com/mdecycu/4072pj2</a> - 中央機研所 (1)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/4072pj3">https://github.com/mdecycu/4072pj3</a> - 中興機研所 (1) 海大機電所 (1) 台科色彩所 (1) 虎科機設所 (1)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/pj5073">https://github.com/mdecycu/pj5073</a></p>
<p>2020 Project:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/airhockey">https://github.com/mdecycu/airhockey</a> - 中興機研所 (3) 虎科機設所 (1)</p>
<p>2019 Project:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/kll3pp">https://mde.tw/kll3pp</a> - 台科機研所 (1)</p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/shorts/TNzToIqLJIU">https://www.youtube.com/shorts/TNzToIqLJIU</a></p>
<p style="padding-left: 30px;"><iframe height="126" src="https://www.youtube.com/embed/wSrGDLYxq9s" width="120"></iframe> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="126" src="https://www.youtube.com/embed/ddavuOlxOZQ" title="YouTube video player" width="120"></iframe> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="126" src="https://www.youtube.com/embed/DXeOQVjMImg" title="YouTube video player" width="120"></iframe> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="126" src="https://www.youtube.com/embed/xAjvf42wCvI" title="YouTube video player" width="120"></iframe></p>
<p style="padding-left: 30px;"><a href="https://hdl.handle.net/11296/ku37fd">平面多連桿機構之合成與應用</a> (4+1 碩論) - 台大機研所博班</p>
<p style="padding-left: 30px;"><a href="https://hdl.handle.net/11296/6qk4dt">深度學習在機器人視覺辨識中的應用</a> (4+1 碩論) - 台大機研所博班</p>
<p><a href="https://hdl.handle.net/11296/tur9hu">Django 網際框架在平面四連桿尺寸合成系統上的應用</a> (2015)</p>
<p><a href="https://hdl.handle.net/11296/mtf789">網際程式框架在平面連桿機構尺寸合成系統上的應用</a> (2013)</p>
<p><a href="https://hdl.handle.net/11296/h5z5sb">網際雙自由度凸輪機構尺寸合成系統</a> (2012)</p>
<p><a href="https://hdl.handle.net/11296/a5b4p7">網際符號輔助軸接連桿機構之基因演算法尺寸合成系統</a> (2012 4+2 碩論) - 中正機研所博班</p>
<p><a href="https://hdl.handle.net/11296/v9mr92">網際史都華平台機構逆運動學分析與模擬</a> (2012)</p>
<p><a href="https://hdl.handle.net/11296/w66tpa">網際六軸機械臂系統的逆運動學分析與模擬</a> (2010)</p>
<p><a href="https://hdl.handle.net/11296/tt6672">基因演算法在網際機構合成系統上的應用</a> (2009)</p><h2>pjcopsim</h2>
<p>專題動機:</p>
<p>CoppeliaSim 的<a href="https://www.coppeliarobotics.com/helpFiles/">用戶手冊</a>, 資料來自 <a href="https://github.com/CoppeliaRobotics/helpFiles">helpFiles</a> 倉儲, 但從網頁連結上, 只能取得最新版的資料, 隨著 CoppeliaSim 主要程式庫與模組的 API 架構不斷翻新, 當使用者採用舊版本套件時, 從<a href="https://www.coppeliarobotics.com/helpFiles/">用戶手冊</a>就會攫取到不相應的內容.</p>
<p>探討如何利用網際內容管理系統架構, 讓 Coppeliasim 用戶手冊, 得以更加容易進行資料附加與應用, 擬藉此提升課程教學與專題研究效益.</p>
<p>相關轉檔程式: <a href="https://github.com/mdecycu/copsimdoc">https://github.com/mdecycu/copsimdoc</a></p>
<p>初步結果: <a href="https://mde.tw/pjcopsim">https://mde.tw/pjcopsim</a></p>
<p>AI and CoppeliaSim:</p>
<p style="padding-left: 30px;">Deep Learning:</p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/playlist?list=PLtBw6njQRU-rwp5__7C0oIVt26ZgjG9NI">Introduction to Deep Learning</a> from MIT (2022)</p>
<p style="padding-left: 60px;">Lecture <a href="https://youtu.be/7sB052Pz0sQ">1</a>, <a href="https://youtu.be/QvkQ1B3FBqA">2</a>, <a href="https://youtu.be/uapdILWYTzE">3</a>, <a href="https://youtu.be/QcLlc9lj2hk">4</a>, <a href="https://youtu.be/-WbN61qtTGQ">5</a>, <a href="https://youtu.be/wySXLRTxAGQ">6</a>, <a href="https://youtu.be/NHZMfSMAHlo">7</a>, <a href="https://youtu.be/sR6_bZ6VkAg">8</a>, <a href="https://youtu.be/QZxcTZj0L-M">9</a>, <a href="https://youtu.be/veYq6EWZyVc">10</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/vista-simulator/vista">Vista</a> on Coppeliasim</p>
<p style="padding-left: 30px;">Tree-based Machine Learning for Image Recognition:</p>
<p style="padding-left: 60px;">From local explanations to global understanding with explainable AI for trees</p>
<p style="padding-left: 90px;"><a href="https://www.nature.com/articles/s42256-019-0138-9.epdf">https://www.nature.com/articles/s42256-019-0138-9.epdf</a> </p>
<p style="padding-left: 90px;"><a href="https://suinlee.cs.washington.edu/home">https://suinlee.cs.washington.edu/home</a> </p>
<p style="padding-left: 60px;"><a href="https://erdogant.github.io/treeplot/pages/html/index.html">https://erdogant.github.io/treeplot/pages/html/index.html</a> </p>
<p style="padding-left: 30px;">Interpretable Machine Learning:</p>
<p style="padding-left: 60px;"><a href="https://christophm.github.io/interpretable-ml-book/influential.html">https://christophm.github.io/interpretable-ml-book/influential.html</a> </p><h3>Webots Doc</h3>
<h4>網際文件處理技術</h4>
<p>2019 年時 Webots 的使用者手冊文件目錄, 位於 <a href="https://github.com/cyberbotics/webots/tree/a70ccb27ebabd54401780bb28000b7c0ad004102/docs">docs</a>, 其中 <a href="https://github.com/cyberbotics/webots/blob/a70ccb27ebabd54401780bb28000b7c0ad004102/docs/doc.php">doc.php</a> 負責處理當時網站 /doc 目錄下的文件網際派送, 共有三個主要文件:</p>
<p>Webots Guide: <a href="https://cyberbotics.com/doc/guide/index">https://cyberbotics.com/doc/guide/index</a></p>
<p>Webots Reference Manual: <a href="https://cyberbotics.com/doc/reference/index">https://cyberbotics.com/doc/reference/index</a></p>
<p>Webots for Automobiles: <a href="https://cyberbotics.com/doc/automobile/index">https://cyberbotics.com/doc/automobile/index</a></p>
<p>意即, 2019 年時 Webots 的網頁採用 php 程式, WWW 伺服器採用 Apache, 而操作系統則使用 Ubuntu. (註: 目前的 <a href="https://github.com/cyberbotics/webots/tree/master/docs">docs 架構</a>已經與當時完全不同).</p>
<p>從當年的 <a href="https://github.com/omichel/webots/blob/184806f48a64091edc94b52fcdbb6b9a5b051de8/docs/local_exporter.py">local_exporter.py</a> 也可以發現, Webots 建議在近端使用 doc 目錄下文件的方式為, 利用 local_exporter.py 從官方網站下載 index.html 與 dependencies 目錄中所需的 Javascript, 然後再透過 index.html 導引各 Javascript 程式, 從 guide, reference 與 automobile 目錄中, 將 markdown 格式文件動態轉為 html.</p>
<p>利用 Markdown 與 Javascript 處理遠端與近端文件的好處是, 文件管理人員可以採用各式合用的文字編輯器管理所有 Markdown 檔案, 且各版本間的內容可以納入分散式版次管理系統, 不僅能夠多人非同步協同, 且透過資料庫中版次的內容擷取, 可以在同一網站中透過網際 URL 版次變數的宣告而擷取不同版本的文件.</p>
<p>例如: <a href="https://www.cyberbotics.com/doc/guide/page?version=R2019a">https://www.cyberbotics.com/doc/guide/page?version=R2019a</a> 可以取得倉儲中 tag 為 R2019a 版次的 Webots guide 文件內容.</p>
<p>而 <a href="https://www.cyberbotics.com/doc/guide/page?version=R2019a-rev1">https://www.cyberbotics.com/doc/guide/page?version=R2019a-rev1</a> 則是 R2019a-rev1 版次的文件內容.</p>
<p>以上處理網際文件的技術, 除了能夠將軟體套件的手冊納入分散式版次管理系統 (如 Git 或 Fossil SCM) 之外, 還能讓之後的多語系文件, 以不同的 Markdown 文件目錄儲存, 然後在主文件連結中提供不同語系 Markdown 文件所在目錄即可, 例如:</p>
<p>/doc/guide_zh-TW 指向中文正體文件目錄, 而 /doc/guide_zh-CN 則指向中文簡體文件目錄等, 各語系文件可以採用分散式版次管理的流程, 以非同步協同方式自行管理維護不同 Webots 套件的各種技術文件.</p>
<h4>KMOL 能夠從 Webots 技術文件處理流程中學到甚麼?</h4>
<p>這應該是一個不錯的 4+1 碩士題目:-)</p>
<p>Webots 早在 2008-2009 年間, 就已經 透過 <a href="https://en.wikibooks.org/wiki/Cyberbotics%27_Robot_Curriculum">https://en.wikibooks.org/wiki/Cyberbotics%27_Robot_Curriculum</a> 完成兩本導引課程文件的建構:</p>
<p><a href="/downloads/Cyberbotics Robot Curriculum.pdf">Cyberbotics Robot Curriculum.pdf</a></p>
<p><a href="/downloads/Design and Assessment of a Robot Curriculum based on the E-puck Robot and Webots.pdf">Design and Assessment of a Robot Curriculum based on the E-puck Robot and Webots.pdf</a></p>
<p>假如當年在編輯處理這些資料的過程, 能夠採用 Git (<a href="https://en.wikipedia.org/wiki/Git">Git on Wikipedia</a>) 或 Fossil SCM (<a href="https://en.wikipedia.org/wiki/Fossil_(software)">Fossil on Wikipedia</a>) 分散式版次管理系統, 現在應該就不只留下 <a href="https://en.wikibooks.org">Wikibooks</a> 或 pdf 等零散資料, 而是能夠讓隨後的學員回到當時的網際技術與文件格式情境, 充分了解改版與內容取捨細節, 以便更近一步掌握過去十年各種電腦與網路技術推陳出新的脈絡, 作為之後判斷與持續改進的依據.</p>
<p></p><h2>pjgazebo</h2>
<p><strong>Gazebo 套件的安裝與應用研究</strong></p>
<p><strong>Installation and application study of the Gazebo software<br/></strong></p>
<h4>專題動機:</h4>
<p>CoppeliaSim 雖然提供<a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib">主要程式庫</a>與<a href="https://github.com/CoppeliaRobotics">各模組</a>的原始碼, 但根據其<a href="https://www.coppeliarobotics.com/helpFiles/en/licensing.htm">使用授權</a>所載內容, 卻遠不如 <a href="https://gazebosim.org">Gazebo</a> <a href="https://github.com/osrf/gazebo/blob/gazebo11/LICENSE">使用授權</a>(<a href="http://florenceko.me/?p=1671">Apache-2.0</a>) 開放. 意即, 學生在校期間針對 CoppeliaSim 所研究或開發的延伸套件, 往後若要在業界沿用, 仍必須受到官方關鍵模組使用授權的箝制. 為了提升在機電系統產品開發流程上的自由度, 除了課程教學使用 CoppeliaSim 外, 也希望對 <a href="https://gazebosim.org">Gazebo</a> 之配置安裝與後續使用授權方面, 能有更深入的探討與研究.</p>
<p>並且, 最近幾年正是 Gazebo 套件從 <a href="https://classic.gazebosim.org/">classic Gazebo</a> 轉為 <a href="https://gazebosim.org/docs/garden">Gazebo</a> 的時間點, 推出時程規劃可參見 <a href="https://gazebosim.org/docs/garden/releases">releases</a>, 由於 classic Gazebo 的<a href="https://classic.gazebosim.org/download">版本釋出</a>以 source codes 為主, 在 Windows 操作系統安裝配置的參考資料較少, 而新版的 Gazebo 則提供較詳細的<a href="https://gazebosim.org/docs/garden/install_windows_src">安裝步驟</a>. 因此本專題將研究新版本 Gazebo 的安裝流程與其後續模擬應用.</p>
<p><strong>研究主題:</strong></p>
<ol>
<li>建立 Gazebo 機電資模擬場景 (Pick and Place, Fosball Table, Switch-like Ball Game Playground)</li>
<li>深度強化學習: <a href="https://github.com/topics/deep-reinforcement-learning?l=python">https://github.com/topics/deep-reinforcement-learning?l=python</a> </li>
<li>Python 分散式運算研究與應用: <a href="https://github.com/ray-project/ray">https://github.com/ray-project/ray</a></li>
</ol>
<h4>研究方法:</h4>
<ol>
<li>文獻探討: (一) <a href="https://www.sciencedirect.com/science/article/pii/S1569190X22001046">How to pick a mobile robot simulator: A quantitative comparison of CoppeliaSim, Gazebo, MORSE and Webots with a focus on accuracy of motion</a>, (二) <a href="/downloads/Feature and performance comparison of the V-REP, Gazebo and ARGoS robot simulators.pdf">Feature and performance comparison of the V-REP, Gazebo and ARGoS robot simulators</a>, (三) <a href="/downloads/Comparative Analysis Between Gazebo and V-REP Robotic Simulators.pdf">Comparative Analysis Between Gazebo and V-REP Robotic Simulators</a>, (四) <a href="https://learn.e.ros4.pro/en/robotic_simulators/comparison/">https://learn.e.ros4.pro/en/robotic_simulators/comparison/</a>.</li>
<li>依據<a href="https://gazebosim.org/docs/garden/install_windows_src">安裝步驟</a>, 完成新版 Gazebo 的安裝. (<a href="https://github.com/gazebosim/gz-sim">https://github.com/gazebosim/gz-sim</a>)</li>
<li>研究是否可以將 Gazebo 配置為可攜套件.</li>
<li>嘗試利用 Gazebo 模擬 foosball table 機電系統.</li>
<li>嘗試利用 Gazebo 模擬 <a href="/downloads/uarm_robot_nx12.7z">uarm robot</a> 機械手臂 pick and place 流程.</li>
<li>比較 Gazebo 與 CoppeliaSim 在安裝配置與模擬應用流程上的差異.</li>
</ol>
<p>從 <a href="https://gazebosim.org/about">https://gazebosim.org/about</a> 可得知 gazebo 正面臨關鍵改版中, 引用官方網站內容說明如下:</p>
<p>Gazebo is a collection of open source software libraries designed to simplify development of high-performance applications. The primary audience for Gazebo are <strong>robot developers</strong>, <strong>designers, and educators</strong>. However, Gazebo has been structured to suit many different use cases. Each library within Gazebo has minimal dependencies, allowing them to be used in tasks ranging from solving mathematical transforms, to video encoding, and up to simulation and process management. Just choose the libraries you need for your application without committing to a whole ecosystem.<br/><br/>Trust and reliablity has been established through a curation and maintainence process lead by <a href="https://www.openrobotics.org/">Open Robotics</a> in collaboration with a community of developers. Each library within Gazebo has been designed to serve a specific purpose. This philosophy reduces code clutter, establishes consistency between libraries, and simplifies finding solutions. Development and maintenance adheres to a protocol consisting of multiple reviews, code checkers, and continuous integration. Take a look at Gazebo's roadmap for upcoming features and the latest improvements.</p>
<p><a href="https://gazebosim.org/docs/garden/install_windows_src">https://gazebosim.org/docs/garden/install_windows_src</a></p><h2>pjcontrol</h2>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-93445-3">Automatic Control Systems With MATLAB</a> (2022)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7223-7">Python for MATLAB Development</a> (2022)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-98445-8">Control Systems</a> (2022)</p>
<p><a href="https://lcapy.readthedocs.io/en/latest/">https://lcapy.readthedocs.io/en/latest/</a> </p>
<p><a href="https://github.com/mdecycu/multisim">https://github.com/mdecycu/multisim</a> </p>
<p><a href="https://www2.mvcc.edu/users/faculty/jfiore/OpAmps/OperationalAmplifiersAndLinearICs_3E.pdf">https://www2.mvcc.edu/users/faculty/jfiore/OpAmps/OperationalAmplifiersAndLinearICs_3E.pdf</a> </p>
<p>將上述課程範例, 改為以 <a href="https://github.com/python-control/python-control">https://github.com/python-control/python-control</a> 解題.</p><h2>pjgithub</h2>
<h4>專題動機:</h4>
<p>設法利用 Github 與 Github Actions 功能, 簡化網際內容管理系統的製作流程, 使得參與協同產品設計者可以快速建立具版次管理的設計歷程網頁、網頁式簡報與結案報告 (pdf).</p>
<p>專題成員可以將 Github 倉儲 import 至 Replit, 並利用其 IDE 編輯器環境協同管理所有檔案. 在 Replit 改版後的資料可以 git push 回 Github 倉儲, 而在 Github 改版的內容, 則可自 Replit 專案中以 pull 功能取回.</p>
<p>github actions 自動轉靜態網頁研究</p>
<p><a href="https://github.com/features/actions">https://github.com/features/actions</a></p>
<p><a href="https://docs.github.com/en/actions">https://docs.github.com/en/actions</a></p>
<p><a href="/downloads/github_actions.7z">github_actions.7z</a></p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://www2.fossil-scm.org">https://www2.fossil-scm.org</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/reveal-yaml-rs">https://github.com/KmolYuan/reveal-yaml-rs</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/latex-paper">https://github.com/KmolYuan/latex-paper</a></p>
<p style="padding-left: 30px;"><a href="https://replit.com">https://replit.com</a></p>
<p> </p><h2>pjexam</h2>
<p>以 Python Flask 改寫 <a href="https://tcexam.org/">TCExam</a>.</p>
<p>專案動機:</p>
<ol>
<li>TCExam 採 PHP 編寫, 可利用 PostgreSQL 資料庫儲存資料, 因流程完整, 值得深入研究, 並改以較具未來性的 Python 進行改寫.</li>
<li>若採人工命題, 可以建立各通識或專業課程有關的題目, 讓學員自行評測或作為教學評量.</li>
<li>因 <a href="https://en.wikipedia.org/wiki/Wikipedia:Database_download">https://en.wikipedia.org/wiki/Wikipedia:Database_download</a> 可取得與各學科有關的知識內容, 長遠上可朝電腦輔助命題的方向進行研究.</li>
</ol>
<p>研究主題:</p>
<ol>
<li>PostgreSQL 資料庫系統</li>
<li>Python Flask 與 PostgreSQL 結合運用 (或可透過 Peewee ORM 進行)</li>
<li>利用 AI 擷取 Wikipedia database 執行電腦輔助命題與自動評量</li>
</ol>
<p>執行步驟:</p>
<ol>
<li>利用 <a href="https://github.com/pgsql-tw/portable-pgsql">https://github.com/pgsql-tw/portable-pgsql</a> 啟動資料庫系統.</li>
<li>利用 Python Flask 讀取 TCExam PostgreSQL 資料庫資料.</li>
<li>利用 Python Flask 改寫部分 TCExam 模組.</li>
</ol>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/tcexam_12_eng.pdf">tcexam_12_eng.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Quality_features_of_TCExam.pdf">Quality_features_of_TCExam.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/blog/about-tcexam.html">https://mde.tw/blog/about-tcexam.html</a></p><h2>pyslvs</h2>
<p>平面摺疊機構應用研究</p>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a></p>
<p>摺疊自行車研究:</p>
<p style="padding-left: 30px;"><a href="https://www.foldingcyclist.com/folding-bike-history.html">https://www.foldingcyclist.com/folding-bike-history.html</a></p>
<p style="padding-left: 30px;"><a href="https://patents.google.com/patent/EP0026800A1/en">Brompton 摺疊專利</a> (<a href="https://patents.google.com/?assignee=BROMPTON+BICYCLE+Ltd">其他相關專利</a>)</p>
<p style="padding-left: 30px;"><a href="/downloads/1896_folding_bike_US569354.pdf">1896_folding_bike_US569354.pdf</a></p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/c/tenfoldengineering/videos">TenFold Engineering</a> (<a href="https://youtu.be/o8G9gF1K6WQ">video</a>)</p>
<p style="padding-left: 30px;"><a href="https://youtu.be/9WXYVL5pVoY">Häfele "LeMans" Blind Corner Organizer</a></p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/329301634_An_overview_on_the_applications_of_mechanisms_in_architecture_Part_I_bar_structures">An overview on the applications of mechanisms in architecture. Part I: bar structures</a></p>
<p style="padding-left: 30px;"><a href="https://nolte-nc-kurventechnik.homepage.t-online.de/">https://nolte-nc-kurventechnik.homepage.t-online.de/</a> </p>
<p style="padding-left: 30px;"><a href="https://www.hindawi.com/journals/cin/2018/5462563/">Optimal Synthesis of Four-Bar Linkage Path Generation through Evolutionary Computation with a Novel Constraint Handling Technique</a></p>
<p style="padding-left: 30px;"><a href="https://etd.ohiolink.edu/apexprod/rws_etd/send_file/send?accession=dayton1366643444&amp;disposition=inline">FOUR-BAR LINKAGE SYNTHESIS FOR A COMBINATION OF MOTION AND PATH-POINT GENERATION</a></p><h2>pjfem</h2>
<p>FEM 有限元素套件編譯與應用研究</p>
<h4>專題動機:</h4>
<p><a href="https://www.ansys.com">Ansys</a>、<a href="https://www.comsol.com/">Comsol</a>、<a href="https://www.3ds.com/products-services/simulia/products/abaqus/">Abaqus</a> 與 <a href="https://www.plm.automation.siemens.com/global/en/products/simcenter/simcenter-nastran.html">Simcenter Nastran</a> 都是商用 FEM CAE 套件, 也都可以用來執行最佳化機械零組件設計, 但若能從簡單的 1D、2D 乃至 3D 基本的 FEM 數值分析原理的推導, 以及相關開源套件的原始碼編譯及應用研究做起, 應該更有助於更深入使用商用 FEM CAE 套件的各種功能與延伸應用.</p>
<p>本專題擬利用簡單的機械零組件 FEM 分析, 比較 Range3、NGSolve 與商用 FEM CAE 套件的分析結果進行比較, 設法了解網格選擇、軟體設定與數值分析流程對分析結果所造成的影響.</p>
<h4>專題執行步驟:</h4>
<ol>
<li>FEM 理論推導.</li>
<li>開源 FEM 套件原始碼分析.</li>
<li>開源 FEM 套件編譯.</li>
<li>相同案例在不同套件分析結果比較.</li>
</ol>
<p><a href="https://github.com/Range-Software/range3">https://github.com/Range-Software/range3</a></p>
<p><a href="https://ngsolve.org/">https://ngsolve.org/</a></p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/4072pj2">https://github.com/mdecycu/4072pj2</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4757-3658-8">The Mathematical Theory of Finite Element Methods</a> (2002)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/3-540-28078-2">Finite Element Methods and Their Application</a>s (2005)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4020-8733-2">Structural Analysis with the Finite Element Method - Linear Statics</a> (2009)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-642-33287-6">The Finite Element Method - Theory, Implementation, and Applications</a> (2013)</p><h2>pjblender</h2>
<p><a href="https://www.blender.org/">https://www.blender.org/</a> 建立模型, 轉入 Gazebo 或 CoppeliaSim 執行機電模擬.</p>
<p>3D 零件轉檔研究</p>
<p>CAD Sketcher 研究</p>
<p>平面機構自動組立</p>
<p>STL 零組件自動分割</p>
<p style="padding-left: 30px;"><a href="/downloads/stl_splliter.7z">stl_splitter.7z</a></p>
<p>References:</p>
<p style="padding-left: 30px;">Blender Manual: <a href="https://docs.blender.org/manual/en/latest/">https://docs.blender.org/manual/en/latest/</a></p>
<p style="padding-left: 30px;"><a href="https://hlorus.github.io/CAD_Sketcher/">https://hlorus.github.io/CAD_Sketcher/</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/hlorus/CAD_Sketcher">https://github.com/hlorus/CAD_Sketcher</a> </p><h2>OpenTextbooks</h2>
<p>在下列開放課程使用授權範圍內, 利用網際內容管理架構分門別類進行整理與機電資產品開發有關的協同產品設計網站.</p>
<p><a href="https://open.umn.edu/opentextbooks/subjects/engineering">https://open.umn.edu/opentextbooks/subjects/engineering</a></p>
<p></p>